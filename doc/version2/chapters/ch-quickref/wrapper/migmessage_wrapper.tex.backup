\subsection{ss\_tinyos-mig \wrapper \label{tinyos-mig:wrapper}}



% Peut se connecter Ã  toutes les types de sources
% 
% Peut supporter les deux versions de TinyOS, v1.x and 2.x
% 
% Command to generate a Java class from a C .h file
% 
% 
% This is an example configuration file for MigMessageWrapper.
% 
% Output structure should be the same as the message structure
% defined in your TinyOS-program's header file. Here I've used
% the following:
% 
% typedef nx_struct AbcMsg1 {
%    nx\_uint8\_t  node_id;        /* ID of this node */
%    nx\_uint8\_t  parent_id;      /* ID of parent node */
%    nx\_uint8\_t  dest_id;        /* ID of destination node */
%    nx\_uint32\_t sequence;       /* sequence number */
%    nx\_uint16\_t Battery;        /* Most recent of 1 from sensor Voltage */
%    nx\_uint16\_t AbcTemperature1; /* Most recent of 1 from sensor Temperature */
% } AbcMsg1\_t;
% 
% This wrapper requires that you have MIG-generated .java and .class -files
% available. See more information at:
% http://www.tinyos.net/tinyos-1.x/doc/nesc/mig.html or
% http://www.tinyos.net/tinyos-2.x/doc/html/tutorial/lesson4.html or
% http://www.tinyos.net/tinyos-1.x/doc/tutorial/lesson6.html
% 
% Predicate 'packet-name' is the name of your program.
% 'path' is the path to .java-file, from where the packet structure is read.
%  It is highly recommended that this points to src/gsn/wrappers/tinyos2x/
%  That way ant compiles the class-file to correct place.
% 'source' is the source of packets, where wrapper connects to.
%  More info on source format (serial connection, SerialForwarder etc.) can be 
%  found at:
% http://www.tinyos.net/tinyos-2.x/doc/html/tutorial/lesson4.html
% 
% Output data types are a little bit different in GSN than in nesC. Here is
% the conversion table (I couldn't find the definition for MIG datatype
% conversion, so these are tested manually):
% 
% nesC         Java     GSN       Explanation
% nx\_int8\_t    byte     tinyint   8-bit signed
% nx\_uint8\_t   short    smallint  8-bit unsigned
% nx\_int16\_t   short    smallint  16-bit signed
% nx\_uint16\_t  int      integer   16-bit unsigned
% nx\_int32\_t   int      integer   32-bit signed
% nx\_uint32\_t  long     bigint    32-bit unsigned
% 
% nesC might have some floating point numbers as well, but they are not
% supported at least for the moment.
% 
% 
% 
% 
% 
% example file with a class that is available. But not the source...

\begin{table*}[!htp]
	\centering
	{\normalfont\footnotesize
	\begin{tabulary}{\textwidth}{|C|C|C|C|J|}%
	\hline
		\multicolumn{5}{|c|}{\textbf{ss\_tinyos-mig \wrapper Parameters}} \\
	\hline
	\hline
		\textbf{Parameter Name} &
		\textbf{Type} &
		\textbf{Mandatory} &
		\textbf{Default} &
		\textbf{Description} \\
	\hline
	\hline
		source &
		String &	
		Yes &
		None &
		The TinyOS source + \todo{examples avec serial forwarder} \\
	\hline
		message-classname &
		String &
		Yes &
		None &
		The message class generated by MIG \\
	\hline 
		message-length &
		Integer &
		No &
		\inlinecode{DEFAULT\_MESSAGE\_SIZE} &
		Override the default size of the messages received \\
	\hline
		getter-prefix &
		String &
		No &
		get\_ &
		The methods of the message class that contain this prefix will be added in the output. Keep the default value for  the messages generated with MIG. \\
	\hline
	\hline
		\multicolumn{2}{|l}{Support Safe Storage} &
		\multicolumn{3}{l|}{Yes (Parameters listed on \tableref{table:safe_storage_parameters} must be added.)} \\
		\multicolumn{2}{|l}{SS \wrapper Classname} &
		\multicolumn{3}{l|}{gsn.acquisition2.wrappers.MigMessageWrapper2 (mig2)} \\
		\multicolumn{2}{|l}{GSN \wrapper Classname} &
		\multicolumn{3}{l|}{gsn.acquisition2.wrappers.MigMessageWrapperProcessor (ss\_tinyos-mig)} \\

	\hline
	\end{tabulary}
	}
	\caption{ss\_tinyos-mig \wrapper Parameters}
	\label{table:tinyos-mig_parameters}
\end{table*}

\begin{table*}[!htp]
	\centering
	{\normalfont\footnotesize
	\begin{tabulary}{\textwidth}{|C|C|J|}%
	\hline
		\multicolumn{3}{|c|}{\textbf{ss\_tinyos-mig \wrapper Output Structure}} \\
	\hline
	\hline
		\textbf{Name} &
		\textbf{Type} &
		\textbf{Description} \\
	\hline
	\hline
		\todo{TODO} &
		\todo{TODO} &
		\todo{TODO} \\
	\hline 
	\end{tabulary}
	}
	\caption{ss\_tinyos-mig \wrapper Output Structure}
	\label{table:tinyos-mig_wrapper_output_structure}
\end{table*}
