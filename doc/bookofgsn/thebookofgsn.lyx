#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize a4paper
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
The Book of GSN
\end_layout

\begin_layout Author
Jérôme Rousselot and Ali Salehi
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Part
User's Guide
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Presentation
\end_layout

\begin_layout Standard
GSN (for Global Sensor Networks
\begin_inset LatexCommand \index{Global Sensor Networks}

\end_inset

) is a software project that started in 2005 at EPFL in the LSIR Lab by
 Ali Salehi, under the supervision of Prof.
 Karl Aberer.
 The initial goal was to provide a reusable software platform for the processing
 of data streams generated by wireless sensor networks.
 The project was succesful, and was later reoriented towards a generic stream
 processing platform.
\end_layout

\begin_layout Standard
GSN acquires data, filters it with an intuitive, enriched SQL syntax, runs
 customisable algorithms on the results of the query, and outputs the generated
 data with its notification subsystem.
\end_layout

\begin_layout Standard
GSN can be configured to acquire data from various data sources.
 The high number of data sources in GSN allows for sophisticated data processing
 scenarios.
 In the unlikely event that your data sources are not supported, it is very
 easy to write a wrapper to make your hardware work with GSN (you can find
 more information about this in chapter 
\begin_inset LatexCommand \ref{cha:Writing-a-Wrapper}

\end_inset

).
\end_layout

\begin_layout Standard
GSN offers advanced data filtering functionnalities through an enhanced
 SQL syntax.
 It is assumed that the reader has some knowledge of the Standard Query
 Language (SQL).
 If not, we encourage you to read some documentation like ??? and ???.
 Using it for basic operations is fairly intuitive and you should be able
 to start using it from the examples provided in this document.
\end_layout

\begin_layout Section
Installing GSN
\end_layout

\begin_layout Standard
Due to the quick development cycle of GSN, you should install the latest
 version.
 It can always be found at 
\begin_inset LatexCommand \htmlurl{http://gsn.sourceforge.net/download/}

\end_inset

.
\end_layout

\begin_layout Standard
Before installing GSN, please download the latest version of the Java Developmen
t Kit
\begin_inset LatexCommand \index{Java Development Kit}

\end_inset

 from 
\begin_inset LatexCommand \htmlurl{http://www.java.com}

\end_inset

.
 Some optional GSN components, such as the USB webcam wrapper, need third-party
 libraries that we are not allowed to redistribute under GPL license.
 If you want to use these features, you will have to download and install
 these by yourself.
 We apologize for the inconvenience.
\end_layout

\begin_layout Standard
GSN comes with an easy-to-use graphical installer.
 The default settings should be fine.
\end_layout

\begin_layout Chapter
Configuring and running GSN
\end_layout

\begin_layout Section
The basics
\end_layout

\begin_layout Standard
GSN comes preconfigured with many virtual sensors activated.
\end_layout

\begin_layout Standard
It is possible to run GSN from a graphical user interface, or from the command
 line interface.
 The graphical interface is self explanatory ; you only need to run it and
 to click on the Start button.
 It also allows to easily analyze GSN log output.
\end_layout

\begin_layout Standard
The command to start GSN from the command line interface is:
\end_layout

\begin_layout LyX-Code
ant gsn
\end_layout

\begin_layout Standard
This will generate a very verbose output.
 Don't worry if the text goes too fast: all the information is stored in
 a log file (logs/gsn.log) that you can view with your favorite text editor.
 You can configure the log level by editing the file 
\family typewriter
conf/log4j.properties
\family default
.
 There are several log levels, from DEBUG (maximum logging) to WARN (minimum
 logging, maximum performance).
 If you want to reduce the log verbosity, change the log4j.rootLogger to
 INFO or WARN.
 The conf/log4j.properties file specifies two destinations for the output
 log, one of them is called 
\begin_inset Quotes eld
\end_inset

console
\begin_inset Quotes erd
\end_inset

 which presents the standard output and the other one called file which
 points to logs/gsn.log file.
 The log4j.rootLogger=WARN,console,file sets the logging level of both detination
s to WARN level.
 
\end_layout

\begin_layout Standard
If you want to debug your configuration, simply do the opposite.
 This parameter can also be set from the graphical user interface.
 
\end_layout

\begin_layout Standard
GSN does much more than generating log statements.
 You can access the web interface of your gsn server on 
\begin_inset LatexCommand \url{http://127.0.0.1:22001}

\end_inset

.
\end_layout

\begin_layout Standard
You should see something like Figure 
\begin_inset LatexCommand \ref{fig:GSN-Web-Interface}

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Caption
GSN Web Interface
\begin_inset LatexCommand \label{fig:GSN-Web-Interface}

\end_inset


\end_layout

\begin_layout Standard

\hfill

\begin_inset Graphics
	filename figures/gsn-default-web-interface.png
	width 70page%
	keepAspectRatio

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Section
Some example configuration scenarios
\end_layout

\begin_layout Standard
As can be seen on Figure 
\begin_inset LatexCommand \ref{gsn-3-parts}

\end_inset

, GSN is built around three subsystems: data acquisition, data processing
 and data output.
 Most of the time these three functionalities can run on the same computer.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Caption
The three autonomous components of GSN
\begin_inset LatexCommand \label{gsn-3-parts}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figures/gsn-3parts-overview.png
	lyxscale 50
	width 100line%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
However, more complex scenarios can be imagined, and GSN servers can collaborate
 so that each of them only deals with one of these three functions.
 This can be done to distribute the load, to deploy GSN on remote, resource-cons
trained devices or to interconnect many data sources into complex data processin
g scenarios.
\end_layout

\begin_layout Standard
For example, a user may deploy a network of wireless sensors in a building
 for intrusion detection.
 Data is collected through multiple, small computers connected to one of
 these sensors.
 Such data collection stations are often called 
\emph on
sinks
\emph default
.
 Each sink receives data from the neighbouring sensors.
 To reduce hardware costs and power consumption, these sinks are resource
 constrained: no hard disk, only a serial port connector and a ethernet
 or wireless local area network connection.
 Each sink can run GSN configured to only acquire data.
 
\end_layout

\begin_layout Standard
A GSN data processing server runs in the basement of the building or even
 in a remote location, possibly hosted in a colocation facility.
 This server knows about each of the data acquisition servers and registers
 to them as a data consumer.
 It will receive their data, analyzes the network packets, logs all erroneous
 packets in a separate database for off-line manual analysis and sends all
 statistics packets to the graph generator.
\end_layout

\begin_layout Standard
A third GSN server gets the refined data and also runs the Apache web server
 for performance reasons.
 It allows identified web users to see plots of the number of erroneous
 messages in the last 24 hours (for application debugging and traffic spoofing
 detection), plots with the number of openings for each door and the time
 at which they occured and the photos of the last 25 persons who entered
 the building.
 It also shows a zoomable satellite picture of the enterprise campus to
 locate more easily the possible source of intrusion.
\end_layout

\begin_layout Standard
An idea on how to configure GSN to do that is shown in Figure 
\begin_inset LatexCommand \ref{fig:Intrusion-detection-example}

\end_inset

.
 For the sake of simplicity, only one instance of each server type is represente
d.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{fig:Intrusion-detection-example}

\end_inset

Intrusion detection example scenario
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figures/gsn-config-3-servers.png
	lyxscale 25
	width 100line%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset LatexCommand \index{GSN Internals}

\end_inset

GSN Architecture
\end_layout

\begin_layout Section
Generalities
\end_layout

\begin_layout Standard
GSN is composed of three parts: data acquisition, data processing, and output
 dispatching (also called notification subsystem).
 Most users will probably focus on the second part, data processing.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Caption
GSN Architecture Overview
\end_layout

\begin_layout Standard

\hfill

\begin_inset Graphics
	filename figures/gsn-architecture.png
	width 100line%

\end_inset


\hfill
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Data Acquisition
\end_layout

\begin_layout Standard
Before filtering and processing data, GSN needs to receive it.
 GSN considers two types of data sources: event-based and polling-based.
 In the first case, data is sent by the source and a GSN method is called
 when it arrives.
 Serial ports, network (TCP or UDP) connections, wireless webcams fall in
 this case.
 In the latter one, GSN periodically asks the source for new data.
 This is the case of an RSS feed or a POP3 email account.
\end_layout

\begin_layout Subsection
GSN Wrappers
\begin_inset LatexCommand \index{Wrappers}

\end_inset


\end_layout

\begin_layout Standard
GSN can receive data from various data sources.
 This is done by using so called 
\emph on
wrappers
\emph default
.
 They are used to encapsulate the data received from the data source into
 the standard GSN data model, called a 
\emph on
StreamElement
\emph default
.
 A StreamElement is an object representing a row of a SQL table.
\end_layout

\begin_layout Standard
Each wrapper is a Java class that extends the 
\emph on
AbstractWrapper
\emph default
 parent class.
 Usually a wrapper initializes a specialized third-party library in its
 constructor.
 It also provides a method which is called each time the library receives
 data from the monitored device.
 This method will extract the interesting data, optionnally parse it, and
 create one or more StreamElement(s) with one or more columns.
 From this point on, the received data has been mapped to a SQL data structure
 with fields that have a name and a type.
 GSN is then able to filter this using its enhanced SQL-like syntax.
 You will learn more about that in section 
\begin_inset LatexCommand \ref{sub:The-SQL-syntax}

\end_inset

.
\end_layout

\begin_layout Standard
A wrapper is implemented in a Java class.
 For simplicity, GSN uses short names to refer to these wrappers.
 These associations are defined in the file 
\family typewriter
conf/wrappers.properties
\family default
.
 For now on it is assumed that you use the default names provided at installatio
n time.
\end_layout

\begin_layout Standard
Each of the standard wrappers is described below with some documentation
 on how to use it.
\end_layout

\begin_layout Standard
You can refer to Table 
\begin_inset LatexCommand \pageref{tab:Description-of-Wrappers}

\end_inset

 for a quick overview of the available wrappers.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{tab:Description-of-Wrappers}

\end_inset

Description of GSN wrappers
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="8page%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="25page%">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Wrapper
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Short name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
page
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remote wrapper
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remote
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Enables a virtual sensor to use another virtual sensor as its data source.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:Remote-Wrapper}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TinyOS 1.x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
tinyos1x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Communicates with any device running the TinyOS 1.x operating system.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:TinyOS-1.x}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TinyOS 2.x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
tinyos2x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Communicates with any device running the TinyOS 2.x operating system.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:TinyOS-2.x}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Serial Wrapper
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
serial
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reads and send data on the serial port (RS-232 interface), real or virtual
 (e.g.
 Serial Port Profile over BlueTooth wireless link).
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:Serial-Wrapper}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
UDP Wrapper
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
udp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Opens a UDP socket on a configured port and reads data on it.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:UDP-Wrapper}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
System Time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
system-time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Generates events from system clock every 
\emph on
t
\emph default
 milliseconds, with the system time at which the event was generated.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:System-Time}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
HTTP Get handler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
http-get
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Polls sensor readings from a remote web server (e.g., AXIS wireless camera).
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:Http-wrapper}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
USB Webcams
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
usb-cam
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Polls a USB camera
\begin_inset Foot
status collapsed

\begin_layout Standard
Only the OV518 chipset is currently supported.
\end_layout

\end_inset

 periodically to grab a picture.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:USB-Webcams}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memory Monitor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
memory-usage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Periodically generates memory usage statistics.
 Current version gives information on Heap, non-heap and the number of objects
 awaiting finalization in the virtual machine running GSN.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:Memory-Monitor}

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{Remote Wrapper}

\end_inset

Remote Wrapper
\begin_inset LatexCommand \label{sub:Remote-Wrapper}

\end_inset


\end_layout

\begin_layout Standard
This is a special wrapper that allows GSN to treat a remote virtual sensor
 (located on anthor machine in the network) as a data source for another
 virtual sensor.
 This data source can be configured on the same GSN server (in this case,
 we say that they are defined in the same container), or it can be run on
 another computer (hence the ip/port of this wrapper).
\end_layout

\begin_layout Standard
This wrapper takes three mandatory parameters.
 
\family typewriter
HOST
\family default
 specifies the network address (DNS name or IP address) on which is running
 the GSN instance we want to connect to (when connecting to the same GSN
 instance, use the 
\family typewriter
localhost
\family default
 name or the loopback address 
\family typewriter
127.0.0.1
\family default
).
 
\family typewriter
PORT
\family default
\emph on
 
\emph default
is the port number on which this GSN instance is listening (the standard
 port for GSN is 
\family typewriter
22001
\family default
).
 
\family typewriter
name
\family default
 is the name of the virtual sensor to which we want to connect.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Caption
Parameters for Remote wrapper
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="15line%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="30line%">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
HOST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Network name or IP address
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The network address on which the GSN instance that we want to connect to
 is running.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
PORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integer between 1 and 65535
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The TCP port on which the GSN instance that we want to connect to is running.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The name of the virtual sensor name we want to get data from.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Local Wrapper (InVMPipeWrapper)
\end_layout

\begin_layout Standard
This is a special form of the Remote wrapper which always points to the
 GSN instance running on the same machine.
 Using this wrapper you can combine two or more virtual sensors together
 and make a chain of data processing.
 For using this wrapper both virtual sensor should be located on a very
 same GSN instance.
 This wrapper accepts only one parameter which is called 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

 and points to the name of the virtual sensor acting as a data source.
 Note that if both virtual sensors are on the same machine you can use both
 the remote and local wrapper but the latter perform much faster than the
 former.
 The remote wrapper suffers from the network communication overhead while
 the local wrapper is desgined to bypass this layer hence making it faster.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{TinyOS 1.x}

\end_inset

TinyOS
\begin_inset LatexCommand \label{sub:TinyOS-1.x}

\end_inset


\begin_inset LatexCommand \index{TinyOS 2.x}

\end_inset


\begin_inset LatexCommand \label{sub:TinyOS-2.x}

\end_inset


\end_layout

\begin_layout Standard
With default GSN installation we provide sample wrappers to interact with
 TinyOS based sensor networks (both version 1.x and 2.x).
 The TinyOS wrapper is actually a java program that interacts with the serial
 forwarder (provided by TinyOS distribution) which inturn presents a sensor
 network.
 In order to use the TinyOS wrapper with a sensor network you need to first
 generate the java representation of the message structures used in the
 network (in TinyOS they are defined in the .h files).
 NesC language provides a tool called 
\begin_inset Quotes eld
\end_inset

mig
\begin_inset Quotes erd
\end_inset

 (message interface generator for nesC) for this purpose.
 The tool has a standard man page documentation in addition to being described
 in the lession 4 of the TinyOS 2 tutorial.
 
\end_layout

\begin_layout Standard
Note for TinyOS 1.x users, due to strange java package management in TinyOS
 2.x distribution, both TinyOS 1.x and 2.x are using very same package structures
 and class names which generates conflict when you have both TinyOS1.x and
 2.x jar files in your classpath (which is the case for GSN).
 To resolve this, you need to edit the generated message file and modify
 it so that it only uses class files from the TinyOS 1.x (all classes must
 be imported from net.tinyos1x package).
\end_layout

\begin_layout Standard
Once you generated the Java representation of the communication message
 structures, you need to write a wrapper class for your message.
 Assuming you have a message class called MyMessage which has three fields,
 node_id, temperature and light, here is a sample wrapper class to bind
 your network with GSN :
\end_layout

\begin_layout Verse
//import net.tinyos1x.message.Message; // Only for TinyOS 1.x
\end_layout

\begin_layout Verse
//import net.tinyos1x.message.MessageListener; // Only for TinyOS 1.x
\end_layout

\begin_layout Verse
//import net.tinyos1x.message.MoteIF; // Only for TinyOS 1.x
\end_layout

\begin_layout Verse
import net.tinyos.message.Message; // Only for TinyOS 2.x
\end_layout

\begin_layout Verse
import net.tinyos.message.MessageListener; // Only for TinyOS 2.x
\end_layout

\begin_layout Verse
import net.tinyos.message.MoteIF; // Only for TinyOS 2.x
\end_layout

\begin_layout Verse
import net.tinyos.packet.BuildSource; // Only for TinyOS 2.x
\end_layout

\begin_layout Verse
import net.tinyos.packet.PhoenixSource; // Only for TinyOS 2.x
\end_layout

\begin_layout Verse
public class MyWrapper extends AbstractWrapper implements MessageListener
 { 
\end_layout

\begin_layout Verse
private final DataField [] structure = new DataField[] {
\end_layout

\begin_layout Verse
new DataField("node_id","int","The node id the mote."),
\end_layout

\begin_layout Verse
new DataField("temperature","double","Presents the temperature sensor."),
\end_layout

\begin_layout Verse
new DataField("light","double","Presents the light sensor.")
\end_layout

\begin_layout Verse
}; 
\end_layout

\begin_layout Verse
public boolean initialize ( ) { 
\end_layout

\begin_layout Verse
AddressBean addressBean = getActiveAddressBean( );
\end_layout

\begin_layout Verse
String host = addressBean.getPredicateValue( "host" ); // The ip of the machine
 running serial forwarder.
\end_layout

\begin_layout Verse
if ( host == null || host.trim( ).length( ) == 0 ) {
\end_layout

\begin_layout Verse
logger.warn( "The >host< parameter is missing from the RemoteWrapper wrapper."
 );
\end_layout

\begin_layout Verse
return false; //initialization failed, the host name is not provided in
 the parameters.
\end_layout

\begin_layout Verse
}
\end_layout

\begin_layout Verse
int port; // The port of the machine running serial forwarder.
\end_layout

\begin_layout Verse
String portRaw = addressBean.getPredicateValue( "port" );
\end_layout

\begin_layout Verse
if ( portRaw == null || portRaw.trim( ).length( ) == 0 )
\end_layout

\begin_layout Verse
{ logger.warn( "The >port< parameter is missing from the RemoteWrapper wrapper."
 );
\end_layout

\begin_layout Verse
return false;// initialization failed, the port no.
 is not provided in the parameters.
\end_layout

\begin_layout Verse
} try {
\end_layout

\begin_layout Verse
port = Integer.parseInt( portRaw ); 
\end_layout

\begin_layout Verse
if ( port > 65000 || port <= 0 ) throw new Exception( "Bad port No" + port
 );
\end_layout

\begin_layout Verse
} catch ( Exception e ) { 
\end_layout

\begin_layout Verse
logger.warn( "The >port< parameter is not a valid integer for the RemoteWrapper
 wrapper." ); 
\end_layout

\begin_layout Verse
return false; // initialization failed, the port no.
 is not valid.
\end_layout

\begin_layout Verse
}
\end_layout

\begin_layout Verse
if ( logger.isDebugEnabled( ) )
\end_layout

\begin_layout Verse
logger.debug( "The SFWrapperDS connects to the Serial Forwarder interface
 at *" + host + ":" + port + "*" ); 
\end_layout

\begin_layout Verse
setName( "TinyOS-My-Wrapper") ;
\end_layout

\begin_layout Verse
try {
\end_layout

\begin_layout Verse
PhoenixSource reader=BuildSource.makePhoenix( BuildSource.makeSF( host , port
 ) , null );// Only for TinyOS 2.x
\end_layout

\begin_layout Verse
reader.start( ); // TinyOS 2.x
\end_layout

\begin_layout Verse
moteif = new MoteIF( reader ); // Only for TinyOS 2.x
\end_layout

\begin_layout Verse
// moteif = MoteIF (host,port); // Uncomment this, only for TinyOS 1.x
\end_layout

\begin_layout Verse
} catch ( Exception e ) {
\end_layout

\begin_layout Verse
logger.error( e.getMessage( ) , e );
\end_layout

\begin_layout Verse
return false; // Serial Forwarder client couldn't establish the connection.
\end_layout

\begin_layout Verse
}
\end_layout

\begin_layout Verse
moteif.registerListener( new MyMessage( ) , this );
\end_layout

\begin_layout Verse
return true; //initialization is successful.
\end_layout

\begin_layout Verse
}
\end_layout

\begin_layout Verse
public synchronized void finalize ( ) {
\end_layout

\begin_layout Verse
moteif.deregisterListener( new SensorScopeDataMsg( ) , this );
\end_layout

\begin_layout Verse
}
\end_layout

\begin_layout Verse
public void messageReceived ( int toAddr , Message message ) {
\end_layout

\begin_layout Verse
MyMessage msg = (MyMessage) message;
\end_layout

\begin_layout Verse
// (If needed) extract/parse/convert the sensor measurements to some meaningful
 values
\end_layout

\begin_layout Verse
postStreamElement( nodeid,sensor1,sensor2 );
\end_layout

\begin_layout Verse
}
\end_layout

\begin_layout Verse
public DataField [] getOutputFormat ( ) { return structure; }
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{Serial Wrapper}

\end_inset

Serial Wrapper
\begin_inset LatexCommand \label{sub:Serial-Wrapper}

\end_inset


\end_layout

\begin_layout Standard
Todo : Jaggi has added several options to this wrapper, I'll combine them
 in a few days.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
The short name of this wrapper is 
\family typewriter
serial
\family default
.
 
\end_layout

\begin_layout Standard
The mandatory parameters are 
\family typewriter
HOST
\family default
, 
\family typewriter
PORT
\family default
 and 
\family typewriter
serialport
\family default
.
 The latest one specifies on which serial port the wrapper should listen.
 The syntax is platform dependent: on Windows systems it will be 
\family typewriter
COM1
\family default
, 
\family typewriter
COM2
\family default
...
 and on Unix systems this will be 
\family typewriter
/dev/ttyS0
\family default
, 
\family typewriter
/dev/ttyS1
\family default
...
\end_layout

\begin_layout Standard
In its default mode of operation, each time it receives a byte sequence,
 it will be published in a StreamElement under the name 
\family typewriter
RAW_PACKET
\family default
 and the type 
\family typewriter
BINARY
\family default
.
 It is up to the virtual sensor getting data from the wrapper to analyze
 the meaning of the received bytes.
\end_layout

\begin_layout Standard
If the optional parameter 
\emph on
inputseparator
\emph default
 is defined, then the received data is not immediately published.
 Instead, the wrapper splits the data using the parameter value as a separator.
 The separator is never published.
 If there is remaining data after the last separator, it is stored in a
 temporary buffer.
 The next byte sequence to be received by the wrapper will be concatenated
 to the temporary buffer before attempting to split it.
\end_layout

\begin_layout Standard
As an example, if the separator is 
\family typewriter
:
\family default
 and the received data is 
\family typewriter
abc:def:g
\family default
 , then two StreamElements (two rows) are generated.
 The first one contains 
\family typewriter
abc
\family default
 in the 
\family typewriter
RAW_PACKET
\family default
 field and the other one contains 
\family typewriter
def
\family default
.
 
\family typewriter
g
\family default
 is stored in the temporary buffer.
 Imagine that the wrapper now receives 
\family typewriter
hijklm:
\family default
 .
 Then only one StreamElement will be generated, with the value 
\family typewriter
ghijklm
\family default
 and the temporary buffer will be emptied.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Caption
Parameters for serial wrapper
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="30line%">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
serialport
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The serial port on which the wrapper should listen to.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
baudrate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The speed at which the data is arriving on the port, in bits per second.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
9600
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
inputseparator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
If this parameter is defined, the serial port wrapper will split incoming
 data using this value as a separator.
 The separator is not published.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{UDP Wrapper}

\end_inset

UDP Wrapper
\begin_inset LatexCommand \label{sub:UDP-Wrapper}

\end_inset


\end_layout

\begin_layout Standard
The short name of this wrapper is 
\family typewriter
udp
\family default
.
 It allows GSN to receive arbitrary data on a UDP port of the machine on
 which it is running.
 There is only one parameter, named 
\family typewriter
port
\family default
.
 Received data is published under the type 
\family typewriter
BINARY
\family default
 and the name 
\family typewriter
RAW_PACKET
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Caption
Parameters for UDP wrapper
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="15line%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="30line%">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integer between 1 and 65535
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The UDP port on which the wrapper should listen to.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{System Time}

\end_inset

System Time
\begin_inset LatexCommand \label{sub:System-Time}

\end_inset


\end_layout

\begin_layout Standard
The short name for this wrapper is 
\family typewriter
system-time
\family default
.
 It generates a StreamElement object every 
\family typewriter
clock_periods
\family default
 milliseconds, with the timestamp at which the object was generated.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Caption
Parameters for System Time wrapper
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="15line%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="30line%">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
clock_periods
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Time interval between two events.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1000 ms
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{Axis Wireless Camera}

\end_inset

Http-Get Wrapper Wireless Camera
\begin_inset LatexCommand \label{sub:Http-wrapper}

\end_inset


\end_layout

\begin_layout Standard
This wrapper polls a sensor data from a web server using http get requests.
 This can be used with any kind of sensor providing access to its sensor
 data via a web server.
 As a sample, we provide a netcam virtual sensor which uses this wrapper
 to interact with Axis 206W networked camera.
 This wrapper has the following parameters : 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Caption
Parameters for Http Get wrapper
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="15line%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="30line%">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
rate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Time interval between two events.
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2000 ms
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
url
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The URL of the web server serving sensor readings.
 Becareful about the especial characters in XML.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
N/A
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{USB Webcams}

\end_inset

USB Webcams
\begin_inset LatexCommand \label{sub:USB-Webcams}

\end_inset


\end_layout

\begin_layout Standard
Because of a license incompatibility, the wrapper for OV511/518 wired usb
 cameras is not distributed with the standard installation of GSN.
\end_layout

\begin_layout Standard
You can find the wrapper (the java files) from the svn repository of GSN
 at 
\begin_inset LatexCommand \htmlurl{http://www.sourceforge.net/projects/gsn}

\end_inset

.
\end_layout

\begin_layout Standard
To use the ovcam511/518 wrapper with linux: 
\end_layout

\begin_layout Standard
1.
 Get the driver from 
\begin_inset LatexCommand \htmlurl{http://ovcam.org/ov511/}

\end_inset

, compile it and install it.
\end_layout

\begin_layout Standard
2.
 Download the Java Media Framework for your platform and install it.
 At this stage, the JMF should detect your webcam.
 If it does not, most probably the ov511 driver was not correctly installed.
 Please refer to the documentation of your distribution.
\end_layout

\begin_layout Standard
3.
 Once the webcam is detected by the JMF, On linux : sudo rmmod ov511; sudo
 modprobe ovcamchip;sudo modprobe ov511
\end_layout

\begin_layout Standard
4.
 The system environment or the java execution environment (in Eclipse) must
 be configured:
\end_layout

\begin_layout LyX-Code
LD_LIBRARY_PATH=/home/ali/download/JMF-2.1.1e/lib:
\end_layout

\begin_layout LyX-Code
  /usr/local/java/jdk1.5.0/jre/lib/i386:
\end_layout

\begin_layout LyX-Code
  /usr/local/java/jdk1.5.0/jre/lib/i386/client:
\end_layout

\begin_layout LyX-Code
  /usr/local/java/jdk1.5.0/jre/lib/i386/xawt
\end_layout

\begin_layout LyX-Code
LD_PRELOAD=/usr/local/java/jdk1.5.0/jre/lib/i386/libjawt.so
\end_layout

\begin_layout Standard
The short name for this wrapper is 
\family typewriter
usb-cam
\family default
.
 You can configure it to run in live mode or not (mandatory parameter 
\family typewriter
live-view
\family default
).
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Caption
Parameters for OV511 USB webcams
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="15line%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="20line%">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
live-view
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Boolean (as String: 
\family typewriter
true 
\family default
or 
\family typewriter
false
\family default
)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Sets the web cam in live mode.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{Memory Monitor}

\end_inset

Memory Monitor
\begin_inset LatexCommand \label{sub:Memory-Monitor}

\end_inset


\end_layout

\begin_layout Standard
This wrapper queries periodically the virtual machine in which gsn is running.
 It produces statistics on memory usage.
 The query rate can be configured with the optional parameter rate.
 The short name for this wrapper is memory-usage.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Caption
Parameters for memory monitoring wrapper
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="15line%">
<column alignment="center" valignment="top" leftline="true" width="15line%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="20line%">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
rate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defines the rate at which data is produced.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1000
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Section
Data filtering and processing
\end_layout

\begin_layout Standard
GSN provides two complementary mechanisms to work on your data.
\end_layout

\begin_layout Standard
The first one is based on a SQL syntax enhanced with specialized semantics
 for timed sliding windows and event counting.
\end_layout

\begin_layout Standard
The second one allows to manipulate data with specialized programs called
 
\emph on
virtual sensors
\emph default
.
 GSN comes with a library of virtual sensors that you can use without programmin
g.
 If you have more sophisticated needs, you can write your own virtual sensors
 (See the Developer's Guide, chapter 
\begin_inset LatexCommand \ref{cha:Writing-a-VS}

\end_inset

).
\end_layout

\begin_layout Standard
GSN always processes the data according to a virtual sensor configuration.
 If you only want to use the SQL filtering mechanism, without any data transform
ation, you can use the 
\emph on
BridgeVirtualSensor
\emph default
 (see section 
\begin_inset LatexCommand \ref{sub:BridgeVirtualSensor}

\end_inset

).
\end_layout

\begin_layout Standard
If you don't want to use the SQL filtering mechanism, simply select all
 data from the wrapper.
\end_layout

\begin_layout Subsection
The SQL syntax
\begin_inset LatexCommand \label{sub:The-SQL-syntax}

\end_inset


\end_layout

\begin_layout Subsection
Virtual Sensors
\begin_inset LatexCommand \index{Virtual Sensors}

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
Virtual sensors are small Java programs that register to GSN with a specific
 SQL query for their data input.
 This query is configured by the user.
 When GSN receives data that matches the filter at the entry of a virtual
 sensor, this data is sent to the virtual sensor, which usually performs
 some sort of operation depending of the received data, and finally publishes
 some data (it may also produce nothing).
\end_layout

\begin_layout Standard
Virtual sensors are configured in the virtual-sensors directory.
 You can edit the configuration of a virtual sensor online while GSN is
 running, because GSN periodically scans this directory for updates.
 This can be very useful when you are learning how to use GSN: you can immediate
ly see the effect of modifying a query.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{tab:List-of-VS}

\end_inset

GSN built-in virtual sensors
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="8page%">
<column alignment="center" valignment="top" leftline="true" width="8page%">
<column alignment="center" valignment="top" leftline="true" width="30line%">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="7line%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Virtual Sensor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Class name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
page
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Bridge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gsn.vsensor.
 BridgeVirtualSensor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
This VS only acts as a bridge and does not modify data.
 It can be used to forward data directly from a wrapper to the notification
 system, or to only use SQL filtering.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:BridgeVirtualSensor}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Chart
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gsn.vsensor.
 ChartVirtualSensor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Generates graphs of received data.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{ChartVirtualSensor}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Stream Exporter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gsn.vsensor.
 StreamExporterVirtualSensor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exports received data to any supported database.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \pageref{sub:Stream-Exporter}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Web Interaction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gsn.vsensor.
\end_layout

\begin_layout Standard
WebInter\SpecialChar \-
active\SpecialChar \-
Virtu\SpecialChar \-
al\SpecialChar \-
Sensor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Host Controller Interface Graphical User Interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gsn.vsensor.
\end_layout

\begin_layout Standard
HCI\SpecialChar \-
Proto\SpecialChar \-
col\SpecialChar \-
GUIVS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Graphical User Interface for sending commands to a hardware device.
 Two protocols are currently supported.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The virtual-sensor xml configuration file
\end_layout

\begin_layout Standard
A virtual sensor configuration file starts with the 
\family typewriter
virtual-sensor
\family default
 tag.
 It takes three parameters, 
\family typewriter
name
\family default
, 
\family typewriter
priority
\family default
 and 
\family typewriter
password
\family default
.
 The first one is mandatory and arbitrary (the only constraint is that the
 name should be unique in this GSN configuration), and the two others are
 optional.
 0 is the highest priority and 20 is the lowest.
 The default priority is 10.
\end_layout

\begin_layout Standard
The first tag inside virtual-sensor is usually 
\family typewriter
processing-class
\family default
.
 The first tag inside this group is 
\family typewriter
class-name
\family default
, and gives the class name of the Virtual Sensor to be used in this configuratio
n.
 After this comes an optional 
\family typewriter
init-params
\family default
\emph on
 
\emph default
section.
\end_layout

\begin_layout Standard
We will work with an example to better understand these concepts.
 We present here a configuration for the ChartVirtualSensor that gets data
 from another virtual sensor, named 
\family typewriter
MemoryMonitorVS
\family default
.
 These two configurations can be found in the default installation of GSN
 under the names 
\emph on
memoryDataVS.xml 
\emph default
and 
\emph on
memoryPlotVS.xml
\emph default
.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<virtual-sensor name="MemoryPlotVS" >
\end_layout

\begin_layout LyX-Code
  <processing-class>
\end_layout

\begin_layout LyX-Code
     <class-name>gsn.vsensor.ChartVirtualSensor</class-name>
\end_layout

\begin_layout LyX-Code
        <init-params>
\end_layout

\begin_layout LyX-Code
            <param name="input-Stream">DATA</param>
\end_layout

\begin_layout LyX-Code
            <param name="title">GSN Memory Usage</param>
\end_layout

\begin_layout LyX-Code
            <param name="type">ANY</param>
\end_layout

\begin_layout LyX-Code
            <param name="height">200</param>
\end_layout

\begin_layout LyX-Code
            <param name="width">300</param>
\end_layout

\begin_layout LyX-Code
            <param name="vertical-axis">Sensor Readings</param>
\end_layout

\begin_layout LyX-Code
            <param name="history-size">100</param>
\end_layout

\begin_layout LyX-Code
      </init-params>
\end_layout

\begin_layout LyX-Code
   <output-structure>
\end_layout

\begin_layout LyX-Code
     <field name="DATA" type="binary:image/jpeg"/> 
\end_layout

\begin_layout LyX-Code
   </output-structure>
\end_layout

\begin_layout LyX-Code
 </processing-class>
\end_layout

\begin_layout LyX-Code
 <description>My chart virtual sensor<description>
\end_layout

\begin_layout LyX-Code
 <life-cycle pool-size="10"/>
\end_layout

\begin_layout LyX-Code
 <addressing>
\end_layout

\begin_layout LyX-Code
   <predicate key="geographical">BC building EPFL</predicat>
\end_layout

\begin_layout LyX-Code
 </addressing>
\end_layout

\begin_layout LyX-Code
 <storage history-size="1" />
\end_layout

\begin_layout LyX-Code
 <streams>
\end_layout

\begin_layout LyX-Code
    <stream name="DATA" rate="100">
\end_layout

\begin_layout LyX-Code
      <source alias="source1" storage-size="1 sampling-rate="1">
\end_layout

\begin_layout LyX-Code
            <address wrapper="remote">
\end_layout

\begin_layout LyX-Code
               <predicate key="HOST">
\end_layout

\begin_layout LyX-Code
                  localhost
\end_layout

\begin_layout LyX-Code
               </predicate>
\end_layout

\begin_layout LyX-Code
               <predicate key="PORT">
\end_layout

\begin_layout LyX-Code
                  22001
\end_layout

\begin_layout LyX-Code
               </predicate>
\end_layout

\begin_layout LyX-Code
               <predicate key="NAME">
\end_layout

\begin_layout LyX-Code
                  MemoryMonitorVS
\end_layout

\begin_layout LyX-Code
               </predicate>
\end_layout

\begin_layout LyX-Code
            </address>
\end_layout

\begin_layout LyX-Code
            <query>
\end_layout

\begin_layout LyX-Code
              select HEAP,NON_HEAP,
\end_layout

\begin_layout LyX-Code
              PENDING_FINALIZATION_COUNT,TIMED
\end_layout

\begin_layout LyX-Code
              from wrapper
\end_layout

\begin_layout LyX-Code
            </query>
\end_layout

\begin_layout LyX-Code
         </source>
\end_layout

\begin_layout LyX-Code
         <query>
\end_layout

\begin_layout LyX-Code
          select * from source1
\end_layout

\begin_layout LyX-Code
         </query>
\end_layout

\begin_layout LyX-Code
       </stream>
\end_layout

\begin_layout LyX-Code
   </streams>
\end_layout

\begin_layout LyX-Code
</virtual-sensor>
\end_layout

\begin_layout Standard
Let us analyze this long file piece by piece.
 The first part defines which class to use and configures it:
\end_layout

\begin_layout LyX-Code
<processing-class>
\end_layout

\begin_layout LyX-Code
    <class-name>gsn.vsensor.ChartVirtualSensor</class-name>
\end_layout

\begin_layout LyX-Code
    <init-params>
\end_layout

\begin_layout LyX-Code
         <param name="input-Stream">DATA</param>
\end_layout

\begin_layout LyX-Code
         <param name="title">GSN Memory Usage</param>
\end_layout

\begin_layout LyX-Code
         <param name="type">ANY</param>
\end_layout

\begin_layout LyX-Code
         <param name="height">200</param>
\end_layout

\begin_layout LyX-Code
         <param name="width">300</param>
\end_layout

\begin_layout LyX-Code
         <param name="vertical-axis">Sensor Readings</param>
\end_layout

\begin_layout LyX-Code
         <param name="history-size">100</param>
\end_layout

\begin_layout LyX-Code
      </init-params>
\end_layout

\begin_layout LyX-Code
    <output-structure>
\end_layout

\begin_layout LyX-Code
      <field name="DATA" type="binary:image/jpeg"/> 
\end_layout

\begin_layout LyX-Code
    </output-structure>
\end_layout

\begin_layout LyX-Code
 </processing-class>
\end_layout

\begin_layout Standard
This virtual sensor generates graphs from the data it receives.
 We see here that the graph has a name, 
\begin_inset Quotes eld
\end_inset

GSN Memory Usage
\begin_inset Quotes erd
\end_inset

, that its size is 200*300 pixels, that the vertical axis shows the data
 readings and that the history-size is set to 100.
 This means that only the latest 100 received values will be plotted.
 The output-structure describes the data type produced by the virtual sensor.
 It defines a name and a type.
 Please consult the documentation of the virtual sensor that you want to
 use for more information.
 In this case the ChartVirtualSensor produces a its plots under the name
 
\begin_inset Quotes eld
\end_inset

DATA
\begin_inset Quotes erd
\end_inset

 which is a jpeg image hence type="binary:image/jpeg".
\end_layout

\begin_layout LyX-Code
<description>My chart virtual sensor</description>
\end_layout

\begin_layout LyX-Code
<life-cycle pool-size="2"/>
\end_layout

\begin_layout LyX-Code
<addressing>
\end_layout

\begin_layout LyX-Code
   <predicate key="geographical">...</predicate>
\end_layout

\begin_layout LyX-Code
</addressing>
\end_layout

\begin_layout Standard
The description field is shown to the user through the web interface, and
 you can also use it to help you remember what this specific configuration
 does.
\end_layout

\begin_layout Standard
The 
\family typewriter
life-cycle pool-size
\family default
 option is a performance parameter.
 It is usually safe to keep the default value.
 It defines the maximum number of instances of this virtual sensor (with
 this configuration).
 This can happen when the processing method of the virtual sensor takes
 a long time to complete, and / or when data arrives at high speed.
 If all instances are busy, then the data will be dropped.
\end_layout

\begin_layout Standard
The 
\family typewriter
addressing
\family default
 section is used to describe the location of the sensor (physical and logical
 address).
 This can be used to annotate a virtual sensor.
 In GSN we have two special addressing keys, latitude and longitude, which
 are used by GSN's web interface to visualize the phyiscal location of the
 virtual sensor on the google map interface.
 You can use them like below : 
\end_layout

\begin_layout Standard
<addressing>
\end_layout

\begin_layout Standard
<predicate key="type">mica sensor temperature light</predicate>
\end_layout

\begin_layout Standard
<predicate key="LATITUDE">37.4</predicate>
\end_layout

\begin_layout Standard
<predicate key="LONGITUDE">-122.1</predicate>
\end_layout

\begin_layout Standard
</addressing> 
\end_layout

\begin_layout Standard
Note that the addressing part is optional and can be omitted.
\end_layout

\begin_layout LyX-Code
<storage history-size="1" />
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard

\family typewriter
storage
\family default
's
\family typewriter
 history-size
\family default
\emph on
 
\emph default
defines the number of streamElements produced by this virtual sensor that
 we want to store in the database.
 It does not impact the logical processing of data streams.
 If the history-size is not provided, GSN stores all the sensor data in
 the specified database (the gsn.xml file).
 Note that, if you use in memory database you must put upper limit on the
 history size otherwise the Java virtual machine will run out of memory
 at some point.
\end_layout

\begin_layout LyX-Code
<streams>
\end_layout

\begin_layout LyX-Code
<stream name="DATA" rate="100">
\end_layout

\begin_layout LyX-Code
<source alias="source1" storage-size="1" sampling-rate="1">
\end_layout

\begin_layout LyX-Code
<address wrapper="local">
\end_layout

\begin_layout LyX-Code
<predicate key="HOST">localhost</predicate>
\end_layout

\begin_layout LyX-Code
<predicate key="PORT">22001</predicate>
\end_layout

\begin_layout LyX-Code
<predicate key="NAME">MemoryMonitorVS</predicate>
\end_layout

\begin_layout LyX-Code
</address>
\end_layout

\begin_layout LyX-Code
<query>
\end_layout

\begin_layout LyX-Code
  select HEAP,NON_HEAP,
\end_layout

\begin_layout LyX-Code
    PENDING_FINALIZATION_COUNT,TIMED
\end_layout

\begin_layout LyX-Code
  from wrapper
\end_layout

\begin_layout LyX-Code
</query>
\end_layout

\begin_layout LyX-Code
</source>
\end_layout

\begin_layout LyX-Code
<query>select * from source1</query>
\end_layout

\begin_layout LyX-Code
</stream>
\end_layout

\begin_layout LyX-Code
</streams>
\end_layout

\begin_layout Standard
The streams section is very important.
 It tells GSN what data it should send to the virtual sensor you are using
 (how to feed the virtual sensor).
 A virtual sensor can receive data from one or more streams.
 In this case there is only one stream, that we name 
\family typewriter
DATA
\family default
.
 The 
\family typewriter
rate
\family default
\emph on
 
\emph default
parameter is a performance tuning parameter.
 It defines the minimum interval in milliseconds between two calls to this
 virtual sensor.
 If there is data available for the virtual sensor in less than this value,
 then the data is silently dropped hence it is better to remove it when
 debuging.
\end_layout

\begin_layout Standard
This xml structure allows to perform 
\family typewriter
JOIN
\family default
 SQL operations on the incoming data streams, if more than one source is
 defined.
\end_layout

\begin_layout Standard
Here there is only one source, and we select everything from it in 
\family typewriter
select * from source1
\family default
.
 Our source gets its data from the 
\family typewriter
remote
\family default
 wrapper.
 This wrapper is used to get data from another virtual sensor.
 This other virtual sensor can be running in the local GSN instance or on
 a remote GSN server, hence the wrapper name.
 In this case we use the local wrapper which points to the local GSN instance.
 This wrapper gets one mandatory parameter : Name which is the name of the
 virtual sensor on the local box.
 We could also use the remote wrapper to do the same job (but less efficiently).
 For using the remote wrapper we need to provide three mandatory parameters:
 
\family typewriter
HOST
\family default
 and 
\family typewriter
PORT
\family default
 tells how to contact the GSN instance and 
\family typewriter
NAME
\family default
 specifies the virtual sensor from which we want to receive data from.
 The query specified after the addressing section is sent to the remote
 GSN server.
 Here we select some fields that are produced by the virtual sensor.
\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand \index{Bridge Virtual Sensor}

\end_inset

Bridge Virtual Sensor
\begin_inset LatexCommand \label{sub:BridgeVirtualSensor}

\end_inset


\end_layout

\begin_layout Standard
This virtual sensor immediately publishes any data that it receives without
 modifying it.
 The StreamElement object is not modified.
\end_layout

\begin_layout Standard
It does not take any parameter.
 Its main use is to filter and join sensor data with SQL without any other
 kind of post processing operation on the data.
 For using this wrapper the output structure of the virutal sensor must
 match strictly with the structure of the query.
 
\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand \index{Chart Virtual Sensor}

\end_inset

Chart Virtual Sensor
\begin_inset LatexCommand \label{ChartVirtualSensor}

\end_inset


\end_layout

\begin_layout Standard
This virtual sensor generates graphs from the data it receives.
 This is a complex VS because it can be computationally intensive, especially
 if it is frequently called.
 This virtual sensor using the JFreeChart library to plot the data.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways true
status open

\begin_layout Caption
Parameters for Plotter VS
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="15line%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="30line%">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
input-stream
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The name of the stream to plot.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
title
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The graph title.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
vertical-axis
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A legend for the vertical axis.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Graph width in pixels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
640
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
height
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Graph height in pixels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
480
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Stream Exporter
\begin_inset LatexCommand \index{Stream Exporter}

\end_inset


\begin_inset LatexCommand \label{sub:Stream-Exporter}

\end_inset


\end_layout

\begin_layout Standard
This virtual sensor exports the data it receives to the database of your
 choice.
 This can be interesting when debugging your GSN configuration or to easily
 back up critical data on an independent machine.
 It can also be used to log unexpected events for later off-line, manual
 analysis.
 It can receive any number of input streams.
 Each one will be saved into a separate table named after the input stream.
\end_layout

\begin_layout Standard
It requires a JDBC URL and a user name and password so that it knows where
 is the database server and how to authenticate.
 This virtual sensor inserts the data into the specified table.
 If the table doesn't exist, GSN first create ths table and if the table
 exists, GSN first verifies the structure of the table with the structure
 of the produced stream elements.
 If the structure matches, GSN starts inserting data into the table otherwise
 it stops with an error message to inform the user about the uncompatible
 strucutres.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways true
status open

\begin_layout Caption
Parameters for Stream Exporter
\end_layout

\begin_layout Standard

\hfill

\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="12line%">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="25line%">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
url
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A JDBC url that specifies how to connect to the database server.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
user
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The user name for authentication with database server.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The password for authentication with database server.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
table
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The name of the table into which GSN will store the sensor data.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Section
Data publishing
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{Web}

\end_inset

Web Interface
\end_layout

\begin_layout Standard
GSN ships with an elegant and easy to use web interface.
 The only thing you have to do is to open a web browser and go the following
 address: 
\begin_inset LatexCommand \htmlurl{http://127.0.0.1:22001}

\end_inset

 .
\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand \index{GoogleMaps}

\end_inset

GoogleMaps integration
\end_layout

\begin_layout Standard
GSN can associate your data with GPS positions and then display these on
 a world map retrieved from Google's GoogleMaps service.
 You need a special identification key from Google.
 For more information, please refer to the documentation file 
\family typewriter
doc/README.txt
\family default
, section 
\begin_inset Quotes eld
\end_inset


\emph on
How to use GoogleMaps with GSN
\emph default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{Email notifications}

\end_inset

Email notifications
\end_layout

\begin_layout Standard
In order to use email or SMS
\begin_inset LatexCommand \index{SMS}

\end_inset

 (Short Messaging System, text messages for GSM phones) notifications, you
 need to download two third-parties libraries that we are not allowed to
 distribute.
 
\end_layout

\begin_layout Standard
The first one is the 
\emph on
JavaBeans Activation Framework
\emph default

\begin_inset LatexCommand \index{JavaBeans Activation Framework}

\end_inset

 (JAF), which you can find at 
\begin_inset LatexCommand \url{http://java.sun.com/products/javabeans/jaf/index.jsp}

\end_inset

.
 After downloading it, you have to copy the file 
\family typewriter
activation.jar 
\family default
in the 
\family typewriter
lib
\family default
 directory.
\end_layout

\begin_layout Standard
The second one is 
\emph on
JavaMail
\emph default

\begin_inset LatexCommand \index{JavaMail}

\end_inset

.
 This can be found at 
\begin_inset LatexCommand \url{http://java.sun.com/products/javamail/downloads/index.html}

\end_inset

.
 All included JAR files should be copied in the same 
\family typewriter
lib
\family default
 directory.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \index{SMS notifications}

\end_inset

SMS notifications
\end_layout

\begin_layout Part
\begin_inset LatexCommand \index{Developer}

\end_inset

Developer's Guide
\end_layout

\begin_layout Chapter
Writing a Virtual Sensor
\begin_inset LatexCommand \label{cha:Writing-a-VS}

\end_inset


\end_layout

\begin_layout Section
The AbstractVirtualSensor
\begin_inset LatexCommand \index{AbstractVirtualSensor}

\end_inset

 class
\end_layout

\begin_layout Standard
All virtual sensors subclass 
\family typewriter
AbstractVirtualSensor
\family default
 (package 
\family typewriter
gsn.vsensor
\family default
).
 It requires its subclasses to implement the following three methods:
\end_layout

\begin_layout Itemize

\family typewriter
public boolean initialize()
\end_layout

\begin_layout Itemize

\family typewriter
public void dataAvailable(String inputStreamName, StreamElement se)
\end_layout

\begin_layout Itemize

\family typewriter
public void finalize()
\end_layout

\begin_layout Standard

\family typewriter
initialize()
\family default
 is the first method to be called after object creation.
 It should configure the virtual sensor according to its parameters, if
 any, and return 
\family typewriter
true
\family default
 in case of success, 
\family typewriter
false
\family default
 if otherwise.
 If this method returns false, GSN will generate an error message in the
 logs and stops using the virtual sensor.
\end_layout

\begin_layout Standard

\family typewriter
finalize() 
\family default
is called when GSN destroys the virtual sensor.
 It should release all system resources in use by this virtual sensor.
 This method is typically called when we want to shutdown the GSN instance.
\end_layout

\begin_layout Standard

\family typewriter
dataAvailable 
\family default
is called each time that GSN has data for this virtual sensor, according
 to its configuration.
 If the virtual sensor produces data, it should encapsulate this data in
 a 
\family typewriter
StreamElement
\family default
 object and deliver it to GSN by calling 
\family typewriter
dataProduced(StreamElement se)
\family default
.
\end_layout

\begin_layout Standard
Note that a Virtual Sensor should always use the same StreamElement structure
 for producing its data.
 Changing the structure type is not allowed and trying to do so will result
 in an error.
 However, a virtual sensor can be configured at initialization time what
 kind of StreamElement it will produce.
 This allows to produce different types of StreamElement by the same VS
 depending on its usage.
 But one instance of the VS will still be limited to produce the same structure
 type.
 If a virtual sensor really needs to produce several different stream elements,
 user must provide the set of all possibily fields in the stream elements
 and provide Null whenever the data item is not applicable.
\end_layout

\begin_layout Section
The 
\begin_inset LatexCommand \index{StreamElement}

\end_inset

StreamElement class
\end_layout

\begin_layout Standard
A StreamElement is a GSN class that encapsulates data.
 It has a data types structure (a DataField array), a data values structure
 (a Serializable array) and a timestamp.
\end_layout

\begin_layout Section
Writing your own graphical user interface
\begin_inset LatexCommand \index{graphical user interface}

\end_inset


\end_layout

\begin_layout Standard
A virtual sensor is not limited to raw data processing.
 You can call any other Java library, including Swing classes.
 An introduction to GUI programming is outside the scope of this document.
 You can have a look at the HCIProtocolGUIVS class to see how such an interface
 can be implemented.
\end_layout

\begin_layout Standard
A simple way to go is to create the graphical components (like a JFrame)
 in the 
\family typewriter
initialize()
\family default
 method and at the same time define the events logic (
\family typewriter
eventListeners
\family default
...).
 In the 
\family typewriter
dataAvailable()
\family default
 method, received data can be sent to graphical components to present the
 information to the user.
 Beware that there may be concurrency problems since your GUI is running
 with the Swing event thread while your virtual sensor is run by a GSN thread.
\end_layout

\begin_layout Chapter
Writing a Wrapper
\begin_inset LatexCommand \label{cha:Writing-a-Wrapper}

\end_inset


\end_layout

\begin_layout Section
A quick how-to
\end_layout

\begin_layout Standard
All wrappers subclass 
\family typewriter
gsn.wrapper.AbstractWrapper.
 
\family default
Subclasses must implement four methods:
\end_layout

\begin_layout Enumerate

\family typewriter
boolean initialize()
\end_layout

\begin_layout Enumerate

\family typewriter
void finalize()
\end_layout

\begin_layout Enumerate

\family typewriter
String getWrapperName()
\end_layout

\begin_layout Enumerate

\family typewriter
DataField[] getOutputFormat()
\end_layout

\begin_layout Standard
In addition, you will always have to override the 
\family typewriter
run() 
\family default
method, which does the 
\begin_inset Quotes eld
\end_inset

real job
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Optionally, you may wish to override the following one:
\end_layout

\begin_layout Itemize

\family typewriter
boolean sendToWrapper(String action, String[] paramNames, Object[] paramValues)
 
\end_layout

\begin_layout Subsection
initialize()
\end_layout

\begin_layout Standard
This method is called after the wrapper object creation.
 For more information on the life cycle of a wrapper, see section 
\begin_inset LatexCommand \vref{sub:wrapper-life-cycle}

\end_inset

.
 The complete method prototype is 
\family typewriter
public boolean initialize()
\family default
.
\end_layout

\begin_layout Standard
In this method, the wrapper should try to initialize its connection to the
 actual data producing/receiving device(s) (e.g., wireless sensor networks
 or cameras).
 The wrapper should return 
\family typewriter
true
\family default
 if it can successfully initialize the connection, 
\family typewriter
false
\family default
 otherwise.
\end_layout

\begin_layout Standard
GSN provides access to the wrapper parameters through the
\end_layout

\begin_layout Standard

\family typewriter
getActiveAddressBean().getPredicateValue(
\begin_inset Quotes eld
\end_inset

parameter-name
\begin_inset Quotes erd
\end_inset

)
\family default
 
\end_layout

\begin_layout Standard
method call.
\end_layout

\begin_layout Standard
For example, if you have the following fragment in the virtual sensor configurat
ion file:
\end_layout

\begin_layout LyX-Code
<stream-source ...
 > 
\end_layout

\begin_layout LyX-Code
  <address wrapper="x">
\end_layout

\begin_layout LyX-Code
    <predicate key="range">100</predicate>
\end_layout

\begin_layout LyX-Code
    <predicate key="log">0</predicate>
\end_layout

\begin_layout LyX-Code
  </address> 
\end_layout

\begin_layout Standard
You can access the initialization parameter named 
\emph on
x
\emph default
 with the following code :
\end_layout

\begin_layout LyX-Code
if(getActiveAddressBean().getPredicateValue("x") != null)
\end_layout

\begin_layout LyX-Code
  {...} 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
finalize()
\end_layout

\begin_layout Standard
In the 
\family typewriter
public void finalize()
\family default
 method, you should release all the resources you acquired during the initializa
tion procedure or during the life cycle of the wrapper.
 Note that this is the last chance for the wrapper to release all its reserved
 resources and after this call the wrapper instance virtually won't exist
 anymore.
 
\end_layout

\begin_layout Standard
For example, if you open a file in the initialization phase, you should
 close it in the finalization phase.
\end_layout

\begin_layout Subsection
getWrapperName()
\end_layout

\begin_layout Standard

\family typewriter
public String getWrapperName()
\family default
 returns a name for the wrapper.
\end_layout

\begin_layout Subsection
getOutputFormat()
\end_layout

\begin_layout Standard

\family typewriter
public abstract DataField[] getOutputFormat()
\family default
 returns a description of the data structure produced by this wrapper.
\end_layout

\begin_layout Standard
This description is an array of 
\family typewriter
DataField
\family default
 objects.
 A 
\family typewriter
DataField
\family default
 object can be created with a call to the constructor 
\family typewriter
public
\family default
 
\family typewriter
DataField(String name, String type, String Description)
\family default
.
 The name is the field name, the type is one of GSN data types (
\family typewriter
TINYINT, SMALLINT, INTEGER, BIGINT, CHAR(#), BINARY[(#)], VARCHAR(#), DOUBLE,
 TIME
\family default
.
 See 
\family typewriter
gsn.beans.DataTypes
\family default
) and 
\family typewriter
Description
\family default
 is a text describing the field.
\end_layout

\begin_layout Standard
The following examples should help you get started.
\end_layout

\begin_layout Subsubsection
Wireless Sensor Network Example
\end_layout

\begin_layout Standard
Assuming that you have a wrapper for a wireless sensor network which produces
 the average temperature and light value of the nodes in the network, you
 can implement 
\family typewriter
getOutputFormat()
\family default
 like below :
\end_layout

\begin_layout LyX-Code
public DataField[] getOutputFormat() {
\end_layout

\begin_layout LyX-Code
  DataField[] outputFormat = new DataField[2];
\end_layout

\begin_layout LyX-Code
  outputFormat[0] = new DataField("Temperature", "double", 
\end_layout

\begin_layout LyX-Code
      "Average of temperature readings from the sensor network"); 
\end_layout

\begin_layout LyX-Code
  outputFormat[1] = new DataField("light", "double", 
\end_layout

\begin_layout LyX-Code
      "Average of light readings from the sensor network");
\end_layout

\begin_layout LyX-Code
  return outputFormat; 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsubsection
Webcam Example
\end_layout

\begin_layout Standard
if you have a wrapper producing jpeg images as output (e.g., from wireless
 camera), the method is similar to below :
\end_layout

\begin_layout LyX-Code
public DataField[] getOutputFormat() {
\end_layout

\begin_layout LyX-Code
  DataField[] outputFormat = new DataField[1];
\end_layout

\begin_layout LyX-Code
  outputFormat[0] = new DataField("Picture", "binary:jpeg",
\end_layout

\begin_layout LyX-Code
      "Picture from the Camera at room BC143"); 
\end_layout

\begin_layout LyX-Code
  return outputFormat; 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsection
run()
\end_layout

\begin_layout Standard
Implementation of the 
\family typewriter
run()
\family default
 method: as described before, the wrapper acts as a bridge between the actual
 hardware device(s) and GSN, thus in order for the wrapper to produce data,
 it should keep track of the newly produced data items.
 This method is responsible for forwarding (and possibly filtering or aggregatin
g) the newly received data from the hardware to the GSN engine.
\end_layout

\begin_layout Standard
You should not try to start the thread by yourself: GSN takes care of this.
\end_layout

\begin_layout Standard
The method should be implemented like below :
\end_layout

\begin_layout LyX-Code
try { 
\end_layout

\begin_layout LyX-Code
//The delay needed for the GSN container to initialize itself.
 
\end_layout

\begin_layout LyX-Code
//Removing this line might cause hard to find random exceptions 
\end_layout

\begin_layout LyX-Code
Thread.sleep (2000); 
\end_layout

\begin_layout LyX-Code
} catch (InterruptedException e1) { 
\end_layout

\begin_layout LyX-Code
  e1.printStackTrace(); 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
while(isActive()) { 
\end_layout

\begin_layout LyX-Code
  if(listeners.isEmpty())
\end_layout

\begin_layout LyX-Code
   continue;
\end_layout

\begin_layout LyX-Code
  if (isLatestReceivedDataProcessed == false) { 
\end_layout

\begin_layout LyX-Code
    //Application dependent processing ...
 
\end_layout

\begin_layout LyX-Code
    StreamElement streamElement = new StreamElement ( ...); 
\end_layout

\begin_layout LyX-Code
    isLatestReceivedDataProcessed = true; 
\end_layout

\begin_layout LyX-Code
    publishData ( streamElement ); 
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsubsection
Webcam example
\end_layout

\begin_layout Standard
Assume that we have a wireless camera which runs a HTTP server and provides
 pictures whenever it receives a 
\family typewriter
GET
\family default
 request.
 In this case we are in a data on demand scenario (most of the network cameras
 are like this).
 To get the data at the rate of 1 picture every 5 seconds we can do the
 following :
\end_layout

\begin_layout LyX-Code
while(isActive()) { 
\end_layout

\begin_layout LyX-Code
  byte[] received_image = null;
\end_layout

\begin_layout LyX-Code
  if(listeners.isEmpty())
\end_layout

\begin_layout LyX-Code
    continue;
\end_layout

\begin_layout LyX-Code
  received_image= getPictureFromCamera();
\end_layout

\begin_layout LyX-Code
  StreamElement streamElement = new StreamElement(
\end_layout

\begin_layout LyX-Code
     new String[] { "PIC" }, 
\end_layout

\begin_layout LyX-Code
     new Integer [] { Types.BINARY },
\end_layout

\begin_layout LyX-Code
     new Serializable[] {received_image}, 
\end_layout

\begin_layout LyX-Code
     System.currentTimeMillis ())
\end_layout

\begin_layout LyX-Code
  );
\end_layout

\begin_layout LyX-Code
  publishData(streamElement);
\end_layout

\begin_layout LyX-Code
  Thread.sleep(5*1000); // Sleeping 5 seconds 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsubsection
Data driven systems 
\end_layout

\begin_layout Standard
Compared to the previous example, we do sometimes deal with devices that
 are data driven.
 This means that we don't have control neither on when the data produced
 by them (e.g., when they do the capturing) nor what is the rate of the data
 received from them.
\end_layout

\begin_layout Standard
For example, having an alarm system, we don't know when nor when we are
 going to receive a packet, neither how frequent the alarm system will send
 data packets to GSN.
 These kind of systems are typically implemented using a callback interface.
 In the callback interface, one needs to set a flag indicating the data
 reception state of the wrapper and control that flag in the 
\family typewriter
run
\family default
 method to process the received data.
 
\end_layout

\begin_layout Subsection
sendToWrapper()
\end_layout

\begin_layout Standard
Most devices, in addition to producing data, can also be controlled.
 You can override the method
\end_layout

\begin_layout Standard

\family typewriter
public boolean sendToWrapper(String action, String[] paramNames, Object[]
 paramValues) throws OperationNotSupportedException
\family default
 
\end_layout

\begin_layout Standard
if you want to offer this possibility to the users of your wrapper.
\end_layout

\begin_layout Standard
You can consult the 
\family typewriter
gsn.wrappers.general.SerialWrapper
\family default
 class for an example.
\end_layout

\begin_layout Section
A detailed description of the AbstractWrapper class
\end_layout

\begin_layout Standard
In GSN, a wrapper is piece of Java code which acts as a bridge between the
 actual data producing/receiving device (e.g., sensor network, RFID reader,
 webcam...) and the GSN platform.
 A GSN wrapper should extend the 
\family typewriter
gsn.\SpecialChar \textcompwordmark{}
wrapper.\SpecialChar \textcompwordmark{}
AbstractWrapper
\family default
 class.
 This class provides the following methods and data fields:
\end_layout

\begin_layout LyX-Code
public static final String TIME_FIELD = "TIMED";
\end_layout

\begin_layout LyX-Code
public AddressBean getActiveAddressBean();
\end_layout

\begin_layout LyX-Code
public int getListenersSize(); 
\end_layout

\begin_layout LyX-Code
public ArrayList<DataListener> getListeners(); 
\end_layout

\begin_layout LyX-Code
public CharSequence addListener(DataListener dataListener);
\end_layout

\begin_layout LyX-Code
public void removeListener(DataListener dataListener);
\end_layout

\begin_layout LyX-Code
public int getDBAlias();
\end_layout

\begin_layout LyX-Code
public boolean sendToWrapper(String action, 
\end_layout

\begin_layout LyX-Code
  String[] paramNames, Object[] paramValues) 
\end_layout

\begin_layout LyX-Code
    throws OperationNotSupportedException;
\end_layout

\begin_layout LyX-Code
// Abstract methods
\end_layout

\begin_layout LyX-Code
public abstract boolean initialize();
\end_layout

\begin_layout LyX-Code
pulic abstract void finalize();
\end_layout

\begin_layout LyX-Code
public abstract String getWrapperName();
\end_layout

\begin_layout LyX-Code
public abstract DataField[] getOutputFormat();
\end_layout

\begin_layout Standard
In GSN, the wrappers can not only receive data from a source, but also send
 data to it.
 Thus wrappers are actually two-way bridges between GSN and the data source.
 In the wrapper interface, the method sendToWrapper is called whenever there
 is a data item which should be send to the source.
 A data item could be as simple as a command for turning on a sensor inside
 the sensor network, or it could be as complex as a complete routing table
 which should be used for routing the packets in the sensor network.
 The full syntax of the sendToWrapper is depicted below.
\end_layout

\begin_layout LyX-Code
public boolean sendToWrapper(String action, 
\end_layout

\begin_layout LyX-Code
    String[] paramNames, Object[] paramValues) 
\end_layout

\begin_layout LyX-Code
    throws OperationNotSupportedException;
\end_layout

\begin_layout Standard
The default implementation of the afore-mentioned method throws 
\family typewriter
Operation\SpecialChar \textcompwordmark{}
Not\SpecialChar \textcompwordmark{}
Supported\SpecialChar \textcompwordmark{}
Exception
\family default
 exception because the wrapper doesn't support this operation.
 This design choice is justified by the observation that not all kind of
 devices (sensors) can accept data from a computer.
 For instance, a typical wireless camera doesn't accept commands from the
 wrapper.
 If the sensing device supports this operation, one needs to override this
 method so that instead of the default action (throwing exception), the
 wrapper sends the data to the sensor network.
\end_layout

\begin_layout Section
The life cycle of a wrapper
\begin_inset LatexCommand \label{sub:wrapper-life-cycle}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Caption
The life cycle of a wrapper.
\begin_inset LatexCommand \label{fig:wrapper-lifecycle}

\end_inset


\end_layout

\begin_layout Standard

\hfill

\begin_inset Graphics
	filename figures/wrapper-lifecycle.png
	lyxscale 30
	width 100page%
	rotateAngle 90

\end_inset


\hfill

\end_layout

\end_inset


\end_layout

\begin_layout Standard
An instance of a wrapper is created whenever a 
\emph on
Wrapper Connection Request 
\emph default
(WCR) is received by the 
\emph on
Wrappers Repository 
\emph default
(WR).
 The WCRs are generated whenever GSN wants to activate a new virtual sensor.
 A WCR is generated for each stream source in the virtual sensor.
\end_layout

\begin_layout Standard
A Wrapper Connection Request is an object which contains a wrapper name
 and its initialization parameters as defined in the Virtual Sensor Configuratio
n file (VSC).
 Therefore, two WCRs are identicals if their wrapper name and initialization
 parameters are the same.
 The Wrappers Repository in a GSN instance is a repository of the active
 wrapper instances indexed by their WCRs.
 
\end_layout

\begin_layout Standard
Whenever a WCR is generated at the virtual sensor loader, it will be sent
 to the WR which does the following steps (as illustrated on Figure 
\begin_inset LatexCommand \vref{fig:wrapper-lifecycle}

\end_inset

): 
\end_layout

\begin_layout Enumerate
Look for a wrapper instance in the repository which has the identical WCR.
 If found, WR registers the stream-source query with the wrapper and returns
 
\family typewriter
true
\family default
.
\end_layout

\begin_layout Enumerate
If there is no such WCR in the repository, the WR instantiates the appropriate
 wrapper object and calls its 
\family typewriter
initialize
\family default
 method.
 If the 
\family typewriter
initialize
\family default
 method returns 
\family typewriter
true
\family default
, WR will add the wrapper instance to the WR.
 Back to Step 1.
\end_layout

\begin_layout Enumerate
If there is no WCR in the repository and the WR can not initialize the new
 wrapper using the specified initialization parameters and GSN context (e.g.,
 the 
\family typewriter
initialize
\family default
 method returns 
\family typewriter
false
\family default
), WR returns 
\family typewriter
false
\family default
 to the virtual sensor loader.
 When the virtual sensor loader receives 
\family typewriter
false
\family default
, it tries the next wrapper (if there is any) .
 The virtual sensor loader fails to load a virtual sensor if at least one
 of the stream sources required by an input stream fails.
\end_layout

\begin_layout Standard
The two main reasons behind using the wrappers repository are: 
\end_layout

\begin_layout Itemize
Sharing the processing power by performing query merging.
\end_layout

\begin_layout Itemize
Reducing the storage when several stream sources use the same wrappers.
\end_layout

\begin_layout Standard
The Wrapper Disconnect Request (WDR) is generated at the 
\family typewriter
virtual-\SpecialChar \textcompwordmark{}
sensor-\SpecialChar \textcompwordmark{}
loader
\family default
 whenever GSN wants to release resources used by a virtual sensor.
 Typically, when the user removes a virtual sensor configuration while GSN
 is running, the virtual-sensor-loader generates a WDR for each stream source
 that was previously used by this virtual sensor.
 
\end_layout

\begin_layout Standard
When WR receives a WDR request, it de-registers the stream-source query
 from the wrapper.
 If after removing the stream source query from the wrapper, there are no
 queries registered with this wrapper (e.g., no other stream source is using
 the considered wrapper), WR calls the 
\family typewriter
finalize
\family default
 method of the wrapper instance so that all its allocated resources will
 be released.
\end_layout

\begin_layout Section
Questions and Answers
\end_layout

\begin_layout Subsection
When is the sendToWrapper method called ? 
\end_layout

\begin_layout Standard
The sendToWrapper method can be only called from a virtual sensor which
 uses this wrapper.
 The code in the virtual sensor's class will be something like below:
\end_layout

\begin_layout LyX-Code
virtualSensorConfiguration.getInputStream(INPUT_STREAM_NAME).
\end_layout

\begin_layout LyX-Code
  getSource(STREAM_SOURCE_ALIAS_NAME).
\end_layout

\begin_layout LyX-Code
  getActiveSourceProducer().
\end_layout

\begin_layout LyX-Code
  sendToWrapper(mydata);
\end_layout

\begin_layout Standard
So a virtual sensor can send data to the wrapper and the wrapper will forward
 it (if the 
\family typewriter
sendToWrapper
\family default
 method is implemented) to the actual data source.
\end_layout

\begin_layout Subsection
How does a virtual sensor decide when to send data to the wrapper ? 
\end_layout

\begin_layout Standard
A virtual sensor will typically decide using the following factors : 
\end_layout

\begin_layout Enumerate
Based on its internal state, which depends on received data.
\end_layout

\begin_layout Enumerate
After an interaction initiated by a user/agent/gsn-instance with the web
 interface; HTTP (e.g., implementing the 
\family typewriter
dataFromWeb
\family default
 method in the virtual sensor, or when another virtual sensor sends data
 to this sensor server).
\end_layout

\begin_layout Chapter
Writing a Protocol Description
\end_layout

\begin_layout Standard
In many cases, your data sources will emit structured data that respect
 a predefined format.
 Such a format is called a protocol.
 It is of course possible to do the data extraction from the received data
 packets with your own code.
 However, when these protocols are complex, the task is not that easy and
 it can consume a lot of time.
\end_layout

\begin_layout Standard
This is why GSN ships with the jnetstream packet decoding library.
 To use it with your protocol, you only need to describe your packets structure
 in a C-like syntax.
 You will be able to update the protocol definition without recompiling
 the parser.
 For more information, please consult 
\begin_inset LatexCommand \htmlurl{http://jnetstream.sourceforge.net}

\end_inset

.
\end_layout

\begin_layout Standard
It is also possible to build such packets using jnetstream.
 This feature is currently in development.
 This allows to communicate with your data source.
\end_layout

\begin_layout Chapter
Inter-GSN communications
\end_layout

\begin_layout Standard
A virtual sensor can get data from another virtual sensor.
 If this other virtual sensor is running on another GSN server, the communicatio
n between these two servers is made with the XML-RPC protocol.
\end_layout

\begin_layout Standard
This means that you can actually feed data to GSN from your own custom software
 written in any language supporting XML-RPC.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset LatexCommand \printindex{}

\end_inset


\end_layout

\end_body
\end_document
