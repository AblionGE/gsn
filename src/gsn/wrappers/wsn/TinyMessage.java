package gsn.wrappers.wsn;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE. This
 * class implements a Java interface to the 'TinyMessage' message type.
 */

public class TinyMessage extends net.tinyos.message.Message {
   
   /** The default size of this message type in bytes. */
   public static final int DEFAULT_MESSAGE_SIZE = 23;
   
   /** The Active Message type associated with this message. */
   public static final int AM_TYPE              = 27;
   
   /** Create a new TinyMessage of size 23. */
   public TinyMessage ( ) {
      super( DEFAULT_MESSAGE_SIZE );
      amTypeSet( AM_TYPE );
   }
   
   /** Create a new TinyMessage of the given data_length. */
   public TinyMessage ( int data_length ) {
      super( data_length );
      amTypeSet( AM_TYPE );
   }
   
   /**
    * Create a new TinyMessage with the given data_length and base offset.
    */
   public TinyMessage ( int data_length , int base_offset ) {
      super( data_length , base_offset );
      amTypeSet( AM_TYPE );
   }
   
   /**
    * Create a new TinyMessage using the given byte array as backing store.
    */
   public TinyMessage ( byte [ ] data ) {
      super( data );
      amTypeSet( AM_TYPE );
   }
   
   /**
    * Create a new TinyMessage using the given byte array as backing store, with
    * the given base offset.
    */
   public TinyMessage ( byte [ ] data , int base_offset ) {
      super( data , base_offset );
      amTypeSet( AM_TYPE );
   }
   
   /**
    * Create a new TinyMessage using the given byte array as backing store, with
    * the given base offset and data length.
    */
   public TinyMessage ( byte [ ] data , int base_offset , int data_length ) {
      super( data , base_offset , data_length );
      amTypeSet( AM_TYPE );
   }
   
   /**
    * Create a new TinyMessage embedded in the given message at the given base
    * offset.
    */
   public TinyMessage ( net.tinyos.message.Message msg , int base_offset ) {
      super( msg , base_offset , DEFAULT_MESSAGE_SIZE );
      amTypeSet( AM_TYPE );
   }
   
   /**
    * Create a new TinyMessage embedded in the given message at the given base
    * offset and length.
    */
   public TinyMessage ( net.tinyos.message.Message msg , int base_offset , int data_length ) {
      super( msg , base_offset , data_length );
      amTypeSet( AM_TYPE );
   }
   
   /**
    * /* Return a String representation of this message. Includes the message
    * type name and the non-indexed field values.
    */
   public String toString ( ) {
      String s = "Message <TinyMessage> \n";
      try {
         s += "  [gsnHeader.board_id=0x" + Long.toHexString( get_gsnHeader_board_id( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnHeader.packet_id=0x" + Long.toHexString( get_gsnHeader_packet_id( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnHeader.orig_node_id=0x" + Long.toHexString( get_gsnHeader_orig_node_id( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnHeader.orig_parent_id=0x" + Long.toHexString( get_gsnHeader_orig_parent_id( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnHeader.node_id=0x" + Long.toHexString( get_gsnHeader_node_id( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnHeader.parent_id=0x" + Long.toHexString( get_gsnHeader_parent_id( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnHeader.rsvd=0x" + Long.toHexString( get_gsnHeader_rsvd( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnData.msgData.vref=0x" + Long.toHexString( get_gsnData_msgData_vref( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnData.msgData.thermistor=0x" + Long.toHexString( get_gsnData_msgData_thermistor( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnData.msgData.light=0x" + Long.toHexString( get_gsnData_msgData_light( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnData.msgData.mic=0x" + Long.toHexString( get_gsnData_msgData_mic( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnData.msgData.accelX=0x" + Long.toHexString( get_gsnData_msgData_accelX( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnData.msgData.accelY=0x" + Long.toHexString( get_gsnData_msgData_accelY( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnData.msgData.magX=0x" + Long.toHexString( get_gsnData_msgData_magX( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      try {
         s += "  [gsnData.msgData.magY=0x" + Long.toHexString( get_gsnData_msgData_magY( ) ) + "]\n";
      } catch ( ArrayIndexOutOfBoundsException aioobe ) { /* Skip field */
      }
      return s;
   }
   
   // Message-type-specific access methods appear below.
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnHeader.board_id
   // Field type: short
   // Offset (bits): 0
   // Size (bits): 8
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnHeader.board_id' is signed (false).
    */
   public static boolean isSigned_gsnHeader_board_id ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnHeader.board_id' is an array (false).
    */
   public static boolean isArray_gsnHeader_board_id ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnHeader.board_id'
    */
   public static int offset_gsnHeader_board_id ( ) {
      return ( 0 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnHeader.board_id'
    */
   public static int offsetBits_gsnHeader_board_id ( ) {
      return 0;
   }
   
   /**
    * Return the value (as a short) of the field 'gsnHeader.board_id'
    */
   public short get_gsnHeader_board_id ( ) {
      return ( short ) getUIntElement( offsetBits_gsnHeader_board_id( ) , 8 );
   }
   
   /**
    * Set the value of the field 'gsnHeader.board_id'
    */
   public void set_gsnHeader_board_id ( short value ) {
      setUIntElement( offsetBits_gsnHeader_board_id( ) , 8 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnHeader.board_id'
    */
   public static int size_gsnHeader_board_id ( ) {
      return ( 8 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnHeader.board_id'
    */
   public static int sizeBits_gsnHeader_board_id ( ) {
      return 8;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnHeader.packet_id
   // Field type: short
   // Offset (bits): 8
   // Size (bits): 8
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnHeader.packet_id' is signed (false).
    */
   public static boolean isSigned_gsnHeader_packet_id ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnHeader.packet_id' is an array (false).
    */
   public static boolean isArray_gsnHeader_packet_id ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnHeader.packet_id'
    */
   public static int offset_gsnHeader_packet_id ( ) {
      return ( 8 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnHeader.packet_id'
    */
   public static int offsetBits_gsnHeader_packet_id ( ) {
      return 8;
   }
   
   /**
    * Return the value (as a short) of the field 'gsnHeader.packet_id'
    */
   public short get_gsnHeader_packet_id ( ) {
      return ( short ) getUIntElement( offsetBits_gsnHeader_packet_id( ) , 8 );
   }
   
   /**
    * Set the value of the field 'gsnHeader.packet_id'
    */
   public void set_gsnHeader_packet_id ( short value ) {
      setUIntElement( offsetBits_gsnHeader_packet_id( ) , 8 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnHeader.packet_id'
    */
   public static int size_gsnHeader_packet_id ( ) {
      return ( 8 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnHeader.packet_id'
    */
   public static int sizeBits_gsnHeader_packet_id ( ) {
      return 8;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnHeader.orig_node_id
   // Field type: short
   // Offset (bits): 16
   // Size (bits): 8
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnHeader.orig_node_id' is signed (false).
    */
   public static boolean isSigned_gsnHeader_orig_node_id ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnHeader.orig_node_id' is an array (false).
    */
   public static boolean isArray_gsnHeader_orig_node_id ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnHeader.orig_node_id'
    */
   public static int offset_gsnHeader_orig_node_id ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnHeader.orig_node_id'
    */
   public static int offsetBits_gsnHeader_orig_node_id ( ) {
      return 16;
   }
   
   /**
    * Return the value (as a short) of the field 'gsnHeader.orig_node_id'
    */
   public short get_gsnHeader_orig_node_id ( ) {
      return ( short ) getUIntElement( offsetBits_gsnHeader_orig_node_id( ) , 8 );
   }
   
   /**
    * Set the value of the field 'gsnHeader.orig_node_id'
    */
   public void set_gsnHeader_orig_node_id ( short value ) {
      setUIntElement( offsetBits_gsnHeader_orig_node_id( ) , 8 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnHeader.orig_node_id'
    */
   public static int size_gsnHeader_orig_node_id ( ) {
      return ( 8 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnHeader.orig_node_id'
    */
   public static int sizeBits_gsnHeader_orig_node_id ( ) {
      return 8;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnHeader.orig_parent_id
   // Field type: short
   // Offset (bits): 24
   // Size (bits): 8
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnHeader.orig_parent_id' is signed (false).
    */
   public static boolean isSigned_gsnHeader_orig_parent_id ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnHeader.orig_parent_id' is an array (false).
    */
   public static boolean isArray_gsnHeader_orig_parent_id ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnHeader.orig_parent_id'
    */
   public static int offset_gsnHeader_orig_parent_id ( ) {
      return ( 24 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnHeader.orig_parent_id'
    */
   public static int offsetBits_gsnHeader_orig_parent_id ( ) {
      return 24;
   }
   
   /**
    * Return the value (as a short) of the field 'gsnHeader.orig_parent_id'
    */
   public short get_gsnHeader_orig_parent_id ( ) {
      return ( short ) getUIntElement( offsetBits_gsnHeader_orig_parent_id( ) , 8 );
   }
   
   /**
    * Set the value of the field 'gsnHeader.orig_parent_id'
    */
   public void set_gsnHeader_orig_parent_id ( short value ) {
      setUIntElement( offsetBits_gsnHeader_orig_parent_id( ) , 8 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnHeader.orig_parent_id'
    */
   public static int size_gsnHeader_orig_parent_id ( ) {
      return ( 8 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnHeader.orig_parent_id'
    */
   public static int sizeBits_gsnHeader_orig_parent_id ( ) {
      return 8;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnHeader.node_id
   // Field type: short
   // Offset (bits): 32
   // Size (bits): 8
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnHeader.node_id' is signed (false).
    */
   public static boolean isSigned_gsnHeader_node_id ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnHeader.node_id' is an array (false).
    */
   public static boolean isArray_gsnHeader_node_id ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnHeader.node_id'
    */
   public static int offset_gsnHeader_node_id ( ) {
      return ( 32 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnHeader.node_id'
    */
   public static int offsetBits_gsnHeader_node_id ( ) {
      return 32;
   }
   
   /**
    * Return the value (as a short) of the field 'gsnHeader.node_id'
    */
   public short get_gsnHeader_node_id ( ) {
      return ( short ) getUIntElement( offsetBits_gsnHeader_node_id( ) , 8 );
   }
   
   /**
    * Set the value of the field 'gsnHeader.node_id'
    */
   public void set_gsnHeader_node_id ( short value ) {
      setUIntElement( offsetBits_gsnHeader_node_id( ) , 8 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnHeader.node_id'
    */
   public static int size_gsnHeader_node_id ( ) {
      return ( 8 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnHeader.node_id'
    */
   public static int sizeBits_gsnHeader_node_id ( ) {
      return 8;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnHeader.parent_id
   // Field type: short
   // Offset (bits): 40
   // Size (bits): 8
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnHeader.parent_id' is signed (false).
    */
   public static boolean isSigned_gsnHeader_parent_id ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnHeader.parent_id' is an array (false).
    */
   public static boolean isArray_gsnHeader_parent_id ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnHeader.parent_id'
    */
   public static int offset_gsnHeader_parent_id ( ) {
      return ( 40 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnHeader.parent_id'
    */
   public static int offsetBits_gsnHeader_parent_id ( ) {
      return 40;
   }
   
   /**
    * Return the value (as a short) of the field 'gsnHeader.parent_id'
    */
   public short get_gsnHeader_parent_id ( ) {
      return ( short ) getUIntElement( offsetBits_gsnHeader_parent_id( ) , 8 );
   }
   
   /**
    * Set the value of the field 'gsnHeader.parent_id'
    */
   public void set_gsnHeader_parent_id ( short value ) {
      setUIntElement( offsetBits_gsnHeader_parent_id( ) , 8 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnHeader.parent_id'
    */
   public static int size_gsnHeader_parent_id ( ) {
      return ( 8 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnHeader.parent_id'
    */
   public static int sizeBits_gsnHeader_parent_id ( ) {
      return 8;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnHeader.rsvd
   // Field type: short
   // Offset (bits): 48
   // Size (bits): 8
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnHeader.rsvd' is signed (false).
    */
   public static boolean isSigned_gsnHeader_rsvd ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnHeader.rsvd' is an array (false).
    */
   public static boolean isArray_gsnHeader_rsvd ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnHeader.rsvd'
    */
   public static int offset_gsnHeader_rsvd ( ) {
      return ( 48 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnHeader.rsvd'
    */
   public static int offsetBits_gsnHeader_rsvd ( ) {
      return 48;
   }
   
   /**
    * Return the value (as a short) of the field 'gsnHeader.rsvd'
    */
   public short get_gsnHeader_rsvd ( ) {
      return ( short ) getUIntElement( offsetBits_gsnHeader_rsvd( ) , 8 );
   }
   
   /**
    * Set the value of the field 'gsnHeader.rsvd'
    */
   public void set_gsnHeader_rsvd ( short value ) {
      setUIntElement( offsetBits_gsnHeader_rsvd( ) , 8 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnHeader.rsvd'
    */
   public static int size_gsnHeader_rsvd ( ) {
      return ( 8 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnHeader.rsvd'
    */
   public static int sizeBits_gsnHeader_rsvd ( ) {
      return 8;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnData.msgData.vref
   // Field type: int
   // Offset (bits): 56
   // Size (bits): 16
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnData.msgData.vref' is signed (false).
    */
   public static boolean isSigned_gsnData_msgData_vref ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnData.msgData.vref' is an array (false).
    */
   public static boolean isArray_gsnData_msgData_vref ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnData.msgData.vref'
    */
   public static int offset_gsnData_msgData_vref ( ) {
      return ( 56 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnData.msgData.vref'
    */
   public static int offsetBits_gsnData_msgData_vref ( ) {
      return 56;
   }
   
   /**
    * Return the value (as a int) of the field 'gsnData.msgData.vref'
    */
   public int get_gsnData_msgData_vref ( ) {
      return ( int ) getUIntElement( offsetBits_gsnData_msgData_vref( ) , 16 );
   }
   
   /**
    * Set the value of the field 'gsnData.msgData.vref'
    */
   public void set_gsnData_msgData_vref ( int value ) {
      setUIntElement( offsetBits_gsnData_msgData_vref( ) , 16 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnData.msgData.vref'
    */
   public static int size_gsnData_msgData_vref ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnData.msgData.vref'
    */
   public static int sizeBits_gsnData_msgData_vref ( ) {
      return 16;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnData.msgData.thermistor
   // Field type: int
   // Offset (bits): 72
   // Size (bits): 16
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnData.msgData.thermistor' is signed (false).
    */
   public static boolean isSigned_gsnData_msgData_thermistor ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnData.msgData.thermistor' is an array (false).
    */
   public static boolean isArray_gsnData_msgData_thermistor ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnData.msgData.thermistor'
    */
   public static int offset_gsnData_msgData_thermistor ( ) {
      return ( 72 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnData.msgData.thermistor'
    */
   public static int offsetBits_gsnData_msgData_thermistor ( ) {
      return 72;
   }
   
   /**
    * Return the value (as a int) of the field 'gsnData.msgData.thermistor'
    */
   public int get_gsnData_msgData_thermistor ( ) {
      return ( int ) getUIntElement( offsetBits_gsnData_msgData_thermistor( ) , 16 );
   }
   
   /**
    * Set the value of the field 'gsnData.msgData.thermistor'
    */
   public void set_gsnData_msgData_thermistor ( int value ) {
      setUIntElement( offsetBits_gsnData_msgData_thermistor( ) , 16 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnData.msgData.thermistor'
    */
   public static int size_gsnData_msgData_thermistor ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnData.msgData.thermistor'
    */
   public static int sizeBits_gsnData_msgData_thermistor ( ) {
      return 16;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnData.msgData.light
   // Field type: int
   // Offset (bits): 88
   // Size (bits): 16
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnData.msgData.light' is signed (false).
    */
   public static boolean isSigned_gsnData_msgData_light ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnData.msgData.light' is an array (false).
    */
   public static boolean isArray_gsnData_msgData_light ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnData.msgData.light'
    */
   public static int offset_gsnData_msgData_light ( ) {
      return ( 88 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnData.msgData.light'
    */
   public static int offsetBits_gsnData_msgData_light ( ) {
      return 88;
   }
   
   /**
    * Return the value (as a int) of the field 'gsnData.msgData.light'
    */
   public int get_gsnData_msgData_light ( ) {
      return ( int ) getUIntElement( offsetBits_gsnData_msgData_light( ) , 16 );
   }
   
   /**
    * Set the value of the field 'gsnData.msgData.light'
    */
   public void set_gsnData_msgData_light ( int value ) {
      setUIntElement( offsetBits_gsnData_msgData_light( ) , 16 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnData.msgData.light'
    */
   public static int size_gsnData_msgData_light ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnData.msgData.light'
    */
   public static int sizeBits_gsnData_msgData_light ( ) {
      return 16;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnData.msgData.mic
   // Field type: int
   // Offset (bits): 104
   // Size (bits): 16
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnData.msgData.mic' is signed (false).
    */
   public static boolean isSigned_gsnData_msgData_mic ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnData.msgData.mic' is an array (false).
    */
   public static boolean isArray_gsnData_msgData_mic ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnData.msgData.mic'
    */
   public static int offset_gsnData_msgData_mic ( ) {
      return ( 104 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnData.msgData.mic'
    */
   public static int offsetBits_gsnData_msgData_mic ( ) {
      return 104;
   }
   
   /**
    * Return the value (as a int) of the field 'gsnData.msgData.mic'
    */
   public int get_gsnData_msgData_mic ( ) {
      return ( int ) getUIntElement( offsetBits_gsnData_msgData_mic( ) , 16 );
   }
   
   /**
    * Set the value of the field 'gsnData.msgData.mic'
    */
   public void set_gsnData_msgData_mic ( int value ) {
      setUIntElement( offsetBits_gsnData_msgData_mic( ) , 16 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnData.msgData.mic'
    */
   public static int size_gsnData_msgData_mic ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnData.msgData.mic'
    */
   public static int sizeBits_gsnData_msgData_mic ( ) {
      return 16;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnData.msgData.accelX
   // Field type: int
   // Offset (bits): 120
   // Size (bits): 16
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnData.msgData.accelX' is signed (false).
    */
   public static boolean isSigned_gsnData_msgData_accelX ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnData.msgData.accelX' is an array (false).
    */
   public static boolean isArray_gsnData_msgData_accelX ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnData.msgData.accelX'
    */
   public static int offset_gsnData_msgData_accelX ( ) {
      return ( 120 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnData.msgData.accelX'
    */
   public static int offsetBits_gsnData_msgData_accelX ( ) {
      return 120;
   }
   
   /**
    * Return the value (as a int) of the field 'gsnData.msgData.accelX'
    */
   public int get_gsnData_msgData_accelX ( ) {
      return ( int ) getUIntElement( offsetBits_gsnData_msgData_accelX( ) , 16 );
   }
   
   /**
    * Set the value of the field 'gsnData.msgData.accelX'
    */
   public void set_gsnData_msgData_accelX ( int value ) {
      setUIntElement( offsetBits_gsnData_msgData_accelX( ) , 16 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnData.msgData.accelX'
    */
   public static int size_gsnData_msgData_accelX ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnData.msgData.accelX'
    */
   public static int sizeBits_gsnData_msgData_accelX ( ) {
      return 16;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnData.msgData.accelY
   // Field type: int
   // Offset (bits): 136
   // Size (bits): 16
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnData.msgData.accelY' is signed (false).
    */
   public static boolean isSigned_gsnData_msgData_accelY ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnData.msgData.accelY' is an array (false).
    */
   public static boolean isArray_gsnData_msgData_accelY ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnData.msgData.accelY'
    */
   public static int offset_gsnData_msgData_accelY ( ) {
      return ( 136 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnData.msgData.accelY'
    */
   public static int offsetBits_gsnData_msgData_accelY ( ) {
      return 136;
   }
   
   /**
    * Return the value (as a int) of the field 'gsnData.msgData.accelY'
    */
   public int get_gsnData_msgData_accelY ( ) {
      return ( int ) getUIntElement( offsetBits_gsnData_msgData_accelY( ) , 16 );
   }
   
   /**
    * Set the value of the field 'gsnData.msgData.accelY'
    */
   public void set_gsnData_msgData_accelY ( int value ) {
      setUIntElement( offsetBits_gsnData_msgData_accelY( ) , 16 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnData.msgData.accelY'
    */
   public static int size_gsnData_msgData_accelY ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnData.msgData.accelY'
    */
   public static int sizeBits_gsnData_msgData_accelY ( ) {
      return 16;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnData.msgData.magX
   // Field type: int
   // Offset (bits): 152
   // Size (bits): 16
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnData.msgData.magX' is signed (false).
    */
   public static boolean isSigned_gsnData_msgData_magX ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnData.msgData.magX' is an array (false).
    */
   public static boolean isArray_gsnData_msgData_magX ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnData.msgData.magX'
    */
   public static int offset_gsnData_msgData_magX ( ) {
      return ( 152 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnData.msgData.magX'
    */
   public static int offsetBits_gsnData_msgData_magX ( ) {
      return 152;
   }
   
   /**
    * Return the value (as a int) of the field 'gsnData.msgData.magX'
    */
   public int get_gsnData_msgData_magX ( ) {
      return ( int ) getUIntElement( offsetBits_gsnData_msgData_magX( ) , 16 );
   }
   
   /**
    * Set the value of the field 'gsnData.msgData.magX'
    */
   public void set_gsnData_msgData_magX ( int value ) {
      setUIntElement( offsetBits_gsnData_msgData_magX( ) , 16 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnData.msgData.magX'
    */
   public static int size_gsnData_msgData_magX ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnData.msgData.magX'
    */
   public static int sizeBits_gsnData_msgData_magX ( ) {
      return 16;
   }
   
   // ///////////////////////////////////////////////////////
   // Accessor methods for field: gsnData.msgData.magY
   // Field type: int
   // Offset (bits): 168
   // Size (bits): 16
   // ///////////////////////////////////////////////////////
   
   /**
    * Return whether the field 'gsnData.msgData.magY' is signed (false).
    */
   public static boolean isSigned_gsnData_msgData_magY ( ) {
      return false;
   }
   
   /**
    * Return whether the field 'gsnData.msgData.magY' is an array (false).
    */
   public static boolean isArray_gsnData_msgData_magY ( ) {
      return false;
   }
   
   /**
    * Return the offset (in bytes) of the field 'gsnData.msgData.magY'
    */
   public static int offset_gsnData_msgData_magY ( ) {
      return ( 168 / 8 );
   }
   
   /**
    * Return the offset (in bits) of the field 'gsnData.msgData.magY'
    */
   public static int offsetBits_gsnData_msgData_magY ( ) {
      return 168;
   }
   
   /**
    * Return the value (as a int) of the field 'gsnData.msgData.magY'
    */
   public int get_gsnData_msgData_magY ( ) {
      return ( int ) getUIntElement( offsetBits_gsnData_msgData_magY( ) , 16 );
   }
   
   /**
    * Set the value of the field 'gsnData.msgData.magY'
    */
   public void set_gsnData_msgData_magY ( int value ) {
      setUIntElement( offsetBits_gsnData_msgData_magY( ) , 16 , value );
   }
   
   /**
    * Return the size, in bytes, of the field 'gsnData.msgData.magY'
    */
   public static int size_gsnData_msgData_magY ( ) {
      return ( 16 / 8 );
   }
   
   /**
    * Return the size, in bits, of the field 'gsnData.msgData.magY'
    */
   public static int sizeBits_gsnData_msgData_magY ( ) {
      return 16;
   }
   
}
