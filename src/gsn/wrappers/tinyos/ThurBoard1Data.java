package gsn.wrappers.tinyos;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ThurBoard1Data'
 * message type.
 */

public class ThurBoard1Data extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 19;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 180;

    /** Create a new ThurBoard1Data of size 19. */
    public ThurBoard1Data() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ThurBoard1Data of the given data_length. */
    public ThurBoard1Data(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ThurBoard1Data with the given data_length
     * and base offset.
     */
    public ThurBoard1Data(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ThurBoard1Data using the given byte array
     * as backing store.
     */
    public ThurBoard1Data(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ThurBoard1Data using the given byte array
     * as backing store, with the given base offset.
     */
    public ThurBoard1Data(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ThurBoard1Data using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ThurBoard1Data(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ThurBoard1Data embedded in the given message
     * at the given base offset.
     */
    public ThurBoard1Data(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ThurBoard1Data embedded in the given message
     * at the given base offset and length.
     */
    public ThurBoard1Data(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ThurBoard1Data> \n";
      try {
        s += "  [wind_speed=0x"+Long.toHexString(get_wind_speed())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [wind_direction=0x"+Long.toHexString(get_wind_direction())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [solar_radiation=0x"+Long.toHexString(get_solar_radiation())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_moisture_1=0x"+Long.toHexString(get_soil_moisture_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_temperature_1=0x"+Long.toHexString(get_soil_temperature_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_conductivity_1=0x"+Long.toHexString(get_soil_conductivity_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_moisture_2=0x"+Long.toHexString(get_soil_moisture_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_temperature_2=0x"+Long.toHexString(get_soil_temperature_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_conductivity_2=0x"+Long.toHexString(get_soil_conductivity_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_moisture_3=0x"+Long.toHexString(get_soil_moisture_3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_temperature_3=0x"+Long.toHexString(get_soil_temperature_3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [soil_conductivity_3=0x"+Long.toHexString(get_soil_conductivity_3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: wind_speed
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'wind_speed' is signed (false).
     */
    public static boolean isSigned_wind_speed() {
        return false;
    }

    /**
     * Return whether the field 'wind_speed' is an array (false).
     */
    public static boolean isArray_wind_speed() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'wind_speed'
     */
    public static int offset_wind_speed() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'wind_speed'
     */
    public static int offsetBits_wind_speed() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'wind_speed'
     */
    public int get_wind_speed() {
        return (int)getUIntBEElement(offsetBits_wind_speed(), 16);
    }

    /**
     * Set the value of the field 'wind_speed'
     */
    public void set_wind_speed(int value) {
        setUIntBEElement(offsetBits_wind_speed(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'wind_speed'
     */
    public static int size_wind_speed() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'wind_speed'
     */
    public static int sizeBits_wind_speed() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: wind_direction
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'wind_direction' is signed (false).
     */
    public static boolean isSigned_wind_direction() {
        return false;
    }

    /**
     * Return whether the field 'wind_direction' is an array (false).
     */
    public static boolean isArray_wind_direction() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'wind_direction'
     */
    public static int offset_wind_direction() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'wind_direction'
     */
    public static int offsetBits_wind_direction() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'wind_direction'
     */
    public short get_wind_direction() {
        return (short)getUIntBEElement(offsetBits_wind_direction(), 12);
    }

    /**
     * Set the value of the field 'wind_direction'
     */
    public void set_wind_direction(short value) {
        setUIntBEElement(offsetBits_wind_direction(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'wind_direction'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_wind_direction() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'wind_direction'
     */
    public static int sizeBits_wind_direction() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: solar_radiation
    //   Field type: short, unsigned
    //   Offset (bits): 28
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'solar_radiation' is signed (false).
     */
    public static boolean isSigned_solar_radiation() {
        return false;
    }

    /**
     * Return whether the field 'solar_radiation' is an array (false).
     */
    public static boolean isArray_solar_radiation() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'solar_radiation'
     * WARNING: This field is not byte-aligned (bit offset 28).
     */
    public static int offset_solar_radiation() {
        return (28 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'solar_radiation'
     */
    public static int offsetBits_solar_radiation() {
        return 28;
    }

    /**
     * Return the value (as a short) of the field 'solar_radiation'
     */
    public short get_solar_radiation() {
        return (short)getUIntBEElement(offsetBits_solar_radiation(), 12);
    }

    /**
     * Set the value of the field 'solar_radiation'
     */
    public void set_solar_radiation(short value) {
        setUIntBEElement(offsetBits_solar_radiation(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'solar_radiation'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_solar_radiation() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'solar_radiation'
     */
    public static int sizeBits_solar_radiation() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_moisture_1
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_moisture_1' is signed (false).
     */
    public static boolean isSigned_soil_moisture_1() {
        return false;
    }

    /**
     * Return whether the field 'soil_moisture_1' is an array (false).
     */
    public static boolean isArray_soil_moisture_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_moisture_1'
     */
    public static int offset_soil_moisture_1() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_moisture_1'
     */
    public static int offsetBits_soil_moisture_1() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'soil_moisture_1'
     */
    public short get_soil_moisture_1() {
        return (short)getUIntBEElement(offsetBits_soil_moisture_1(), 12);
    }

    /**
     * Set the value of the field 'soil_moisture_1'
     */
    public void set_soil_moisture_1(short value) {
        setUIntBEElement(offsetBits_soil_moisture_1(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_moisture_1'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_moisture_1() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_moisture_1'
     */
    public static int sizeBits_soil_moisture_1() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_temperature_1
    //   Field type: short, unsigned
    //   Offset (bits): 52
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_temperature_1' is signed (false).
     */
    public static boolean isSigned_soil_temperature_1() {
        return false;
    }

    /**
     * Return whether the field 'soil_temperature_1' is an array (false).
     */
    public static boolean isArray_soil_temperature_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_temperature_1'
     * WARNING: This field is not byte-aligned (bit offset 52).
     */
    public static int offset_soil_temperature_1() {
        return (52 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_temperature_1'
     */
    public static int offsetBits_soil_temperature_1() {
        return 52;
    }

    /**
     * Return the value (as a short) of the field 'soil_temperature_1'
     */
    public short get_soil_temperature_1() {
        return (short)getUIntBEElement(offsetBits_soil_temperature_1(), 12);
    }

    /**
     * Set the value of the field 'soil_temperature_1'
     */
    public void set_soil_temperature_1(short value) {
        setUIntBEElement(offsetBits_soil_temperature_1(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_temperature_1'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_temperature_1() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_temperature_1'
     */
    public static int sizeBits_soil_temperature_1() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_conductivity_1
    //   Field type: short, unsigned
    //   Offset (bits): 64
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_conductivity_1' is signed (false).
     */
    public static boolean isSigned_soil_conductivity_1() {
        return false;
    }

    /**
     * Return whether the field 'soil_conductivity_1' is an array (false).
     */
    public static boolean isArray_soil_conductivity_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_conductivity_1'
     */
    public static int offset_soil_conductivity_1() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_conductivity_1'
     */
    public static int offsetBits_soil_conductivity_1() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'soil_conductivity_1'
     */
    public short get_soil_conductivity_1() {
        return (short)getUIntBEElement(offsetBits_soil_conductivity_1(), 12);
    }

    /**
     * Set the value of the field 'soil_conductivity_1'
     */
    public void set_soil_conductivity_1(short value) {
        setUIntBEElement(offsetBits_soil_conductivity_1(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_conductivity_1'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_conductivity_1() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_conductivity_1'
     */
    public static int sizeBits_soil_conductivity_1() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_moisture_2
    //   Field type: short, unsigned
    //   Offset (bits): 76
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_moisture_2' is signed (false).
     */
    public static boolean isSigned_soil_moisture_2() {
        return false;
    }

    /**
     * Return whether the field 'soil_moisture_2' is an array (false).
     */
    public static boolean isArray_soil_moisture_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_moisture_2'
     * WARNING: This field is not byte-aligned (bit offset 76).
     */
    public static int offset_soil_moisture_2() {
        return (76 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_moisture_2'
     */
    public static int offsetBits_soil_moisture_2() {
        return 76;
    }

    /**
     * Return the value (as a short) of the field 'soil_moisture_2'
     */
    public short get_soil_moisture_2() {
        return (short)getUIntBEElement(offsetBits_soil_moisture_2(), 12);
    }

    /**
     * Set the value of the field 'soil_moisture_2'
     */
    public void set_soil_moisture_2(short value) {
        setUIntBEElement(offsetBits_soil_moisture_2(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_moisture_2'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_moisture_2() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_moisture_2'
     */
    public static int sizeBits_soil_moisture_2() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_temperature_2
    //   Field type: short, unsigned
    //   Offset (bits): 88
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_temperature_2' is signed (false).
     */
    public static boolean isSigned_soil_temperature_2() {
        return false;
    }

    /**
     * Return whether the field 'soil_temperature_2' is an array (false).
     */
    public static boolean isArray_soil_temperature_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_temperature_2'
     */
    public static int offset_soil_temperature_2() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_temperature_2'
     */
    public static int offsetBits_soil_temperature_2() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'soil_temperature_2'
     */
    public short get_soil_temperature_2() {
        return (short)getUIntBEElement(offsetBits_soil_temperature_2(), 12);
    }

    /**
     * Set the value of the field 'soil_temperature_2'
     */
    public void set_soil_temperature_2(short value) {
        setUIntBEElement(offsetBits_soil_temperature_2(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_temperature_2'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_temperature_2() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_temperature_2'
     */
    public static int sizeBits_soil_temperature_2() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_conductivity_2
    //   Field type: short, unsigned
    //   Offset (bits): 100
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_conductivity_2' is signed (false).
     */
    public static boolean isSigned_soil_conductivity_2() {
        return false;
    }

    /**
     * Return whether the field 'soil_conductivity_2' is an array (false).
     */
    public static boolean isArray_soil_conductivity_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_conductivity_2'
     * WARNING: This field is not byte-aligned (bit offset 100).
     */
    public static int offset_soil_conductivity_2() {
        return (100 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_conductivity_2'
     */
    public static int offsetBits_soil_conductivity_2() {
        return 100;
    }

    /**
     * Return the value (as a short) of the field 'soil_conductivity_2'
     */
    public short get_soil_conductivity_2() {
        return (short)getUIntBEElement(offsetBits_soil_conductivity_2(), 12);
    }

    /**
     * Set the value of the field 'soil_conductivity_2'
     */
    public void set_soil_conductivity_2(short value) {
        setUIntBEElement(offsetBits_soil_conductivity_2(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_conductivity_2'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_conductivity_2() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_conductivity_2'
     */
    public static int sizeBits_soil_conductivity_2() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_moisture_3
    //   Field type: short, unsigned
    //   Offset (bits): 112
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_moisture_3' is signed (false).
     */
    public static boolean isSigned_soil_moisture_3() {
        return false;
    }

    /**
     * Return whether the field 'soil_moisture_3' is an array (false).
     */
    public static boolean isArray_soil_moisture_3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_moisture_3'
     */
    public static int offset_soil_moisture_3() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_moisture_3'
     */
    public static int offsetBits_soil_moisture_3() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'soil_moisture_3'
     */
    public short get_soil_moisture_3() {
        return (short)getUIntBEElement(offsetBits_soil_moisture_3(), 12);
    }

    /**
     * Set the value of the field 'soil_moisture_3'
     */
    public void set_soil_moisture_3(short value) {
        setUIntBEElement(offsetBits_soil_moisture_3(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_moisture_3'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_moisture_3() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_moisture_3'
     */
    public static int sizeBits_soil_moisture_3() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_temperature_3
    //   Field type: short, unsigned
    //   Offset (bits): 124
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_temperature_3' is signed (false).
     */
    public static boolean isSigned_soil_temperature_3() {
        return false;
    }

    /**
     * Return whether the field 'soil_temperature_3' is an array (false).
     */
    public static boolean isArray_soil_temperature_3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_temperature_3'
     * WARNING: This field is not byte-aligned (bit offset 124).
     */
    public static int offset_soil_temperature_3() {
        return (124 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_temperature_3'
     */
    public static int offsetBits_soil_temperature_3() {
        return 124;
    }

    /**
     * Return the value (as a short) of the field 'soil_temperature_3'
     */
    public short get_soil_temperature_3() {
        return (short)getUIntBEElement(offsetBits_soil_temperature_3(), 12);
    }

    /**
     * Set the value of the field 'soil_temperature_3'
     */
    public void set_soil_temperature_3(short value) {
        setUIntBEElement(offsetBits_soil_temperature_3(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_temperature_3'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_temperature_3() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_temperature_3'
     */
    public static int sizeBits_soil_temperature_3() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: soil_conductivity_3
    //   Field type: short, unsigned
    //   Offset (bits): 136
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'soil_conductivity_3' is signed (false).
     */
    public static boolean isSigned_soil_conductivity_3() {
        return false;
    }

    /**
     * Return whether the field 'soil_conductivity_3' is an array (false).
     */
    public static boolean isArray_soil_conductivity_3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'soil_conductivity_3'
     */
    public static int offset_soil_conductivity_3() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'soil_conductivity_3'
     */
    public static int offsetBits_soil_conductivity_3() {
        return 136;
    }

    /**
     * Return the value (as a short) of the field 'soil_conductivity_3'
     */
    public short get_soil_conductivity_3() {
        return (short)getUIntBEElement(offsetBits_soil_conductivity_3(), 12);
    }

    /**
     * Set the value of the field 'soil_conductivity_3'
     */
    public void set_soil_conductivity_3(short value) {
        setUIntBEElement(offsetBits_soil_conductivity_3(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'soil_conductivity_3'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_soil_conductivity_3() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'soil_conductivity_3'
     */
    public static int sizeBits_soil_conductivity_3() {
        return 12;
    }

}
