<div id="data_1" class="clearfix">
  <% form_tag('/data/download_data') do -%>
    <div class="accordion">
      <div class="ui-accordion-group">
        <h3 class="ui-accordion-header"><a href="#">Data Output</a></h3>
        <div class="ui-accordion-content">
          <div class="aggregations">
            <p>
              <%= select_tag('nb', options_for_select([['All Data','ALL'],['Only','SPECIFIED']])) -%>
              <%= text_field_tag 'nb_value', '10', :size => 3, :disabled => true -%><span> Values</span>
            </p><p><span>Aggregation</span>
              <%= select_tag('agg_function', options_for_select([['No Aggregation','-1'],['AVG','AVG'],['MAX','MAX'],['MIN','MIN']])) -%>
              <%= text_field_tag 'agg_period', '2', :size => 5, :disabled => true -%><%= select_tag('agg_unit', options_for_select([['Hours','3600000'],['Minutes','60000'],['Seconds','1000'],['Milli Seconds','1']]),:disabled => true) -%>
            </p>
            <script type="text/javascript">
              $(function () {
                $('#nb').change(function(){
                  var val = $(this).val();
                  $('#nb_value').attr('disabled', (val == 'ALL'));
                });

                $('#agg_function').change(function(){
                  $('#agg_period').attr('disabled',$(this).val() == '-1');
                  $('#agg_unit').attr('disabled',$(this).val() == '-1');
                });
              });
            </script>
          </div>
          <%= render :partial=>'/shared/dvos_selector' %>
        </div>
      </div>
      <div class="ui-accordion-group">
        <h3 class="ui-accordion-header"><a href="#">Conditions</a></h3>
        <div class="ui-accordion-content">
          <div class="time-range">
            <span>From</span><%= text_field_tag :from, '', :id => :datepicker_from, :size => '16' -%>
            <span>To</span><%= text_field_tag :to, '', :id => :datepicker_to, :size => '16'-%>
          </div>
          <div class="conditions-container">
            <a id="add-condition" href="#">Add Condition</a>
            <ul id="conditions" ></ul>
          </div>
        </div>
      </div>
      <div class="ui-accordion-group">
        <h3 class="ui-accordion-header"><a href="#">Results</a></h3>
        <div class="ui-accordion-content">
          <div class="tabs">
            <ul>
              <li class="ui-tabs-nav-item"><a href="#fragment-1-1">Download</a></li>
              <li class="ui-tabs-nav-item"><a class="plot" href="#fragment-1-2">Plot</a></li>
              <li class="ui-tabs-nav-item"><a class="grid" href="#fragment-1-3"><span>Table</span></a></li>
            </ul>
            <div id="fragment-1-1">
              <%= submit_tag "Download CSV", {:class => "ui-default-state download_btn_csv"} %>
              <%= submit_tag "Download XML", {:class => "ui-default-state download_btn_xml"} %>
              <%= submit_tag "Generate PDF", {:class => "ui-default-state download_btn_pdf"} %>
              <span>Time Format</span>
              <%= select_tag('time_format', options_for_select([['ISO 8601','ISO'],['UNIX','UNIX']])) -%>
              <input id="download_format" type="hidden" name="download_format" value="CSV"></input>
            </div>
            <div id="fragment-1-2">
              <div class="chart_box">
                <div id="vs_selector" class="dlg_selector" title="Output Selector">
                  <div class="miniature">
                    <div class="overview" ></div>
                    <p class="overviewLegend" ></p>
                  </div>
                  <div class="gsn_chart"></div>
                  <div class="clear-both"></div>
                </div>
              </div>
            </div>
            <div id="fragment-1-3">
              <select id="sensorSelect">
                <option value="">(none)</option>
              </select>
              <div id="gridContainer"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  <% end -%>
</div>

<script type="text/javascript">
  $(function(){
    //accordion
    $('.accordion').accordion({
      header: ".ui-accordion-header",
      clearStyle: true
    });

    //tabs
    $('.tabs ul').tabs();

    //datepicker
    $('#ui-datepicker').datepicker({
      changeFirstDay: false
    });

    // buttons
    $('.ui-default-state').hover(
    function(){$(this).addClass('ui-hover-state');},
    function(){$(this).removeClass('ui-hover-state');}
  );

  });
</script>
<script type="text/javascript">
  function prepare_form_for_submission(tag){
    var counter = 0;
    tag.parents('form').find('.data-outputs-container li').each(function(){
      $(this).find('.deployments').each(function(){$(this).attr('name','deployment['+counter+']');});
      $(this).find('.vss').each(function(){$(this).attr('name','vs['+counter+']');});
      $(this).find('.fields').each(function(){$(this).attr('name','field['+counter+']');});
      counter++;
    });
    counter = 0;
    tag.parents('form').find('.conditions-container li').each(function(){
      $(this).find('.deployments').each(function(){$(this).attr('name','c_deployment['+counter+']');});
      $(this).find('.vss').each(function(){$(this).attr('name','c_vs['+counter+']');});
      $(this).find('.fields').each(function(){$(this).attr('name','c_field['+counter+']');});
      $(this).find('.join').each(function(){$(this).attr('name','c_join['+counter+']');});
      $(this).find('.max').each(function(){$(this).attr('name','c_max['+counter+']');});
      $(this).find('.min').each(function(){$(this).attr('name','c_min['+counter+']');});
      counter++;
    });
  }


  function submit_form(tag,options,callback){
    /* THIS IS A HELPER METHOD BUT NOT REALLY USED ANYWHRER ... */
    options = options || [];
    callback = callback || function(){};
    prepare_form_for_submission(tag);

    var to_send = tag.parents('form').serializeArray();
    //  alert(to_send);
    for (var format_key in options){
      for(var idx in to_send){
        //alert(to_send[idx] );
        if (to_send[idx].name==format_key){
          to_send[idx].value=options[format_key];
        }
      }
    }
  }

  $('.download_btn_csv').click(function(){
    $('#download_format').val('CSV');
    prepare_form_for_submission($(this));
    return true;
  });

  $('.download_btn_xml').click(function(){
    $('#download_format').val('XML');
    prepare_form_for_submission($(this));
    return true;
  });

  $('.download_btn_pdf').click(function(){
    $('#download_format').val('REPORT');
    prepare_form_for_submission($(this));
    return true;
  });

  $(".plot").click(function(){
    datasets={};
    csv_to_json($(this),drawChart);
  });


  $(".grid").click(function(){
    function drawGrid(datasets){
      $("#sensorSelect").empty();
      $("#sensorSelect").append('<option value="">(none)</option>');
      var displayed = [];
      for (var sensor in datasets) {
        sensor = sensor.split(' ')[0];
        if ($.inArray(sensor, displayed) < 0) {
          displayed.push(sensor);
          option = $("<option value=\"" + sensor + "\">" + sensor + "</option>");
          $("#sensorSelect").append(option);
        }
      }

      $("#sensorSelect").change(function(){
        var choice = $("#sensorSelect").val();

        $('#gridContainer').empty();

        if (choice == '') return;

        // columns
        var fields = [];

        // column headers
        var headers = [];

        for (var sensor_field in datasets) {
          if (sensor_field.substring(0, choice.length) == choice) {
            fields.push(datasets[sensor_field]);
            headers.push(sensor_field.substring(choice.length + 2, sensor_field.length - 1));
          }
        }

        var data_length = fields[0]['data'].length;

        var grid = '<table id="grid" class="tablesorter" border="0" cellpadding="0" cellspacing="1"><thead><tr><th>timestamp</th>';
        for (var i = 0; i < headers.length; i++) {
          grid += '<th>' + headers[i] + '</th>';
        }
        grid += '</tr></thead><tbody>';

        for (var i = 0; i < data_length; i++) {
          // bug with the csv_to_json function: the last row is empty
          if (fields[0]['data'][i][0]) {
            grid += '<tr><td>' + fields[0]['data'][i][0] + '</td>';

            for (var j = 0; j < fields.length; j++) {
              grid += '<td>' + fields[j]['data'][i][1] + '</td>'
            }
            grid += '</tr>';
          }
        }

        grid += '</tbody></table>';

        $('#gridContainer').html(grid);

        $('#grid').tablesorter({
          widthFixed: true,
          widgets: ['zebra']
        });
      });
    }
    csv_to_json($(this), drawGrid, 'ISO');
  });



  function csv_to_json(tag,callback,format){
    callback = callback || function(){};
    var old_value = $('#time_format').val();
    $('#download_format').val('CSV');
    format = format || 'UNIX';
    $('#time_format').val(format);
    prepare_form_for_submission(tag);

    $.post('/data/download_data', tag.parents('form').serializeArray(), function(response, text_status, request){
      var lines = response.split('\n');
      var headers = [];
      var timestamp_idx = -1;
      var vs_name='';
      var keys =[];
      var nb_elements = 0;
      var datasets = [];
      for (var line_no=0;line_no<lines.length;line_no++){
        line = $.trim(lines[line_no]);
        if (line.length == 0)
          continue;

        if(line[0]=='#'){
          if (line.indexOf("##vsname:") >= 0){ //comment lines
            vs_name = line.substring(9,line.length);
            keys=[];
            headers=[];
          }
          if (line[0]== '#' && line[1]!= '#') { //Header
            headers = line.split(',');
            for (var i=0;i<headers.length;i++){
              headers[i] = headers[i].replace("#","");
              if (headers[i]=='timed') {
                timestamp_idx=i;
              } else {
                lbl = vs_name+' ('+headers[i]+')';
                datasets[lbl]={label: lbl, data: []};
                keys.push(lbl);
              }
            }
          }
        }else { // data line, at this stage we should have a header varialbe already set.
          var data = line.split(',');
          var timestamp = data[timestamp_idx];
          for (i=0;i<headers.length;i++){
            if(i != timestamp_idx && data[i]!=undefined ){
              datasets[keys[i]].data.push([parseInt(timestamp),parseFloat(data[i])]);
              nb_elements++;
            }
          }
        }
      }
      $('#time_format').val(old_value);
      callback(datasets,nb_elements );
    });
  }

  /******************************************************/
  /*                  CHARTING PART                      */
  /******************************************************/
  function drawChart(datasets, nbElements){
    var full_dataset = datasets;
    var selected_datasets = [];
    var plot;

    var i = 0;
    for (var d in datasets){
      selected_datasets.push(full_dataset[d]);
      full_dataset[d].color=i++;    // hard-code color indices to prevent them from shifting colors dynamically
    }

    var options = {
      legend: { show: false },
      lines: { show: true },
      points: { show: false },
      selection: { mode: "xy" },
      xaxis: {mode: "time",timeformat: "%H:%M:%S %y/%m/%d"}
    };
    function plotAccordingToChoices() {
      if (selected_datasets.length > 0){
        plot.setData(selected_datasets);
        plot.setupGrid();
        plot.draw();
      }
    }

    plot = $.plot($(".gsn_chart"), [], options);

    var overview = $.plot($(".overview"), selected_datasets, {
      lines: { show: true, lineWidth: 1 },
      legend: { show: true, container: $(".overviewLegend") },
      grid: { color: "#999" },
      shadowSize: 0,
      xaxis: {ticks: [], mode: "time" },
      yaxis: {ticks: [] },
      selection: { mode: "xy" }
    });

    // now connect the two

    $(".gsn_chart").bind("plotselected", function (event, ranges) {
      // do the zooming

      $(".gsn_chart").empty();
      plot = $.plot($(".gsn_chart"), selected_datasets,

      $.extend(true, {}, options, {
        xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
        yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
      }));
      // don't fire event on the overview to prevent eternal loop
      overview.setSelection(ranges, true);
    });

    $(".overview").bind("plotselected", function (event, ranges) {
      plot.setSelection(ranges);
    });
    $(".legendColorBox").click(function(){
      if ($('.miniature').find('.legendColorBox').not('.no-img').length <2 && !$(this).hasClass('no-img'))
        return;
      $(this).toggleClass('no-img');
      selected_datasets = [];
      $('.miniature').find('.legendColorBox').not('.no-img').each(function(){
        legend = $(this).next('.legendLabel').text();
        for(var idx in full_dataset){
          if (full_dataset[idx].label == legend){
            selected_datasets.push(full_dataset[idx]);
          }
        }
      });
      plotAccordingToChoices();
    });
    plotAccordingToChoices();
  }
</script>