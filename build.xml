<?xml version="1.0" encoding="UTF-8"?>
<project name="gsn" default="build" basedir=".">
    <property name="safe-storage-port" value="25020"/>
    <property name="safe-storage-controller-port" value="25012"/>
    <property name="gsn-controller-port" value="22232"/>
    <target name="init" description="initializes properties and initialization tasks">
        <tstamp>
            <format property="TODAY" pattern="yyyy-MMMM-d-'at'-hh-mm-aa" locale="en"/>
        </tstamp>
        <property environment="env"/>
        <property name="env.GEM_PATH" value="${basedir}/ruby_gems"/>
        <property name="conf.dir" value="${basedir}/conf"/>
        <property name="build.dir" value="build/classes"/>
        <property name="src.dir" value="src"/>
        <property name="jars" value="jars"/>
        <property name="libdir" value="lib"/>
        <property name="reports" value="reports"/>
        <property name="temp" value="temp"/>
        <property name="maxMemoryUsage" value="128m"/>
        <property name="jar.file" value="gsn-core.jar"/>
        <!--  Enable the following line when you want to use Java Media Framework.
 You should unarchive the complete archive provide by sun and fix the
 following line to point to you path. -->
        <!--       <property name="jmf.dir"     value="JMF-2.1.1e" /> -->
        <path id="classpath">
            <pathelement location="${build.dir}/jcoverage-classes/"/>
            <pathelement location="${build.dir}/"/>
            <pathelement location="${env.JAVA_HOME}/lib/tools.jar"/>
            <fileset dir="${libdir}">
                <include name="**/*.jar"/>
            </fileset>
            <!--  Enable the following line if you want to use Java Media Frame Work.
  Note that you should first set the jmf.dir path above -->
            <!--         <fileset dir="${jmf.dir}">
            <include name="**/*.jar" />
         </fileset>  -->
        </path>
        <available type="dir" file="${jmf.dir}" property="jmf.exists"/>
        <!--   	<fail unless="jmf.exists" message="The ${jmf.dir} directory is missing, please download  JMF from http://java.sun.com/products/java-media/jmf/2.1.1/download.html and place it in ${jmf.dir} directory." /> -->
    </target>
    <target name="clean" description="remove the previously compiled class files" depends="init">
        <delete includeEmptyDirs="yes" failonerror="no">
            <fileset dir="${build.dir}" includes="**/*.class,**/*.xml"/>
            <fileset dir="${build.dir}" includes="**/*.xml"/>
            <fileset dir="${reports}" includes="**/*html,**/*htm,**/*xml"/>
            <fileset dir="${jars}" includes="**/*"/>
        </delete>
    </target>
    <target name="setup" depends="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="logs"/>
        <mkdir dir="${reports}/todos"/>
        <mkdir dir="${reports}/javadoc"/>
        <mkdir dir="${reports}/junit"/>
        <condition property="java6">
            <equals arg1="${ant.java.version}" arg2="1.6"/>
        </condition>
        <copydir dest="${build.dir}/org/apache" src="${src.dir}/org/apache"/>
        <copydir dest="${build.dir}/org/apache" src="${src.dir}/org/apache"/>
        <copydir dest="${build.dir}/gsn/gui/templates" src="${src.dir}/gsn/gui/templates"/>
        <copydir dest="${build.dir}/META-INF" src="${src.dir}/META-INF"/>
        <copydir dest="${build.dir}/gsn/gui/resources" src="${src.dir}/gsn/gui/resources"/>
    </target>
    <target name="build" depends="setup">
        <javac debug="true" srcdir="${src.dir}" optimize="off" destdir="${build.dir}" failonerror="true" classpathref="classpath">
            <exclude name="**/TCPConnPool.java"/>
            <exclude name="**/NetworkUtility.java"/>
        </javac>
    </target>
    <target name="bind" depends="build">
        <echo>Compiling JIBX Mappings...</echo>
        <java classname="org.jibx.binding.Compile" fork="yes" dir="${basedir}" failonerror="true">
            <classpath refid="classpath"/>
            <arg value="conf/containerJIBX.xml"/>
            <arg value="conf/VirtualSensorDescription.xml"/>
        </java>
    </target>
    <target name="runcam" depends="bind">
        <java classpathref="classpath" classname="gsn.Main" maxmemory="${maxMemoryUsage}" fork="true" dir="${basedir}">
            <env key="LD_LIBRARY_PATH" value="${jmf.dir}/lib:${env.JAVA_HOME}/jre/lib/i386:${env.JAVA_HOME}/jre/lib/i386/client:${env.JAVA_HOME}/jre/lib/i386/xawt"/>
            <env key="LD_PRELOAD" value="${env.JAVA_HOME}/jre/lib/i386/libjawt.so"/>
            <arg id="gsnc-port" value="${gsn-controller-port}"/>
        </java>
    </target>
    <target name="gsn" depends="bind,cleandb">
        <java classname="gsn.Main" maxmemory="${maxMemoryUsage}" fork="true" dir="${basedir}">
            <classpath refid="classpath"/>
            <jvmarg value="-Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger"/>
            <jvmarg value="-Dorg.mortbay.log.LogFactory.noDiscovery=false"/>
            <arg id="gsnc-port" value="${gsn-controller-port}"/>
            <!-- <jvmarg value="-server"/> Sometimes on windows compaines about a missing dll.-->
            <!-- For profiling using JConsole <jvmarg value="-Dcom.sun.management.jmxremote"/> -->
            <!-- For JDK5 profiling <jvmarg value="-Xrunhprof:heap=sites,depth=15,force=n"/> -->
        </java>
    </target>
    <target name="restart" depends="stop,gsn"/>
    <target name="gui" depends="bind">
        <java classname="gsn.gui.GSNConfiguratorFrame" fork="true" dir="${basedir}">
            <classpath refid="classpath"/>
            <jvmarg value="-splash:icons/GSNLogo.png"/>
            <arg id="gsnc-port" value="${gsn-controller-port}"/>
        </java>
    </target>
    <!-- ================================= 
          target: stop              
         ================================= -->
    <target name="stop" depends="build" description="Stop's the running GSN server (if any)">
        <java classname="gsn.GSNStop" maxmemory="${maxMemoryUsage}" fork="false" dir="${basedir}" classpathref="classpath">
            <arg id="gsnc-port" value="${gsn-controller-port}"/>
        </java>
    </target>
    <target name="securityTest" depends="bind">
        <java classpathref="classpath" classname="gsn.testss.SecurtiyTest" maxmemory="${maxMemoryUsage}" fork="true" dir="${build.dir}"/>
    </target>
    <target name="rfidtest" depends="bind">
        <java classname="gsn.wrappers.RFIDTest" maxmemory="${maxMemoryUsage}" fork="true" dir="${basedir}">
            <classpath refid="classpath"/>
        </java>
    </target>
    <target name="camtest" depends="bind">
        <property name="dev" value=""/>
        <java classname="gsn.wrappers.cameras.usb.WebCamWrapper" maxmemory="${maxMemoryUsage}" fork="true" dir="${basedir}">
            <classpath refid="classpath"/>
            <env key="LD_LIBRARY_PATH" value="${jmf.dir}/lib:${env.JAVA_HOME}/jre/lib/i386:${env.JAVA_HOME}/jre/lib/i386/client:${env.JAVA_HOME}/jre/lib/i386/xawt"/>
            <env key="LD_PRELOAD" value="${env.JAVA_HOME}/jre/lib/i386/libjawt.so"/>
            <arg value="${dev}"/>
        </java>
    </target>
    <target name="test-report" depends="tests" description="Runs JUnit tests, generates jcoverage,junit,todo reports">
        <junit printsummary="true" fork="false" haltonerror="true" errorproperty="errorOccuredInTests" haltonfailure="true">
            <formatter type="xml" usefile="true"/>
            <classpath refid="classpath"/>
            <batchtest todir="${reports}/junit">
                <fileset dir="${build.dir}/classes/" includes="**/*Test.class"/>
            </batchtest>
        </junit>
        <junitreport todir="${reports}/junit">
            <fileset dir="${reports}/junit">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports}/junit"/>
        </junitreport>
    </target>
    <target name="tests" depends="bind" description="Runs JUnit tests">
        <junit printsummary="true" fork="false" haltonerror="true" errorproperty="errorOccuredInTests" haltonfailure="true" failureproperty="testss.failed" showoutput="true">
            <classpath refid="classpath"/>
            <batchtest todir="${reports}/junit">
                <!--       <fileset dir="${build.dir}" includes="**/*Test*.class" excludes="**/TestStreamExporterVirtualSensor*.class"/> -->
                <fileset dir="${src.dir}">
                    <include name="**/*Test*.java"/>
                    <!--	      <exclude name="**/TestStreamExporterVirtualSensor.java"/>
	      	      <exclude name="**/TestContainerImpl.java"/> -->
                    <exclude name="**/RFIDTest.java"/>
                    <exclude name="**/TestDataPropogation.java"/>
                    <exclude name="**/TestVSensorLoader.java"/>
                    <exclude name="**/TestStreamSource.java"/>
                    <exclude name="**/TestWindowing1.java"/>
                    <exclude name="**/TestWindowing2.java"/>
                    <exclude name="**/TestPublicToMSR.java"/>
                    <exclude name="**/TestService.java"/>
                    <exclude name="**/TestDataPacket.java"/>
                    <exclude name="**/TestSQLUtils.java"/>
                    <exclude name="**/TestStreamElement.java"/>
                    <exclude name="**/TestValidityTools.java"/>
                    <exclude name="**/TestGraph.java"/>
                    <exclude name="**/TestContainerImpl.java"/>
                    <exclude name="**/TestStreamExporterVirtualSensor.java"/>
                    <!-- 	<exclude name="**/TestStorageManager.java"/> -->
                    <!--	<exclude name="**/TestAbstractWrapper.java"/> -->
                </fileset>
                <!--         	<fileset dir="${build.dir}" includes="**/TestStreamSource.*,**/TestAbstractWrapper.*,**/TestVSensorLoader.*" />-->
            </batchtest>
        </junit>
        <fail if="testss.failed">At least one test Failed !</fail>
    </target>
    <target name="docs" depends="setup">
        <javadoc classpathref="classpath" destdir="${reports}/javadoc" author="false" version="true" use="true" windowtitle="Global Sensor Networks Infrastructure">
            <fileset dir="${src.dir}" defaultexcludes="yes">
                <include name="**/*.java"/>
                <exclude name="**/*Test.java"/>
            </fileset>
            <doctitle>Global Sensor Networks</doctitle>
            <bottom>ali DOT salehi AT epfl DOT ch</bottom>
            <tag name="todo" scope="all" description="To do:"/>
        </javadoc>
        <documentdoclet destdir="${reports}/todos">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
            <info/>
        </documentdoclet>
    </target>
    <target name="jar" depends="clean,bind">
        <mkdir dir="${jars}"/>
        <jar destfile="${jars}/${jar.file}" basedir="${build.dir}">
            <manifest>
                <attribute name="Built-By" value="ALI.SALEHI-at-EPFL.ch"/>
                <attribute name="Main-Class" value="gsn.Main"/>
            </manifest>
        </jar>
    </target>
    <target name="installer" depends="clean,bind,jar">
        <izpack input="${basedir}/installer/izpack-installer.xml" output="${basedir}/${jars}/gsn-installer.jar" basedir="${basedir}/installer" izPackdir="${basedir}/izpack"/>
    </target>
    <target name="compile-reports" depends="init">
        <taskdef name="jrc" classname="net.sf.jasperreports.ant.JRAntCompileTask">
            <classpath refid="classpath"/>
        </taskdef>
        <jrc destdir="./gsn-reports/" srcdir="./gsn-reports/">
            <src>
                <fileset dir="./">
                    <include name="gsn-reports/*.jrxml"/>
                </fileset>
            </src>
            <classpath refid="classpath"/>
        </jrc>
    </target>
    <target name="cleandb" depends="bind">
        <java classname="gsn.storage.CleanDB" fork="true" dir="${basedir}" classpathref="classpath"/>
    </target>
    <target name="start-acquisition" depends="bind">
        <java classname="gsn.acquisition2.server.SafeStorageServer" fork="true" dir="${basedir}" classpathref="classpath">
            <arg id="ss-port" value="${safe-storage-port}"/>
            <arg id="ssc-port" value="${safe-storage-controller-port}"/>
            <arg id="ss-mode" value="1"/>
        </java>
    </target>
    <target name="clean-acquisition" depends="bind">
        <java classname="gsn.acquisition2.server.SafeStorageServer" fork="true" dir="${basedir}" classpathref="classpath">
            <arg id="ss-port" value="${safe-storage-port}"/>
            <arg id="ssc-port" value="${safe-storage-controller-port}"/>
            <arg id="ss-mode" value="100"/>
        </java>
    </target>
    <target name="generate-msr" depends="bind">
        <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="false" dir="${basedir}" classpathref="classpath">
            <arg value="-o"/>
            <arg value="generated"/>
            <arg value="-p"/>
            <arg value="gsn.msr.sensormap.datahub"/>
            <arg value="-s"/>
            <arg value="-ss"/>
            <arg value="-sd"/>
            <arg value="-uri"/>
            <arg value="service.asmx.xml"/>
        </java>
    </target>
    <target name="generate-hydrosys" depends="bind">
        <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="false" dir="${basedir}" classpathref="classpath">
            <arg value="-o"/>
            <arg value="generated"/>
            <arg value="-p"/>
            <arg value="gsn.hydrosys.sensormanager"/>
            <arg value="-s"/>
            <arg value="-ss"/>
            <arg value="-sd"/>
            <arg value="-uri"/>
            <arg value="${build.dir}/META-INF/SensorManager.wsdl"/>
        </java>
    </target>
    <target name="start-acquisition-nofork" depends="bind">
        <java classname="gsn.acquisition2.server.SafeStorageServer" fork="false" dir="${basedir}" classpathref="classpath">
            <arg id="ss-port" value="${safe-storage-port}"/>
            <arg id="ssc-port" value="${safe-storage-controller-port}"/>
            <arg id="ss-mode" value="1"/>
        </java>
    </target>
    <target name="stop-acquisition" depends="bind">
        <java classname="gsn.SafeStorageStop" fork="true" dir="${basedir}" classpathref="classpath">
            <arg id="ssc-port" value="${safe-storage-controller-port}"/>
        </java>
    </target>
    <target name="rails" depends="bind">
        <java classname="gsn.RailsRunner" fork="true" dir="${basedir}" classpathref="classpath">
            <sysproperty key="jruby.lib" value="${basedir}/ruby_gems/lib"/>
            <sysproperty key="jruby.base" value="${basedir}/ruby_gems"/>
            <sysproperty key="jruby.home" value="${basedir}/ruby_gems"/>
            <jvmarg value="-Djruby.fork.enabled=true"/>
            <!-- For Running JUnit Tests.-->
        </java>
    </target>
    <target name="prepare-install">
        <java classname="org.jruby.Main" fork="true" dir="${basedir}" classpathref="classpath">
            <arg value="-S"/>
            <arg value="gem"/>
            <arg value="sources"/>
            <arg value="-a"/>
            <arg value="http://gems.github.com"/>
        </java>
    </target>
    <target name="install" depends="bind,prepare-install">
        <delete includeEmptyDirs="yes" failonerror="no">
            <fileset dir="ruby_gems" includes="**/**"/>
        </delete>
        <mkdir dir="ruby_gems"/>
        <java classname="org.jruby.Main" fork="true" dir="${basedir}" classpathref="classpath">
            <arg value="-S"/>
            <arg value="gem"/>
            <arg value="install"/>
            <arg value="gem_plugin"/>
            <arg value="activesupport"/>
            <arg value="activerecord"/>
            <arg value="actionpack"/>
            <arg value="actionmailer"/>
            <arg value="activeresource"/>
            <arg value="rails"/>
            <arg value="mongrel"/>
            <arg value="jruby-openssl"/>
            <arg value="roxml"/>
            <arg value="mislav-will_paginate"/>
            <arg value="jdbc-wrapper"/>
            <arg value="activerecord-jdbc-adapter"/>
            <arg value="jdbc-h2"/>
            <arg value="jdbc-mysql"/>
            <arg value="activerecord-jdbch2-adapter"/>
            <arg value="activerecord-jdbcmysql-adapter"/>
            <arg value="--install-dir"/>
            <arg value="ruby_gems"/>
            <arg value="--no-ri"/>
            <arg value="--no-rdoc"/>
        </java>
    </target>
    <target name="migrate" depends="setup">
        <java classname="org.jruby.Main" fork="true" dir="${basedir}\web_app" classpathref="classpath">
            <arg value="-r"/>
            <arg value="env_setup.rb"/>
            <arg value="-S"/>
            <arg value="rake"/>
            <arg value="db:migrate"/>
            <jvmarg value="-Djruby.lib=${basedir}/ruby_gems/lib"/>
            <jvmarg value="-Djruby.home=${basedir}/ruby_gems"/>
            <jvmarg value="-Djruby.base=${basedir}/ruby_gems"/>
        </java>
    </target>
    <target name="rails2" depends="bind">
        <java classname="org.jruby.Main" fork="true" dir="${basedir}/web_app" classpathref="classpath">
            <sysproperty key="jruby.lib" value="${basedir}/ruby_gems/lib"/>
            <sysproperty key="jruby.base" value="${basedir}/ruby_gems"/>
            <sysproperty key="jruby.home" value="${basedir}/ruby_gems"/>
            <jvmarg value="-Djruby.lib=${basedir}/ruby_gems/lib"/>
            <jvmarg value="-Djruby.home=${basedir}/ruby_gems"/>
            <jvmarg value="-Djruby.base=${basedir}/ruby_gems"/>
            <jvmarg value="-Djruby.fork.enabled=true"/>
            <arg value="-S"/>
            <arg value="script/server"/>
        </java>
    </target>
    <target name="start-all" depends="start-acquisition-nofork,gsn"/>
    <target name="stop-all" depends="stop-acquisition,stop"/>
</project>
