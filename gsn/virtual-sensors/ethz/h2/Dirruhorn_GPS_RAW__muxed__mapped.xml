<virtual-sensor name="Dirruhorn_GPS_RAW__muxed__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="position_mapping" />
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
                    if ( ! isdef('positionMap')) { positionMap = [:]; }
                    positionMap.put(POSITION, System.currentTimeMillis());
                ]]>
            </param>
            <param name="period">150000</param>
            <param name="scriplet-periodic">
                <![CDATA[
                	// default alarm time after which an email is sent if no messages have been received
                    def timeDifferenceOffsetDefault = 300000;
                	// a list of alarm time per position
                    def timeDifferenceOffsetPositionMap = [5:43200000,7:43200000,12:43200000];
                    // the mail recipients
                    def mailrecipients = ["tgsell@tik.ee.ethz.ch", "yuecel@tik.ee.ethz.ch", "beutel@tik.ee.ethz.ch"];
                    
                    if ( isdef('positionMap')) {
                    	for (entry in positionMap) {
                        	def timeDifference = System.currentTimeMillis() - entry.value;
                        	if (timeDifferenceOffsetPositionMap.containsKey(entry.key)) {
                        		timeDifferenceOffset = timeDifferenceOffsetPositionMap.get(entry.key)
                        	} else { timeDifferenceOffset = timeDifferenceOffsetDefault; }
                        	if (timeDifference > timeDifferenceOffset) {
                        		entry.remove();
                        		def logger = org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class);
                        		
                        		// Notify by email
                        		def emailTitle = "[PermaSense-GSN-Public] - WARNING: No more " + vsname + " messages received from position " + entry.key;
                        		def emailContent = "WARNING: No " + vsname + " messages received in the last " + (timeDifference/60000.0) + " minutes from device with position " + entry.key + ".";

								logger.warn(emailContent);
                        		sendEmail(mailrecipients, emailTitle, emailContent);
                        	}
                        }
                    }
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            <field name="GPS_RAW_DATA_VERSION" type="SMALLINT"/>
		    <field name="GPS_SAMPLE_COUNT" type="INTEGER"/>
		    <field name="GPS_SATS" type="INTEGER"/>
            <field name="GPS_RAW_DATA" type="binary"/>
            <field name="DATA_IMPORT_SOURCE" type="SMALLINT" />
        </output-structure>
    </processing-class>
    <description>muxed RAW GPS information from Dirruhorn deployment</description>
    <life-cycle pool-size="10" />
    <addressing>
        <predicate key="type">PermaSense Dirruhorn deployment</predicate>
        <predicate key="LATITUDE">46.121808</predicate>
        <predicate key="LONGITUDE">7.821777</predicate>
    </addressing>
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="remote-rest">
                    <predicate key="query">select * from Dirruhorn_GPS_RAW</predicate>
                    <predicate key="remote-contact-point">http://yosemite.ee.ethz.ch:22001/streaming/</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
