<virtual-sensor name="OSTest_MotionDetection__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
    		<init-params>
            <param name="persistant">true</param>
	    	<param name="scriptlet">
				<![CDATA[
				
					if ( ! isdef('positionMap')) { positionMap = [:]; }
          if (POSITION != null && GENERATION_TIME > System.currentTimeMillis()-2592000000) { positionMap.put(POSITION, System.currentTimeMillis()); }
				
					try {
						THRESHOLD = THRESHOLD_RAW_DATA;
						POLL_INTERVAL = POLL_INT_RAW_DATA;
						POLL_DURATION = POLL_DURATION_RAW_DATA;
						STD_X = STD_X_RAW_DATA;
						STD_Y = STD_Y_RAW_DATA;
						STD_Z = STD_Z_RAW_DATA;
						NUM_STOPPED = MOVING_RAW_DATA;
					}catch(Throwable e){
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
				]]>
	    	</param>
	    	<param name="period">120000</param>
        <param name="scriplet-periodic">
            <![CDATA[
            	// default alarm time after which an email is sent if no messages have been received
                def timeDifferenceOffsetDefault = 86400000;
            	// a list of alarm time per position
                def timeDifferenceOffsetPositionMap = [9999:600000];
                // the mail recipients
                def mailrecipients = ["osense@tik.ee.ethz.ch"];
                
                if ( isdef('positionMap')) {
                	def rmlist = [];
                	for (entry in positionMap) {
                    	def timeDifference = System.currentTimeMillis() - entry.value;
                    	def timeDifferenceOffset = timeDifferenceOffsetDefault;
                    	if (timeDifferenceOffsetPositionMap.containsKey(entry.key)) {
                    		timeDifferenceOffset = timeDifferenceOffsetPositionMap.get(entry.key);
                    	}
                    	if (timeDifference > timeDifferenceOffset) {
                    		// Notify by email
                    		def emailTitle = "[OSTest GSN] - WARNING: No more " + vsname + " data received from position " + entry.key;
                    		def emailContent = "WARNING: No " + vsname + " data received in the last " + (timeDifference/60000.0) + " minutes from device with position " + entry.key + ".";

						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).warn(emailContent);
                    		sendEmail(mailrecipients, emailTitle, emailContent);
                    		rmlist.add(entry.key)
                    	}
                    }
                    positionMap.keySet().removeAll( rmlist as Set );
                }
            ]]>
        </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" />
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            <field name="THRESHOLD" type="DOUBLE" />
            <field name="POLL_INTERVAL" type="DOUBLE" unit="s" />
            <field name="POLL_DURATION" type="DOUBLE" unit="s" />
            <field name="STD_X" type="DOUBLE" />
            <field name="STD_Y" type="DOUBLE" />
            <field name="STD_Z" type="DOUBLE" />
            <field name="NUM_STOPPED" type="INTEGER" />
        </output-structure>
    </processing-class>
    <description>show Navigation GPS information from the OSTest deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">select * from OSTest_MotionDetection__muxed__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
