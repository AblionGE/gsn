<virtual-sensor name="Jungfraujoch_BackLogStatus_Dynamic__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="position_mapping" />
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
                	if (POSITION != null && GENERATION_TIME > System.currentTimeMillis()-2592000000) {
                    // the mail recipients for error and exception counter increase
                    def mailrecipients = ["gsn-notification@tik.ee.ethz.ch"];
                    
                	if ( ! isdef('lastErrorCounterMap')) { lastErrorCounterMap = [:]; }
                	if (lastErrorCounterMap.containsKey(POSITION)) {
                		if ( GENERATION_TIME > lastErrorCounterMap.get(POSITION)[1] ) {
                			if ( ERROR_COUNTER > lastErrorCounterMap.get(POSITION)[0] ) {
                        		// Notify by email
                        		def emailTitle = "[PermaSense-GSN-Public] - ERROR: BackLog error counter increased (vs=" + vsname + ", pos=" + POSITION + ")";
                        		def emailContent = "ERROR: BackLog error counter increased by " + (ERROR_COUNTER-lastErrorCounterMap.get(POSITION)[0]) + " to " + ERROR_COUNTER + " on position " + POSITION + " at " + vsname + ".";

								org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).warn(emailContent);
                        		sendEmail(mailrecipients, emailTitle, emailContent);
                			}
                			lastErrorCounterMap.put(POSITION, [ERROR_COUNTER, GENERATION_TIME]);
                		}
                	} else { lastErrorCounterMap.put(POSITION, [ERROR_COUNTER, GENERATION_TIME]); }
                    
                	if ( ! isdef('lastExceptionCounterMap')) { lastExceptionCounterMap = [:]; }
                	if (lastExceptionCounterMap.containsKey(POSITION)) {
                		if ( GENERATION_TIME > lastExceptionCounterMap.get(POSITION)[1] ) {
                			if ( EXCEPTION_COUNTER > lastExceptionCounterMap.get(POSITION)[0] ) {
                        		// Notify by email
                        		def emailTitle = "[PermaSense-GSN-Public] - EXCEPTION: BackLog exception counter increased (vs=" + vsname + ", pos=" + POSITION + ")";
                        		def emailContent = "EXCEPTION: BackLog exception counter increased by " + (EXCEPTION_COUNTER-lastExceptionCounterMap.get(POSITION)[0]) + " to " + EXCEPTION_COUNTER + " on position " + POSITION + " at " + vsname + ".";

								org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).warn(emailContent);
                        		sendEmail(mailrecipients, emailTitle, emailContent);
                			}
                			lastExceptionCounterMap.put(POSITION, [EXCEPTION_COUNTER, GENERATION_TIME]);
                		}
                	} else { lastExceptionCounterMap.put(POSITION, [EXCEPTION_COUNTER, GENERATION_TIME]); }
                
                    if ( ! isdef('positionMap')) { positionMap = [:]; }
                    positionMap.put(POSITION, System.currentTimeMillis());
                    }
                ]]>
            </param>
            <param name="period">150000</param>
            <param name="scriplet-periodic">
                <![CDATA[
                	// default alarm time after which an email is sent if no messages have been received
                    def timeDifferenceOffsetDefault = 300000;
                	// a list of alarm time per position
                    def timeDifferenceOffsetPositionMap = [:];
                    // the mail recipients
                    def mailrecipients = ["gsn-notification@tik.ee.ethz.ch"];
                    
                    if ( isdef('positionMap')) {
                    	def rmlist = [];
                    	for (entry in positionMap) {
                        	def timeDifference = System.currentTimeMillis() - entry.value;
                        	def timeDifferenceOffset = timeDifferenceOffsetDefault;
                        	if (timeDifferenceOffsetPositionMap.containsKey(entry.key)) {
                        		timeDifferenceOffset = timeDifferenceOffsetPositionMap.get(entry.key);
                        	}
                        	if (timeDifference > timeDifferenceOffset) {
                        		// Notify by email
                        		def emailTitle = "[PermaSense-GSN-Public] - WARNING: No more " + vsname + " messages received from position " + entry.key;
                        		def emailContent = "WARNING: No " + vsname + " messages received in the last " + (timeDifference/60000.0) + " minutes from device with position " + entry.key + ".";

								org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).warn(emailContent);
                        		sendEmail(mailrecipients, emailTitle, emailContent);
                        		rmlist.add(entry.key)
                        	}
                        }
                        positionMap.keySet().removeAll( rmlist as Set );
                    }
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            
            <field name="UPTIME" type="INTEGER" unit="relatime" />
            <field name="ERROR_COUNTER" type="INTEGER" />
            <field name="EXCEPTION_COUNTER" type="INTEGER" />
            
            <field name="GSN_PLUGIN_MSG_IN_COUNTER" type="INTEGER" />
            <field name="GSN_PLUGIN_MSG_OUT_COUNTER" type="INTEGER" />
            <field name="GSN_PLUGIN_MSG_ACK_IN_COUNTER" type="INTEGER" />
            <field name="GSN_PING_OUT_COUNTER" type="INTEGER" />
            <field name="GSN_PING_ACK_IN_COUNTER" type="INTEGER" />
            <field name="GSN_PING_IN_COUNTER" type="INTEGER" />
            <field name="GSN_PING_ACK_OUT_COUNTER" type="INTEGER" />
            <field name="GSN_CONNECTION_LOSSES" type="INTEGER" />
            
            <field name="DB_ENTRIES" type="INTEGER" />
            <field name="DB_SIZE" type="INTEGER" unit="kB" />
            <field name="DB_STORE_COUNTER" type="INTEGER" />
            <field name="DB_REMOVE_COUNTER" type="INTEGER" />
            <field name="DB_STORE_TIME_MIN" type="INTEGER" unit="ms" />
            <field name="DB_STORE_TIME_MEAN" type="INTEGER" unit="ms" />
            <field name="DB_STORE_TIME_MAX" type="INTEGER" unit="ms" />
            <field name="DB_REMOVE_TIME_MIN" type="INTEGER" unit="ms" />
            <field name="DB_REMOVE_TIME_MEAN" type="INTEGER" unit="ms" />
            <field name="DB_REMOVE_TIME_MAX" type="INTEGER" unit="ms" />
            
			<field name="SCHEDULE_CREATED" type="BIGINT" unit="unixtime" />
			<field name="SCHEDULE_PLUG_ACTION_COUNTER" type="INTEGER" />
			<field name="SCHEDULE_SCRIPT_EXEC_COUNTER" type="INTEGER" />
            
			<field name="PLUG_FIN_IN_TIME_COUNTER" type="INTEGER" />
			<field name="PLUG_NOT_FIN_IN_TIME_COUNTER" type="INTEGER" />
			<field name="SCRIPT_FIN_SUC_IN_TIME_COUNTER" type="INTEGER" />
			<field name="SCRIPT_FIN_UNSUC_IN_TIME_COUNTER" type="INTEGER" />
			<field name="SCRIPT_NOT_FIN_IN_TIME_COUNTER" type="INTEGER" />

			<field name="TOS_MSG_RECV_COUNTER" type="INTEGER" />
			<field name="TOS_ACK_SEND_COUNTER" type="INTEGER" />
			<field name="TOS_MSG_SEND_COUNTER" type="INTEGER" />

            <field name="VM_PEAK" type="INTEGER" unit="kB" />
            <field name="VM_SIZE" type="INTEGER" unit="kB" />
            <field name="VM_LCK" type="INTEGER" unit="kB" />
            <field name="VM_HWM" type="INTEGER" unit="kB" />
            <field name="VM_RSS" type="INTEGER" unit="kB" />
            <field name="VM_DATA" type="INTEGER" unit="kB" />
            <field name="VM_STK" type="INTEGER" unit="kB" />
            <field name="VM_EXE" type="INTEGER" unit="kB" />
            <field name="VM_LIB" type="INTEGER" unit="kB" />
            <field name="VM_PTE" type="INTEGER" unit="kB" />
            <field name="THREADS" type="INTEGER" />
            <field name="VOLUNTARY_CTXT_SWITCHES" type="INTEGER" />
            <field name="NONVOLUNTARY_CTXT_SWITCHES" type="INTEGER" />
			
            <field name="RUSAGE_UTIME" type="DOUBLE" unit="relatime" />
            <field name="RUSAGE_STIME" type="DOUBLE" unit="relatime" />
            <field name="RUSAGE_MINFLT" type="INTEGER" />
            <field name="RUSAGE_MAJFLT" type="INTEGER" />
            <field name="RUSAGE_NVCSW" type="INTEGER" />
            <field name="RUSAGE_NIVCSW" type="INTEGER" />
            <field name="DATA_IMPORT_SOURCE" type="SMALLINT" />
        </output-structure>
    </processing-class>
    <description>dynamic status information of BackLog from Jungfraujoch deployment</description>
    <life-cycle pool-size="10" />
    <addressing>
        <predicate key="type">PermaSense Jungfraujoch deployment</predicate>
        <predicate key="LATITUDE">46.547451</predicate>
        <predicate key="LONGITUDE">7.982092</predicate>
    </addressing>
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="remote-rest">
                    <predicate key="query"> select * from Jungfraujoch_BackLogStatus_Dynamic</predicate>
                    <predicate key="remote-contact-point">http://whymper.ee.ethz.ch:22001/streaming/</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
