<virtual-sensor name="ETZ_BackLogStatus_Dynamic" priority="10" statistics="true" >
    <processing-class>
        <class-name>gsn.processor.ScriptletProcessor</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
                    // the mail recipients for error and exception counter increase
                    def mailrecipients = ["tgsell@tik.ee.ethz.ch"];
                    
                	if ( ! isdef('lastErrorCounterMap')) { lastErrorCounterMap = [:]; }
                	if (lastErrorCounterMap.containsKey(DEVICE_ID)) {
                		if ( ERROR_COUNTER > lastErrorCounterMap.get(DEVICE_ID) ) {
                        	// Notify by email
                        	def emailTitle = "[PermaSense-GSN-Test] - ERROR: BackLog error counter increased (vs=" + vsname + ", id=" + DEVICE_ID + ")";
                        	def emailContent = "ERROR: BackLog error counter increased by " + (ERROR_COUNTER-lastErrorCounterMap.get(DEVICE_ID)) + " on device id " + DEVICE_ID + " at " + vsname + ".";

                        	sendEmail(mailrecipients, emailTitle, emailContent);
                			lastErrorCounterMap.put(DEVICE_ID, ERROR_COUNTER);
                		}
                	} else { lastErrorCounterMap.put(DEVICE_ID, ERROR_COUNTER); }
                    
                	if ( ! isdef('lastExceptionCounterMap')) { lastExceptionCounterMap = [:]; }
                	if (lastExceptionCounterMap.containsKey(DEVICE_ID)) {
                		if ( EXCEPTION_COUNTER > lastExceptionCounterMap.get(DEVICE_ID) ) {
                        	// Notify by email
                        	def emailTitle = "[PermaSense-GSN-Test] - EXCEPTION: BackLog exception counter increased (vs=" + vsname + ", id=" + DEVICE_ID + ")";
                        	def emailContent = "EXCEPTION: BackLog exception counter increased by " + (EXCEPTION_COUNTER-lastExceptionCounterMap.get(DEVICE_ID)) + " on device id " + DEVICE_ID + " at " + vsname + ".";

                        	sendEmail(mailrecipients, emailTitle, emailContent);
                			lastExceptionCounterMap.put(DEVICE_ID, EXCEPTION_COUNTER);
                		}
                	} else { lastExceptionCounterMap.put(DEVICE_ID, EXCEPTION_COUNTER); }
                
                    if ( ! isdef('deviceIdMap')) { deviceIdMap = [:]; }
                    deviceIdMap.put(DEVICE_ID, System.currentTimeMillis());
                ]]>
            </param>
            <param name="period">150000</param>
            <param name="scriplet-periodic">
                <![CDATA[
                	// default alarm time after which an email is sent if no messages have been received
                    def timeDifferenceOffsetDefault = 300000;
                	// a list of alarm time per device id
                    def timeDifferenceOffsetDevicIdMap = [5006:3600000,5008:3600000];
                    // the mail recipients
                    def mailrecipients = ["tgsell@tik.ee.ethz.ch"];
                    
                    if ( isdef('deviceIdMap')) {
                    	for (entry in deviceIdMap) {
                        	def timeDifference = System.currentTimeMillis() - entry.value;
                        	if (timeDifferenceOffsetDevicIdMap.containsKey(entry.key)) {
                        		timeDifferenceOffset = timeDifferenceOffsetDevicIdMap.get(entry.key)
                        	} else { timeDifferenceOffset = timeDifferenceOffsetDefault; }
                        	if (timeDifference > timeDifferenceOffset) {
                        		deviceIdMap.remove(entry.key);
                        		def logger = org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class);
                        		
                        		// Notify by email
                        		def emailTitle = "[PermaSense-GSN-Test] - WARNING: No more " + vsname + " messages received from device id " + entry.key;
                        		def emailContent = "WARNING: No " + vsname + " messages received in the last " + (timeDifference/60000.0) + " minutes from device with id " + entry.key + ".";

								logger.warn(emailContent);
                        		sendEmail(mailrecipients, emailTitle, emailContent);
                        	}
                        }
                    }
                ]]>
            </param>
        </init-params>
        <web-input password="test">
            <command name="resend_backlogged_data">
                <field name="core_station" type="*text" defaultvalue="65535">the device_id of the receiving core station</field>
            </command>
        </web-input>
        <output-structure>
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            
            <field name="UPTIME" type="INTEGER" unit="relatime" />
            <field name="ERROR_COUNTER" type="INTEGER" />
            <field name="EXCEPTION_COUNTER" type="INTEGER" />
            
            <field name="GSN_PLUGIN_MSG_IN_COUNTER" type="INTEGER" />
            <field name="GSN_PLUGIN_MSG_OUT_COUNTER" type="INTEGER" />
            <field name="GSN_PLUGIN_MSG_ACK_IN_COUNTER" type="INTEGER" />
            <field name="GSN_PING_OUT_COUNTER" type="INTEGER" />
            <field name="GSN_PING_ACK_IN_COUNTER" type="INTEGER" />
            <field name="GSN_PING_IN_COUNTER" type="INTEGER" />
            <field name="GSN_PING_ACK_OUT_COUNTER" type="INTEGER" />
            <field name="GSN_CONNECTION_LOSSES" type="INTEGER" />
            
            <field name="DB_ENTRIES" type="INTEGER" />
            <field name="DB_SIZE" type="INTEGER" unit="kB" />
            <field name="DB_STORE_COUNTER" type="INTEGER" />
            <field name="DB_REMOVE_COUNTER" type="INTEGER" />
            <field name="DB_STORE_TIME_MIN" type="INTEGER" unit="ms" />
            <field name="DB_STORE_TIME_MEAN" type="INTEGER" unit="ms" />
            <field name="DB_STORE_TIME_MAX" type="INTEGER" unit="ms" />
            <field name="DB_REMOVE_TIME_MIN" type="INTEGER" unit="ms" />
            <field name="DB_REMOVE_TIME_MEAN" type="INTEGER" unit="ms" />
            <field name="DB_REMOVE_TIME_MAX" type="INTEGER" unit="ms" />
            
			<field name="SCHEDULE_CREATED" type="BIGINT" unit="unixtime" />
			<field name="SCHEDULE_PLUG_ACTION_COUNTER" type="INTEGER" />
			<field name="SCHEDULE_SCRIPT_EXEC_COUNTER" type="INTEGER" />
            
			<field name="PLUG_FIN_IN_TIME_COUNTER" type="INTEGER" />
			<field name="PLUG_NOT_FIN_IN_TIME_COUNTER" type="INTEGER" />
			<field name="SCRIPT_FIN_SUC_IN_TIME_COUNTER" type="INTEGER" />
			<field name="SCRIPT_FIN_UNSUC_IN_TIME_COUNTER" type="INTEGER" />
			<field name="SCRIPT_NOT_FIN_IN_TIME_COUNTER" type="INTEGER" />

			<field name="TOS_MSG_RECV_COUNTER" type="INTEGER" />
			<field name="TOS_ACK_SEND_COUNTER" type="INTEGER" />
			<field name="TOS_MSG_SEND_COUNTER" type="INTEGER" />

            <field name="VM_PEAK" type="INTEGER" unit="kB" />
            <field name="VM_SIZE" type="INTEGER" unit="kB" />
            <field name="VM_LCK" type="INTEGER" unit="kB" />
            <field name="VM_HWM" type="INTEGER" unit="kB" />
            <field name="VM_RSS" type="INTEGER" unit="kB" />
            <field name="VM_DATA" type="INTEGER" unit="kB" />
            <field name="VM_STK" type="INTEGER" unit="kB" />
            <field name="VM_EXE" type="INTEGER" unit="kB" />
            <field name="VM_LIB" type="INTEGER" unit="kB" />
            <field name="VM_PTE" type="INTEGER" unit="kB" />
            <field name="THREADS" type="INTEGER" />
            <field name="VOLUNTARY_CTXT_SWITCHES" type="INTEGER" />
            <field name="NONVOLUNTARY_CTXT_SWITCHES" type="INTEGER" />
			
            <field name="RUSAGE_UTIME" type="DOUBLE" unit="relatime" />
            <field name="RUSAGE_STIME" type="DOUBLE" unit="relatime" />
            <field name="RUSAGE_MINFLT" type="INTEGER" />
            <field name="RUSAGE_MAJFLT" type="INTEGER" />
            <field name="RUSAGE_NVCSW" type="INTEGER" />
            <field name="RUSAGE_NIVCSW" type="INTEGER" />
            <field name="DATA_IMPORT_SOURCE" type="SMALLINT" />
        </output-structure>
    </processing-class>
    <description>show dynamic status information of the BackLogs and send commands to the ETZ deployment</description>
    <life-cycle pool-size="10" />
    <addressing>
        <predicate key="type">PermaSense ETZ test deployment</predicate>
        <predicate key="LATITUDE">47.377326</predicate>
        <predicate key="LONGITUDE">8.552935</predicate>
    </addressing>
    <storage />
    <streams>
	<stream name="data1">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                    <predicate key="remote-connection">permasense-etzg-bs01.ethz.ch:9003</predicate>
                    <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data2">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                    <predicate key="remote-connection">permasense-etzl-bs01.ethz.ch:9003</predicate>
                    <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data3">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                    <predicate key="remote-connection">permasense-etz-gps01.ethz.ch:9003</predicate>
                    <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data5">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">tik-gumstix-dyn-01.ethz.ch:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data6">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">tik-gumstix-dyn-02.ethz.ch:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data7">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">tik-gumstix-dyn-03.ethz.ch:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data8">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">tik-gumstix-dyn-04.ethz.ch:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data9">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">nb-tgsell.ethz.ch:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data10">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">pc-5225.ethz.ch:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data11">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">permasense-etz-cam01.ethz.ch:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>

        <stream name="data12">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                    <predicate key="remote-connection">permasense-etz-gps04.ethz.ch:9003</predicate>
                    <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>

        <stream name="data13">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                    <predicate key="remote-connection">permasense-etz-gps06.ethz.ch:9003</predicate>
                    <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data14">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                    <predicate key="remote-connection">permasense-etz-gps05.ethz.ch:9003</predicate>
                    <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>

        <stream name="data15">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                    <predicate key="remote-connection">permasense-etz-gps02.ethz.ch:9003</predicate>
                    <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>

        <stream name="data16">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">xsense-caa-etz-2.dyndns.biz:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>


        <stream name="data17">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="backlog">
                     <predicate key="remote-connection">xsense-caa-etz-1.dyndns.biz:9003</predicate>
                     <predicate key="plugin-classname">gsn.wrappers.backlog.plugins.BackLogStatusPlugin</predicate>
                    <predicate key="status-data-type">dynamic</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>

        </streams>
</virtual-sensor>
