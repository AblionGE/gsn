<virtual-sensor name="OpenSense_MiniDisc_EMB__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
    		<init-params>
            <param name="persistant">true</param>
	    	<param name="scriptlet">
	    	<![CDATA[
	    		
	    		if ( ! isdef('positionMap')) { positionMap = [:]; }
          if (POSITION != null && GENERATION_TIME > System.currentTimeMillis()-2592000000) { positionMap.put(POSITION, System.currentTimeMillis()); }
	    	
					try {
          
            // Minidisc Data
            String[] tokens = MINIDISC_RAW_DATA.split();
            if (tokens.length == 11) {
              if (tokens[0] != null && tokens[0].size() != 0 && tokens[0].isDouble()) {
                NUMBER = tokens[0].toDouble();
              }
              else {
                NUMBER = null;
              }
              if (tokens[1] != null && tokens[1].size() != 0 && tokens[1].isDouble()) {
                DIAM = tokens[1].toDouble();
              }
              else {
                DIAM = null;
              }
              if (tokens[2] != null && tokens[2].size() != 0 && tokens[2].isDouble()) {
                LDSA = tokens[2].toDouble();
              }
              else {
                LDSA = null;
              }
              if (tokens[3] != null && tokens[3].size() != 0 && tokens[3].isDouble()) {
                DIFFUSION = tokens[3].toDouble();
              }
              else {
                DIFFUSION = null;
              }
              if (tokens[4] != null && tokens[4].size() != 0 && tokens[4].isDouble()) {
                FILTER = tokens[4].toDouble();
              }
              else {
                FILTER = null;
              }
              if (tokens[5] != null && tokens[5].size() != 0 && tokens[5].isDouble()) {
                UCOR = tokens[5].toDouble();
              }
              else {
                UCOR = null;
              }
              if (tokens[6] != null && tokens[6].size() != 0 && tokens[6].isDouble()) {
                RECHARGE = tokens[6].toDouble();
              }
              else {
                RECHARGE = null;
              }
              if (tokens[7] != null && tokens[7].size() != 0 && tokens[7].isDouble()) {
                FLOW = tokens[7].toDouble();
              }
              else {
                FLOW = null;
              }
              if (tokens[8] != null && tokens[8].size() != 0 && tokens[8].isDouble()) {
                TEMP = tokens[8].toDouble();
              }
              else {
                TEMP = null;
              }
              if (tokens[9] != null && tokens[9].size() != 0 && tokens[9].isDouble()) {
                SUPPLY = tokens[9].toDouble();
              }
              else {
                SUPPLY = null;
              }
              if (tokens[10] != null && tokens[10].size() != 0 && tokens[10].isInteger()) {
                STATUS = tokens[10].toInteger();
              }
              else {
                STATUS = null;
              }
              
            }
          
            // GPS Data
						if (UTC_RAW_DATA != null && UTC_RAW_DATA.size() != 0) {
							UTC_POS_TIME = UTC_RAW_DATA.toDouble() as int;
						}
						else {
							UTC_POS_TIME = null;
						}
						if (LAT_RAW_DATA != null && LAT_RAW_DATA.size() != 0) {
							LATITUDE = LAT_RAW_DATA.toDouble();
						}
						else {
							LATITUDE = null;
						}
						LAT_HEMISPHERE = LAT_N_RAW_DATA;
						if (LONG_RAW_DATA != null && LONG_RAW_DATA.size() != 0) {
							LONGITUDE = LONG_RAW_DATA.toDouble();
						}
						else {
							LONGITUDE = null;
						}
						LONG_HEMISPHERE = LONG_N_RAW_DATA;
						if (QUAL_RAW_DATA != null && QUAL_RAW_DATA.size() != 0) {
							QUALITY = QUAL_RAW_DATA.toInteger();
						}
						else {
							QUALITY = null;
						}
						if (SAT_RAW_DATA != null && SAT_RAW_DATA.size() != 0) {
							NR_SATELLITES = SAT_RAW_DATA.toInteger();
						}
						else {
							NR_SATELLITES = null;
						}
						if (HDOP_RAW_DATA != null && HDOP_RAW_DATA.size() != 0) {
							HDOP = HDOP_RAW_DATA.toDouble();
						}
						else {
							HDOP = null;
						}
						if (GEO_HEIGHT_RAW_DATA != null && GEO_HEIGHT_RAW_DATA.size() != 0) {
							GEOID_HEIGHT = GEO_HEIGHT_RAW_DATA.toDouble();
						}
						else {
							GEOID_HEIGHT = null;
						}
						GEOID_HEIGHT_UNIT = GEO_HEIGHT_U_RAW_DATA;
						if (GEO_SEP_RAW_DATA != null && GEO_SEP_RAW_DATA.size() != 0) {
							GEOID_SEP = GEO_SEP_RAW_DATA.toDouble();
						}
						else {
							GEOID_SEP = null;
						}
						GEOID_SEP_UNIT = GEO_SEP_U_RAW_DATA;
					}catch(Throwable e){
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
				]]>
	    	</param>
	    	<param name="period">120000</param>
        <param name="scriplet-periodic">
            <![CDATA[
            	// default alarm time after which an email is sent if no messages have been received
                def timeDifferenceOffsetDefault = 86400000;
            	// a list of alarm time per position
                def timeDifferenceOffsetPositionMap = [9999:600000];
                // the mail recipients
                def mailrecipients = ["osense@tik.ee.ethz.ch"];
                
                if ( isdef('positionMap')) {
                	def rmlist = [];
                	for (entry in positionMap) {
                    	def timeDifference = System.currentTimeMillis() - entry.value;
                    	def timeDifferenceOffset = timeDifferenceOffsetDefault;
                    	if (timeDifferenceOffsetPositionMap.containsKey(entry.key)) {
                    		timeDifferenceOffset = timeDifferenceOffsetPositionMap.get(entry.key);
                    	}
                    	if (timeDifference > timeDifferenceOffset) {
                    		// Notify by email
                    		def emailTitle = "[OpenSense GSN] - WARNING: No more " + vsname + " data received from position " + entry.key;
                    		def emailContent = "WARNING: No " + vsname + " data received in the last " + (timeDifference/60000.0) + " minutes from device with position " + entry.key + ".";

						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).warn(emailContent);
                    		sendEmail(mailrecipients, emailTitle, emailContent);
                    		rmlist.add(entry.key)
                    	}
                    }
                    positionMap.keySet().removeAll( rmlist as Set );
                }
            ]]>
        </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            <field name="UTC_POS_TIME" type="INTEGER"/>
            <field name="LATITUDE" type="DOUBLE" />
            <field name="LAT_HEMISPHERE" type="VARCHAR(32)" />
            <field name="LONGITUDE" type="DOUBLE" />
            <field name="LONG_HEMISPHERE" type="VARCHAR(32)" />
            <field name="QUALITY" type="INTEGER" />
            <field name="NR_SATELLITES" type="INTEGER" />
            <field name="HDOP" type="DOUBLE" />
            <field name="GEOID_HEIGHT" type="DOUBLE" />
            <field name="GEOID_HEIGHT_UNIT" type="VARCHAR(32)" />
            <field name="GEOID_SEP" type="DOUBLE" />
            <field name="GEOID_SEP_UNIT" type="VARCHAR(32)" />
            
            <field name="NUMBER" type="DOUBLE" unit="particle/cm^3" />
            <field name="DIAM" type="DOUBLE" unit="nm" />
            <field name="LDSA" type="DOUBLE" unit="um^2/cm^3" />
            <field name="DIFFUSION" type="DOUBLE" unit="fA" />
            <field name="FILTER" type="DOUBLE" unit="fA" />
            <field name="UCOR" type="DOUBLE" unit="kV" />
            <field name="RECHARGE" type="DOUBLE" unit="nA" />
            <field name="FLOW" type="DOUBLE" unit="l/m" />
            <field name="TEMP" type="DOUBLE" unit="C" />
            <field name="SUPPLY" type="DOUBLE" unit="V" />
            <field name="STATUS" type="INTEGER"/>
            
            <field name="DATA_IMPORT_SOURCE" type="SMALLINT" />
        </output-structure>
    </processing-class>
    <description>Minidisc data from the OpenSense deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">select * from OpenSense_MiniDisc_EMB__muxed__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
