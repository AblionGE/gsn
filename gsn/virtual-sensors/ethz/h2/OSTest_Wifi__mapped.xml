<virtual-sensor name="OSTest_Wifi__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
    		<init-params>
            <param name="persistant">true</param>
	    	<param name="scriptlet">
	    		<![CDATA[
                	// Convert the dBm to Watts.
                	def dbmToWatt(double powerDbm) {
                    	double powerW = Math.pow(10, (powerDbm/10.0))*0.001;
                    	return powerW;
                	}

                	// And back to dBm.
                	def wattToDbm(double powerW) {
                    	double powerDbm = 10*Math.log10(powerW/0.001);
                    	return powerDbm;
                	}

                	// Returns the E filed strength.
                	// rssi in dBm, freq in Hz, gain linear.
                	def rssiToFieldStrength(double rssi, double freq, double gain) {
                    	double C = 299792458; // Speed of light
                    	double Z0 = 376.73; // Free space impedance
          
                    	double powerW = dbmToWatt(rssi);
                    	double wavelength = C/freq;
                    	double fieldStrength = Math.sqrt(powerW*Z0/(gain*Math.pow(wavelength,2)/(4*Math.PI)));

                    	return fieldStrength;
                	}

                    try {
                        // Wifi Data
                        String[] tokens = WIFI_RAW_DATA.split(",");
                        if (tokens.length == 40) {
                            def frequencyArray = new int[20];
                            def rssiArray = new double[20];
                            def fieldStrengthArray = new double[20];

                            def rssiSumWatt2GHz = 0.0;
                            def fieldStrengthSumSquared2GHz = 0.0;
                            def rssiSumWatt5GHz = 0.0;
                            def fieldStrengthSumSquared5GHz = 0.0;

                            for(int i = 0; i < 10; i++) {
                                frequencyArray[i] = tokens[i*2].toInteger();
                                rssiArray[i] = tokens[i*2 + 1].toDouble();
                                fieldStrengthArray[i] = rssiToFieldStrength(rssiArray[i], (frequencyArray[i]*1000000).toDouble(), 1.0);

                                rssiSumWatt2GHz += dbmToWatt(rssiArray[i]);
                                fieldStrengthSumSquared2GHz += Math.pow(fieldStrengthArray[i], 2);
                            }

                            for(int i = 0; i < 10; i++) {
                                frequencyArray[10 + i] = tokens[20 + i*2].toInteger();
                                rssiArray[10 + i] = tokens[20 + i*2 + 1].toDouble();
                                fieldStrengthArray[10 + i] = rssiToFieldStrength(rssiArray[10 + i], (frequencyArray[10 + i]*1000000).toDouble(), 1.0);

                                rssiSumWatt5GHz += dbmToWatt(rssiArray[10 + i]);
                                fieldStrengthSumSquared5GHz += Math.pow(fieldStrengthArray[10 + i], 2);
                            }

                            FREQUENCY_01 = frequencyArray[0];
                            RSSI_01 = rssiArray[0];
                            FIELD_STRENGTH_01 = fieldStrengthArray[0];
                            FREQUENCY_02 = frequencyArray[1];
                            RSSI_02 = rssiArray[1];
                            FIELD_STRENGTH_02 = fieldStrengthArray[1];
                            FREQUENCY_03 = frequencyArray[2];
                            RSSI_03 = rssiArray[2];
                            FIELD_STRENGTH_03 = fieldStrengthArray[2];
                            FREQUENCY_04 = frequencyArray[3];
                            RSSI_04 = rssiArray[3];
                            FIELD_STRENGTH_04 = fieldStrengthArray[3];
                            FREQUENCY_05 = frequencyArray[4];
                            RSSI_05 = rssiArray[4];
                            FIELD_STRENGTH_05 = fieldStrengthArray[4];
                            FREQUENCY_06 = frequencyArray[5];
                            RSSI_06 = rssiArray[5];
                            FIELD_STRENGTH_06 = fieldStrengthArray[5];
                            FREQUENCY_07 = frequencyArray[6];
                            RSSI_07 = rssiArray[6];
                            FIELD_STRENGTH_07 = fieldStrengthArray[6];
                            FREQUENCY_08 = frequencyArray[7];
                            RSSI_08 = rssiArray[7];
                            FIELD_STRENGTH_08 = fieldStrengthArray[7];
                            FREQUENCY_09 = frequencyArray[8];
                            RSSI_09 = rssiArray[8];
                            FIELD_STRENGTH_09 = fieldStrengthArray[8];
                            FREQUENCY_10 = frequencyArray[9];
                            RSSI_10 = rssiArray[9];
                            FIELD_STRENGTH_10 = fieldStrengthArray[9];
                            FREQUENCY_11 = frequencyArray[10];
                            RSSI_11 = rssiArray[10];
                            FIELD_STRENGTH_11 = fieldStrengthArray[10];
                            FREQUENCY_12 = frequencyArray[11];
                            RSSI_12 = rssiArray[11];
                            FIELD_STRENGTH_12 = fieldStrengthArray[11];
                            FREQUENCY_13 = frequencyArray[12];
                            RSSI_13 = rssiArray[12];
                            FIELD_STRENGTH_13 = fieldStrengthArray[12];
                            FREQUENCY_14 = frequencyArray[13];
                            RSSI_14 = rssiArray[13];
                            FIELD_STRENGTH_14 = fieldStrengthArray[13];
                            FREQUENCY_15 = frequencyArray[14];
                            RSSI_15 = rssiArray[14];
                            FIELD_STRENGTH_15 = fieldStrengthArray[14];
                            FREQUENCY_16 = frequencyArray[15];
                            RSSI_16 = rssiArray[15];
                            FIELD_STRENGTH_16 = fieldStrengthArray[15];
                            FREQUENCY_17 = frequencyArray[16];
                            RSSI_17 = rssiArray[16];
                            FIELD_STRENGTH_17 = fieldStrengthArray[16];
                            FREQUENCY_18 = frequencyArray[17];
                            RSSI_18 = rssiArray[17];
                            FIELD_STRENGTH_18 = fieldStrengthArray[17];
                            FREQUENCY_19 = frequencyArray[18];
                            RSSI_19 = rssiArray[18];
                            FIELD_STRENGTH_19 = fieldStrengthArray[18];
                            FREQUENCY_20 = frequencyArray[19];
                            RSSI_20 = rssiArray[19];
                            FIELD_STRENGTH_20 = fieldStrengthArray[19];

                            RSSI_SUM_2_4GHZ = wattToDbm(rssiSumWatt2GHz);
                            FIELD_STRENGTH_SUM_2_4GHZ = Math.sqrt(fieldStrengthSumSquared2GHz);
                            RSSI_SUM_5GHZ = wattToDbm(rssiSumWatt5GHz);
                            FIELD_STRENGTH_SUM_5GHZ = Math.sqrt(fieldStrengthSumSquared5GHz);
                        }
          
                        // GPS Data
						if (UTC_RAW_DATA != null && UTC_RAW_DATA.size() != 0) {
							UTC_POS_TIME = UTC_RAW_DATA.toDouble() as int;
						}
						else {
							UTC_POS_TIME = null;
						}
						if (LAT_RAW_DATA != null && LAT_RAW_DATA.size() != 0) {
							LATITUDE = LAT_RAW_DATA.toDouble();
						}
						else {
							LATITUDE = null;
						}
						LAT_HEMISPHERE = LAT_N_RAW_DATA;
						if (LONG_RAW_DATA != null && LONG_RAW_DATA.size() != 0) {
							LONGITUDE = LONG_RAW_DATA.toDouble();
						}
						else {
							LONGITUDE = null;
						}
						LONG_HEMISPHERE = LONG_N_RAW_DATA;
						if (QUAL_RAW_DATA != null && QUAL_RAW_DATA.size() != 0) {
							QUALITY = QUAL_RAW_DATA.toInteger();
						}
						else {
							QUALITY = null;
						}
						if (SAT_RAW_DATA != null && SAT_RAW_DATA.size() != 0) {
							NR_SATELLITES = SAT_RAW_DATA.toInteger();
						}
						else {
							NR_SATELLITES = null;
						}
						if (HDOP_RAW_DATA != null && HDOP_RAW_DATA.size() != 0) {
							HDOP = HDOP_RAW_DATA.toDouble();
						}
						else {
							HDOP = null;
						}
						if (GEO_HEIGHT_RAW_DATA != null && GEO_HEIGHT_RAW_DATA.size() != 0) {
							GEOID_HEIGHT = GEO_HEIGHT_RAW_DATA.toDouble();
						}
						else {
							GEOID_HEIGHT = null;
						}
						GEOID_HEIGHT_UNIT = GEO_HEIGHT_U_RAW_DATA;
						if (GEO_SEP_RAW_DATA != null && GEO_SEP_RAW_DATA.size() != 0) {
							GEOID_SEP = GEO_SEP_RAW_DATA.toDouble();
						}
						else {
							GEOID_SEP = null;
						}
						GEOID_SEP_UNIT = GEO_SEP_U_RAW_DATA;
					}catch(Throwable e){
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
				]]>
	    	</param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            <field name="UTC_POS_TIME" type="INTEGER"/>
            <field name="LATITUDE" type="DOUBLE" />
            <field name="LAT_HEMISPHERE" type="VARCHAR(32)" />
            <field name="LONGITUDE" type="DOUBLE" />
            <field name="LONG_HEMISPHERE" type="VARCHAR(32)" />
            <field name="QUALITY" type="INTEGER" />
            <field name="NR_SATELLITES" type="INTEGER" />
            <field name="HDOP" type="DOUBLE" />
            <field name="GEOID_HEIGHT" type="DOUBLE" />
            <field name="GEOID_HEIGHT_UNIT" type="VARCHAR(32)" />
            <field name="GEOID_SEP" type="DOUBLE" />
            <field name="GEOID_SEP_UNIT" type="VARCHAR(32)" />
            
            <field name="RSSI_SUM_2_4GHZ" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_SUM_2_4GHZ" type="DOUBLE" unit="V/m" />
            <field name="RSSI_SUM_5GHZ" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_SUM_5GHZ" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_01" type="INTEGER" unit="MHz"/>
            <field name="RSSI_01" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_01" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_02" type="INTEGER" unit="MHz"/>
            <field name="RSSI_02" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_02" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_03" type="INTEGER" unit="MHz"/>
            <field name="RSSI_03" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_03" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_04" type="INTEGER" unit="MHz"/>
            <field name="RSSI_04" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_04" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_05" type="INTEGER" unit="MHz"/>
            <field name="RSSI_05" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_05" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_06" type="INTEGER" unit="MHz"/>
            <field name="RSSI_06" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_06" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_07" type="INTEGER" unit="MHz"/>
            <field name="RSSI_07" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_07" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_08" type="INTEGER" unit="MHz"/>
            <field name="RSSI_08" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_08" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_09" type="INTEGER" unit="MHz"/>
            <field name="RSSI_09" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_09" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_10" type="INTEGER" unit="MHz"/>
            <field name="RSSI_10" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_10" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_11" type="INTEGER" unit="MHz"/>
            <field name="RSSI_11" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_11" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_12" type="INTEGER" unit="MHz"/>
            <field name="RSSI_12" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_12" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_13" type="INTEGER" unit="MHz"/>
            <field name="RSSI_13" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_13" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_14" type="INTEGER" unit="MHz"/>
            <field name="RSSI_14" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_14" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_15" type="INTEGER" unit="MHz"/>
            <field name="RSSI_15" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_15" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_16" type="INTEGER" unit="MHz"/>
            <field name="RSSI_16" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_16" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_17" type="INTEGER" unit="MHz"/>
            <field name="RSSI_17" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_17" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_18" type="INTEGER" unit="MHz"/>
            <field name="RSSI_18" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_18" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_19" type="INTEGER" unit="MHz"/>
            <field name="RSSI_19" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_19" type="DOUBLE" unit="V/m" />
            <field name="FREQUENCY_20" type="INTEGER" unit="MHz"/>
            <field name="RSSI_20" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_20" type="DOUBLE" unit="V/m" />
            
        </output-structure>
    </processing-class>
    <description>Wifi data from the OSTest deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">select * from OSTest_Wifi__muxed__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
