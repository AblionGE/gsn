<virtual-sensor name="OSTest_Gsm__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
    		<init-params>
            <param name="persistant">true</param>
	    	<param name="scriptlet">
	    	<![CDATA[
	    		
                // Convert the dBm to Watts.
                def dbmToWatt(double powerDbm) {
                    double powerW = Math.pow(10, (powerDbm/10.0))*0.001;
                    return powerW;
                }

                // And back to dBm.
                def wattToDbm(double powerW) {
                    double powerDbm = 10*Math.log10(powerW/0.001);
                    return powerDbm;
                }

                // Returns the E filed strength.
                // rssi in dBm, freq in Hz, gain linear.
                def rssiToFieldStrength(double rssi, double freq, double gain) {
                    double C = 299792458; // Speed of light
                    double Z0 = 376.73; // Free space impedance
          
                    double powerW = dbmToWatt(rssi);
                    double wavelength = C/freq;
                    double fieldStrength = Math.sqrt(powerW*Z0/(gain*Math.pow(wavelength,2)/(4*Math.PI)));

                    return fieldStrength;
                }

                // Returns the downlink frequency in MHz
                def arfcnToFrequency(int arfcn) {
                    // GSM 900
                    double downlink = 0
                    if (arfcn >= 0 && arfcn <= 124) {
                        downlink = 800 + 0.2 * arfcn + 45;
                    }
                    // GSM 1800
                    else if (arfcn >= 512 && arfcn <= 885) {
                        downlink = 1710.2 + 0.2 * (arfcn - 512) + 95;
                    }
                    return downlink
                }

	    		if ( ! isdef('positionMap')) { positionMap = [:]; }
                    if (POSITION != null && GENERATION_TIME > System.currentTimeMillis()-2592000000) { positionMap.put(POSITION, System.currentTimeMillis()); }
                    try {
                        // Gsm Data
                        String[] tokens = GSM_RAW_DATA.split(",");
                        if (tokens.length == 28) {
                            def lacArray = new int[7];
                            def cidArray = new int[7];
                            def arfcnArray = new int[7];
                            def frequencyArray = new double[7];
                            def rssiArray = new int[7];
                            def fieldStrengthArray = new double[7];

                            def rssiSumWatt900MHz = 0.0;
                            def fieldStrengthSumSquared900MHz = 0.0;
                            def rssiSumWatt1800MHz = 0.0;
                            def fieldStrengthSumSquared1800MHz = 0.0;

                            for(int i = 0; i < 7; i++) {
                                lacArray[i] = tokens[i*4].toInteger();
                                cidArray[i] = tokens[i*4 + 1].toInteger();
                                // Not all entries have to be filled, so ignore the ones without lac/cid.
                                if(lacArray[i] == 0 || cidArray[i] == 0) {
                                    lacArray[i] = 0;
                                    cidArray[i] = 0;
                                    arfcnArray[i] = 0;
                                    frequencyArray[i] = 0;
                                    rssiArray[i] = 0;
                                    fieldStrengthArray[i] = 0;
                                    continue;
                                }
                                arfcnArray[i] = tokens[i*4 + 2].toInteger();
                                frequencyArray[i] = arfcnToFrequency(arfcnArray[i]);
                                rssiArray[i] = tokens[i*4 + 3].toInteger();
                                fieldStrengthArray[i] = rssiToFieldStrength(rssiArray[i], (frequencyArray[i]*1000000).toDouble(), 1.0);

                                if(frequencyArray[i] < 1000) {
                                    rssiSumWatt900MHz += dbmToWatt(rssiArray[i]);
                                    fieldStrengthSumSquared900MHz += Math.pow(fieldStrengthArray[i], 2);
                                }
                                else {
                                    rssiSumWatt1800MHz += dbmToWatt(rssiArray[i]);
                                    fieldStrengthSumSquared1800MHz += Math.pow(fieldStrengthArray[i], 2);
                                }
                            }

                            LAC_1 = lacArray[0];
                            if(LAC_1 == 0) LAC_1 = null;
                            CID_1 = cidArray[0];
                            if(CID_1 == 0) CID_1 = null;
                            ARFCN_1 = arfcnArray[0];
                            if(ARFCN_1 == 0) ARFCN_1 = null;
                            FREQUENCY_1 = frequencyArray[0];
                            if(FREQUENCY_1 == 0) FREQUENCY_1 = null;
                            RSSI_1 = rssiArray[0];
                            if(RSSI_1 == 0) RSSI_1 = null;
                            FIELD_STRENGTH_1 = fieldStrengthArray[0];
                            if(FIELD_STRENGTH_1 == 0) FIELD_STRENGTH_1 = null;

                            LAC_2 = lacArray[1];
                            if(LAC_2 == 0) LAC_2 = null;
                            CID_2 = cidArray[1];
                            if(CID_2 == 0) CID_2 = null;
                            ARFCN_2 = arfcnArray[1];
                            if(ARFCN_2 == 0) ARFCN_2 = null;
                            FREQUENCY_2 = frequencyArray[1];
                            if(FREQUENCY_2 == 0) FREQUENCY_2 = null;
                            RSSI_2 = rssiArray[1];
                            if(RSSI_2 == 0) RSSI_2 = null;
                            FIELD_STRENGTH_2 = fieldStrengthArray[1];
                            if(FIELD_STRENGTH_2 == 0) FIELD_STRENGTH_2 = null;

                            LAC_3 = lacArray[2];
                            if(LAC_3 == 0) LAC_3 = null;
                            CID_3 = cidArray[2];
                            if(CID_3 == 0) CID_3 = null;
                            ARFCN_3 = arfcnArray[2];
                            if(ARFCN_3 == 0) ARFCN_3 = null;
                            FREQUENCY_3 = frequencyArray[2];
                            if(FREQUENCY_3 == 0) FREQUENCY_3 = null;
                            RSSI_3 = rssiArray[2];
                            if(RSSI_3 == 0) RSSI_3 = null;
                            FIELD_STRENGTH_3 = fieldStrengthArray[2];
                            if(FIELD_STRENGTH_3 == 0) FIELD_STRENGTH_3 = null;

                            LAC_4 = lacArray[3];
                            if(LAC_4 == 0) LAC_4 = null;
                            CID_4 = cidArray[3];
                            if(CID_4 == 0) CID_4 = null;
                            ARFCN_4 = arfcnArray[3];
                            if(ARFCN_4 == 0) ARFCN_4 = null;
                            FREQUENCY_4 = frequencyArray[3];
                            if(FREQUENCY_4 == 0) FREQUENCY_4 = null;
                            RSSI_4 = rssiArray[3];
                            if(RSSI_4 == 0) RSSI_4 = null;
                            FIELD_STRENGTH_4 = fieldStrengthArray[3];
                            if(FIELD_STRENGTH_4 == 0) FIELD_STRENGTH_4 = null;

                            LAC_5 = lacArray[4];
                            if(LAC_5 == 0) LAC_5 = null;
                            CID_5 = cidArray[4];
                            if(CID_5 == 0) CID_5 = null;
                            ARFCN_5 = arfcnArray[4];
                            if(ARFCN_5 == 0) ARFCN_5 = null;
                            FREQUENCY_5 = frequencyArray[4];
                            if(FREQUENCY_5 == 0) FREQUENCY_5 = null;
                            RSSI_5 = rssiArray[4];
                            if(RSSI_5 == 0) RSSI_5 = null;
                            FIELD_STRENGTH_5 = fieldStrengthArray[4];
                            if(FIELD_STRENGTH_5 == 0) FIELD_STRENGTH_5 = null;

                            LAC_6 = lacArray[5];
                            if(LAC_6 == 0) LAC_6 = null;
                            CID_6 = cidArray[5];
                            if(CID_6 == 0) CID_6 = null;
                            ARFCN_6 = arfcnArray[5];
                            if(ARFCN_6 == 0) ARFCN_6 = null;
                            FREQUENCY_6 = frequencyArray[5];
                            if(FREQUENCY_6 == 0) FREQUENCY_6 = null;
                            RSSI_6 = rssiArray[5];
                            if(RSSI_6 == 0) RSSI_6 = null;
                            FIELD_STRENGTH_6 = fieldStrengthArray[5];
                            if(FIELD_STRENGTH_6 == 0) FIELD_STRENGTH_6 = null;

                            LAC_7 = lacArray[6];
                            if(LAC_7 == 0) LAC_7 = null;
                            CID_7 = cidArray[6];
                            if(CID_7 == 0) CID_7 = null;
                            ARFCN_7 = arfcnArray[6];
                            if(ARFCN_7 == 0) ARFCN_7 = null;
                            FREQUENCY_7 = frequencyArray[6];
                            if(FREQUENCY_7 == 0) FREQUENCY_7 = null;
                            RSSI_7 = rssiArray[6];
                            if(RSSI_7 == 0) RSSI_7 = null;
                            FIELD_STRENGTH_7 = fieldStrengthArray[6];
                            if(FIELD_STRENGTH_7 == 0) FIELD_STRENGTH_7 = null;

                            if(rssiSumWatt900MHz != 0.0) {
                                RSSI_SUM_900MHZ = wattToDbm(rssiSumWatt900MHz);
                            }
                            else {
                                RSSI_SUM_900MHZ = null;
                            }
                            if(fieldStrengthSumSquared900MHz != 0.0) {
                                FIELD_STRENGTH_SUM_900MHZ = Math.sqrt(fieldStrengthSumSquared900MHz);
                            }
                            else {
                                FIELD_STRENGTH_SUM_900MHZ = null;
                            }
                            if(rssiSumWatt1800MHz != 0.0) {
                                RSSI_SUM_1800MHZ = wattToDbm(rssiSumWatt1800MHz);
                            }
                            else {
                                RSSI_SUM_1800MHZ = null;
                            }
                            if(fieldStrengthSumSquared1800MHz != 0.0) {
                                FIELD_STRENGTH_SUM_1800MHZ = Math.sqrt(fieldStrengthSumSquared1800MHz);
                            }
                            else {
                                FIELD_STRENGTH_SUM_1800MHZ = null;
                            }
                        }

          
                        // GPS Data
						if (UTC_RAW_DATA != null && UTC_RAW_DATA.size() != 0) {
							UTC_POS_TIME = UTC_RAW_DATA.toDouble() as int;
						}
						else {
							UTC_POS_TIME = null;
						}
						if (LAT_RAW_DATA != null && LAT_RAW_DATA.size() != 0) {
							LATITUDE = LAT_RAW_DATA.toDouble();
						}
						else {
							LATITUDE = null;
						}
						LAT_HEMISPHERE = LAT_N_RAW_DATA;
						if (LONG_RAW_DATA != null && LONG_RAW_DATA.size() != 0) {
							LONGITUDE = LONG_RAW_DATA.toDouble();
						}
						else {
							LONGITUDE = null;
						}
						LONG_HEMISPHERE = LONG_N_RAW_DATA;
						if (QUAL_RAW_DATA != null && QUAL_RAW_DATA.size() != 0) {
							QUALITY = QUAL_RAW_DATA.toInteger();
						}
						else {
							QUALITY = null;
						}
						if (SAT_RAW_DATA != null && SAT_RAW_DATA.size() != 0) {
							NR_SATELLITES = SAT_RAW_DATA.toInteger();
						}
						else {
							NR_SATELLITES = null;
						}
						if (HDOP_RAW_DATA != null && HDOP_RAW_DATA.size() != 0) {
							HDOP = HDOP_RAW_DATA.toDouble();
						}
						else {
							HDOP = null;
						}
						if (GEO_HEIGHT_RAW_DATA != null && GEO_HEIGHT_RAW_DATA.size() != 0) {
							GEOID_HEIGHT = GEO_HEIGHT_RAW_DATA.toDouble();
						}
						else {
							GEOID_HEIGHT = null;
						}
						GEOID_HEIGHT_UNIT = GEO_HEIGHT_U_RAW_DATA;
						if (GEO_SEP_RAW_DATA != null && GEO_SEP_RAW_DATA.size() != 0) {
							GEOID_SEP = GEO_SEP_RAW_DATA.toDouble();
						}
						else {
							GEOID_SEP = null;
						}
						GEOID_SEP_UNIT = GEO_SEP_U_RAW_DATA;
					}catch(Throwable e){
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
				]]>
	    	</param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            <field name="UTC_POS_TIME" type="INTEGER"/>
            <field name="LATITUDE" type="DOUBLE" />
            <field name="LAT_HEMISPHERE" type="VARCHAR(32)" />
            <field name="LONGITUDE" type="DOUBLE" />
            <field name="LONG_HEMISPHERE" type="VARCHAR(32)" />
            <field name="QUALITY" type="INTEGER" />
            <field name="NR_SATELLITES" type="INTEGER" />
            <field name="HDOP" type="DOUBLE" />
            <field name="GEOID_HEIGHT" type="DOUBLE" />
            <field name="GEOID_HEIGHT_UNIT" type="VARCHAR(32)" />
            <field name="GEOID_SEP" type="DOUBLE" />
            <field name="GEOID_SEP_UNIT" type="VARCHAR(32)" />
            
            <field name="RSSI_SUM_900MHZ" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_SUM_900MHZ" type="DOUBLE" unit="V/m" />
            <field name="RSSI_SUM_1800MHZ" type="DOUBLE" unit="dBm" />
            <field name="FIELD_STRENGTH_SUM_1800MHZ" type="DOUBLE" unit="V/m" />
            <field name="LAC_1" type="INTEGER" />
            <field name="CID_1" type="INTEGER" />
            <field name="ARFCN_1" type="INTEGER" />
            <field name="FREQUENCY_1" type="DOUBLE" unit="MHz" />
            <field name="RSSI_1" type="INTEGER" unit="dBm" />
            <field name="FIELD_STRENGTH_1" type="DOUBLE" unit="V/m" />
            <field name="LAC_2" type="INTEGER" />
            <field name="CID_2" type="INTEGER" />
            <field name="ARFCN_2" type="INTEGER" />
            <field name="FREQUENCY_2" type="DOUBLE" unit="MHz" />
            <field name="RSSI_2" type="INTEGER" unit="dBm" />
            <field name="FIELD_STRENGTH_2" type="DOUBLE" unit="V/m" />
            <field name="LAC_3" type="INTEGER" />
            <field name="CID_3" type="INTEGER" />
            <field name="ARFCN_3" type="INTEGER" />
            <field name="FREQUENCY_3" type="DOUBLE" unit="MHz" />
            <field name="RSSI_3" type="INTEGER" unit="dBm" />
            <field name="FIELD_STRENGTH_3" type="DOUBLE" unit="V/m" />
            <field name="LAC_4" type="INTEGER" />
            <field name="CID_4" type="INTEGER" />
            <field name="ARFCN_4" type="INTEGER" />
            <field name="FREQUENCY_4" type="DOUBLE" unit="MHz" />
            <field name="RSSI_4" type="INTEGER" unit="dBm" />
            <field name="FIELD_STRENGTH_4" type="DOUBLE" unit="V/m" />
            <field name="LAC_5" type="INTEGER" />
            <field name="CID_5" type="INTEGER" />
            <field name="ARFCN_5" type="INTEGER" />
            <field name="FREQUENCY_5" type="DOUBLE" unit="MHz" />
            <field name="RSSI_5" type="INTEGER" unit="dBm" />
            <field name="FIELD_STRENGTH_5" type="DOUBLE" unit="V/m" />
            <field name="LAC_6" type="INTEGER" />
            <field name="CID_6" type="INTEGER" />
            <field name="ARFCN_6" type="INTEGER" />
            <field name="FREQUENCY_6" type="DOUBLE" unit="MHz" />
            <field name="RSSI_6" type="INTEGER" unit="dBm" />
            <field name="FIELD_STRENGTH_6" type="DOUBLE" unit="V/m" />
            <field name="LAC_7" type="INTEGER" />
            <field name="CID_7" type="INTEGER" />
            <field name="ARFCN_7" type="INTEGER" />
            <field name="FREQUENCY_7" type="DOUBLE" unit="MHz" />
            <field name="RSSI_7" type="INTEGER" unit="dBm" />
            <field name="FIELD_STRENGTH_7" type="DOUBLE" unit="V/m" />
            
            <field name="DATA_IMPORT_SOURCE" type="SMALLINT" />
        </output-structure>
    </processing-class>
    <description>GSM data from the OSTest deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">select * from OSTest_Gsm__muxed__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
