<virtual-sensor name="OSTest_Alphasense_Dynamic__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.AlphasenseVirtualSensor</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="message_type">dynamic</param>
            <param name="scriptlet">
                <![CDATA[
                    if ( ! isdef('positionMap')) { positionMap = [:]; }
                    if (POSITION != null && GENERATION_TIME > System.currentTimeMillis()-2592000000) { positionMap.put(POSITION, [System.currentTimeMillis(), DEVICE_ID]); }
                ]]>
            </param>
            <param name="period">120000</param>
            <param name="scriplet-periodic">
                <![CDATA[
                	try {
                		// default alarm time after which an email is sent if no messages have been received
                    	def timeDifferenceOffsetDefault = 86400000;
                		// a list of alarm time per position
                    	def timeDifferenceOffsetPositionMap = [:];
                    	// the mail recipients
                    	def mailrecipients = ["opensense-admin@tik.ee.ethz.ch"];
                    	
                    	if ( isdef('positionMap')) {
                    		def rmlist = [];
                    		for (entry in positionMap) {
                    			def now = System.currentTimeMillis();
                    	    	def timeDifference = now - entry.value[0];
                    	    	def timeDifferenceOffset = timeDifferenceOffsetDefault;
                    	    	if (timeDifferenceOffsetPositionMap.containsKey(entry.key)) {
                    	    		timeDifferenceOffset = timeDifferenceOffsetPositionMap.get(entry.key);
                    	    	}
                    	    	if (timeDifference > timeDifferenceOffset) {
                    	    		// Notify by email
                    	    		def emailTitle = "[OSTest GSN] - OFFLINE WARNING [" + (new Date(now)).format('dd/MM/yyyy HH:mm:ss') + "] - " + vsname.split("_",2)[0].toUpperCase() + " POS " + entry.key;
                    	    		def emailContent = "OFFLINE WARNING [" + (new Date(now)).format('dd/MM/yyyy HH:mm:ss') + "] - " + vsname.split("_",2)[0].toUpperCase() + " POS " + entry.key + " (device_id=" + entry.value[1] + "):\n\n No " + vsname + " messages received in the last " + (timeDifference/60000.0) + " minutes.";

                       		 		sendEmail(mailrecipients, emailTitle, emailContent);
                        			rmlist.add(entry.key)
                        		}
                      		}
                        	positionMap.keySet().removeAll( rmlist as Set );
                    	}
					} catch(Throwable e) {
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" />
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            <field name="SENSOR_CURRENT" type="DOUBLE" unit="uA" />
            <field name="SENSOR_PPM_1" type="DOUBLE" unit="ppm" />
            <field name="SENSOR_PPM_2" type="DOUBLE" unit="ppm" />
            <field name="AMBIENT_TEMP" type="DOUBLE" unit="C" />
            <field name="OFFSET_COMP" type="DOUBLE" unit="uA" />
            <field name="SENSITIVITY_COMP" type="DOUBLE" unit="%" />
            <field name="MEASUREMENT_ID" type="BIGINT" />
        </output-structure>
    </processing-class>
    <description>Alphasense sensor reading from the OSTest deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">select * from OSTest_Alphasense__muxed__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
