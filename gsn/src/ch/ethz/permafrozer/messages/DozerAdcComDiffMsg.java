/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerAdcComDiffMsg'
 * message type.
 */

package ch.ethz.permafrozer.messages;

public class DozerAdcComDiffMsg extends ch.ethz.permafrozer.messages.DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 23;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 132;

    /** Create a new DozerAdcComDiffMsg of size 23. */
    public DozerAdcComDiffMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerAdcComDiffMsg of the given data_length. */
    public DozerAdcComDiffMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAdcComDiffMsg with the given data_length
     * and base offset.
     */
    public DozerAdcComDiffMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAdcComDiffMsg using the given byte array
     * as backing store.
     */
    public DozerAdcComDiffMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAdcComDiffMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerAdcComDiffMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAdcComDiffMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerAdcComDiffMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAdcComDiffMsg embedded in the given message
     * at the given base offset.
     */
    public DozerAdcComDiffMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAdcComDiffMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerAdcComDiffMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerAdcComDiffMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sampleNo=0x"+Long.toHexString(get_payload_sampleNo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sibADCDiff=";
        for (int i = 0; i < 4; i++) {
          s += "0x"+Long.toHexString(getElement_payload_sibADCDiff(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sibADCCom=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_payload_sibADCCom(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sampleNo
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sampleNo' is signed (false).
     */
    public static boolean isSigned_payload_sampleNo() {
        return false;
    }

    /**
     * Return whether the field 'payload.sampleNo' is an array (false).
     */
    public static boolean isArray_payload_sampleNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sampleNo'
     */
    public static int offset_payload_sampleNo() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sampleNo'
     */
    public static int offsetBits_payload_sampleNo() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'payload.sampleNo'
     */
    public int get_payload_sampleNo() {
        return (int)getUIntBEElement(offsetBits_payload_sampleNo(), 16);
    }

    /**
     * Set the value of the field 'payload.sampleNo'
     */
    public void set_payload_sampleNo(int value) {
        setUIntBEElement(offsetBits_payload_sampleNo(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.sampleNo'
     */
    public static int size_payload_sampleNo() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.sampleNo'
     */
    public static int sizeBits_payload_sampleNo() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sibADCDiff
    //   Field type: int[]
    //   Offset (bits): 72
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sibADCDiff' is signed (false).
     */
    public static boolean isSigned_payload_sibADCDiff() {
        return false;
    }

    /**
     * Return whether the field 'payload.sibADCDiff' is an array (true).
     */
    public static boolean isArray_payload_sibADCDiff() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sibADCDiff'
     */
    public static int offset_payload_sibADCDiff(int index1) {
        int offset = 72;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sibADCDiff'
     */
    public static int offsetBits_payload_sibADCDiff(int index1) {
        int offset = 72;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'payload.sibADCDiff' as a int[]
     */
    public int[] get_payload_sibADCDiff() {
        int[] tmp = new int[4];
        for (int index0 = 0; index0 < numElements_payload_sibADCDiff(0); index0++) {
            tmp[index0] = getElement_payload_sibADCDiff(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.sibADCDiff' from the given int[]
     */
    public void set_payload_sibADCDiff(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_sibADCDiff(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'payload.sibADCDiff'
     */
    public int getElement_payload_sibADCDiff(int index1) {
        return (int)getUIntBEElement(offsetBits_payload_sibADCDiff(index1), 16);
    }

    /**
     * Set an element of the array 'payload.sibADCDiff'
     */
    public void setElement_payload_sibADCDiff(int index1, int value) {
        setUIntBEElement(offsetBits_payload_sibADCDiff(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.sibADCDiff'
     */
    public static int totalSize_payload_sibADCDiff() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.sibADCDiff'
     */
    public static int totalSizeBits_payload_sibADCDiff() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.sibADCDiff'
     */
    public static int elementSize_payload_sibADCDiff() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.sibADCDiff'
     */
    public static int elementSizeBits_payload_sibADCDiff() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'payload.sibADCDiff'
     */
    public static int numDimensions_payload_sibADCDiff() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.sibADCDiff'
     */
    public static int numElements_payload_sibADCDiff() {
        return 4;
    }

    /**
     * Return the number of elements in the array 'payload.sibADCDiff'
     * for the given dimension.
     */
    public static int numElements_payload_sibADCDiff(int dimension) {
      int array_dims[] = { 4,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sibADCCom
    //   Field type: int[]
    //   Offset (bits): 136
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sibADCCom' is signed (false).
     */
    public static boolean isSigned_payload_sibADCCom() {
        return false;
    }

    /**
     * Return whether the field 'payload.sibADCCom' is an array (true).
     */
    public static boolean isArray_payload_sibADCCom() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sibADCCom'
     */
    public static int offset_payload_sibADCCom(int index1) {
        int offset = 136;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sibADCCom'
     */
    public static int offsetBits_payload_sibADCCom(int index1) {
        int offset = 136;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'payload.sibADCCom' as a int[]
     */
    public int[] get_payload_sibADCCom() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_payload_sibADCCom(0); index0++) {
            tmp[index0] = getElement_payload_sibADCCom(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.sibADCCom' from the given int[]
     */
    public void set_payload_sibADCCom(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_sibADCCom(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'payload.sibADCCom'
     */
    public int getElement_payload_sibADCCom(int index1) {
        return (int)getUIntBEElement(offsetBits_payload_sibADCCom(index1), 16);
    }

    /**
     * Set an element of the array 'payload.sibADCCom'
     */
    public void setElement_payload_sibADCCom(int index1, int value) {
        setUIntBEElement(offsetBits_payload_sibADCCom(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.sibADCCom'
     */
    public static int totalSize_payload_sibADCCom() {
        return (48 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.sibADCCom'
     */
    public static int totalSizeBits_payload_sibADCCom() {
        return 48;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.sibADCCom'
     */
    public static int elementSize_payload_sibADCCom() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.sibADCCom'
     */
    public static int elementSizeBits_payload_sibADCCom() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'payload.sibADCCom'
     */
    public static int numDimensions_payload_sibADCCom() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.sibADCCom'
     */
    public static int numElements_payload_sibADCCom() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'payload.sibADCCom'
     * for the given dimension.
     */
    public static int numElements_payload_sibADCCom(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
