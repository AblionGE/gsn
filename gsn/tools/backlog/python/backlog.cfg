###########################################################
#
# OPTIONS
#
# BackLog specific parameters have to be set here.
#
###########################################################
[options]

# The device id specifies the id the CoreStation is
# using. It operates as a unique specifier per deployment.
# Thus, it must have a unique number. If the CoreStation
# is equipped with an Access Node, the Access Node and the
# CoreStation must have the same id (device_id = node_id)

device_id = 0

# The TCP port BackLog is listening for incoming GSN
# connection requests.

gsn_port = 9003

# 0 if normal operating mode should be used. The Core-
# Station will be powered constantly.
# 1 if the CoreStation should be operated in the duty-cycle
# mode. In this case a TinyNode with a power control image
# has to be equipped.

duty_cycle_mode = 0

# The sqlite3 database file name which will be used to
# backlog data sent to GSN.

backlog_db = /media/card/backlog/backlog.db

# Interval in hours after which all data in the backlog
# database will be resent to GSN.

backlog_db_resend_hr = 24

# A folder to be checked if at least folder_min_free_mb
# are left. This is used to check if the sd-card is mounted
# properly. If less space is available BackLog will exit at
# startup with an error message.

folder_to_check_size = /media/card/
folder_min_free_mb = 32

# The serial TOS source address BackLog can communicate
# with a TinyNode running TinyOS version one or two.
# These parameters are only needed if BackLog runs a
# plugin using the TOSPeer module.

tos_source_addr = serial@/dev/ttyS2:57600
tos_version = 2



###########################################################
#
# SCHEDULE
#
# Schedule specific parameters have to be set here.
#
###########################################################
[schedule]

# The schedule file name which will be used to store the
# actual schedule. Their will be a second file generated
# ending with .parsed containing the pickled schedule
# object.

schedule_file = /media/card/backlog/schedule_file

# The maximum number of minutes BackLog will be waiting for
# GSN to connect at startup. After this time has passed
# BackLog will be using the locally stored schedule file.

max_gsn_connect_wait_minutes = 2

# The maximum number of minutes BackLog will be waiting for
# GSN to answer on a new schedule request at startup. After
# this time has passed BackLog will be using the locally
# stored schedule file. 

max_gsn_get_schedule_wait_minutes = 1

# The daytime in UTC and number of minutes the service
# wake-up should take place. The service window will only
# be scheduled in duty-cycle mode. If so the CoreStation
# will be waked up every day at this time for the specified
# number of minutes. If service_wakeup_disable is set to 1
# the service wake-up will be disabled (if the tinynode
# is not connected for more than half the service window
# interval time, the service wake-up is done even if
# disabled).

service_wakeup_schedule = 08:00
service_wakeup_minutes = 15
service_wakeup_disable = 0

# The maximum number of minutes BackLog will wait without
# duty-cycling for the next schedule. This parameter is
# only of importance in duty-cycle mode.

max_next_schedule_wait_minutes = 5

# An approximation for a normal CoreStation startup in
# seconds. This is needed to wake-up the CoreStation
# little bit prior to the next schedule time after a
# duty-cycle. Thus, BackLog is up and running when the
# task should be scheduled.

approximate_startup_seconds = 90

# After BackLog has finished all its tasks it finally
# shuts down the CoreStation. If anything goes wrong on
# shutdown this parameter defines after how many minutes
# the power to the CoreStation should be cut in any case.

hard_shutdown_offset_minutes = 2



###########################################################
#
# PLUGINS
#
# Plugin specific parameters have to be set here.
#
# A plugin will be started at BackLog startup time if set
# to 1. If set to 0 the plugin can still be loaded by the
# scheduler dynamically at runtime.
# Each plugin can define its own parameter subsection
# [PluginName_options] in which plugin specific parameters
# can be defined.
#
# Each pluging can define at least the following three
# parameters (if not defined the default will be used):
#
# priority:    It can be set to values between 1 and 100.
#              It specifies the order (1 first, 100 last)
#              messages are sent to GSN. (default=99 if not
#              otherwise specified in the plugin)
#
# backlog:     If set to true, messages will be backlogged
#              in the sqlite3 backlog database and only be
#              removed from it if GSN has savely stored the
#              data in its SQL database.
#              If set to false, messages are not backlogged.
#              (default=true if not otherwise specified in
#              the plugin)
#
# max_runtime: Specifies the time in minutes the plugin is
#              maximally allowed to run. If it is still
#              running after this time BackLog will stop
#              it. If this parameter is set to -1 the
#              plugin is allowed to run indefinitely.
#              This value can be overwritten by the
#              'max_runtime_minutes' parameter defined in
#              the schedule file.
#              (default=-1)
#
###########################################################
[plugins]

# Operates as a bidirectional repeater for TOS messages.
# The CoreStation has to be equipped with an access node.
# All messages will be backlogged by default.

TOSPlugin = 0
TOS1xPlugin = 0

# Collects BackLog specific status informations and
# transmits them to GSN.

BackLogStatusPlugin = 0

# Collects CoreStation specific status informations and
# transmits them to GSN.

CoreStationStatusPlugin = 0

# Observes specific folders for new incoming files and
# transmits them savely to GSN. Interrupted transmissions
# will be resumed as soon as the connection is re-
# established.

BinaryPlugin = 0

# Reads Vaisala weather station data and transmits it to
# GSN.

VaisalaWXT520Plugin = 0

# Read GPS data and transmit it to GSN.
GPSPlugin = 0



[TOSPlugin_options]
priority = 10
backlog = true


[TOS1xPlugin_options]
priority = 10
backlog = true


[BackLogStatusPlugin_options]
priority = 20
backlog = true

# The interval in seconds after which the BackLogStatus-
# Plugin will send a new status message to GSN. Instead
# of using or combined with this functionality schedules
# can be used to generate these messages.

#poll_interval = 30


[CoreStationStatusPlugin_options]
priority = 20
backlog = true

# The interval in seconds after which the CoreStation-
# StatusPlugin will send a new CoreStation status message
# to GSN. Instead of using or combined with this
# functionality schedules can be used to generate these
# messages.

#poll_interval = 30

# DEPRECATED
# Has to be set to 1 for old Core boards.
calibrate = 0


[BinaryPlugin_options]
priority = 50
backlog = false

# The root directory in which the observed subfolders
# will be created. If no watches are defined this folder
# will be watched directly.

rootdir = /media/card/backlog/binaryplugin

# Defines the different subfolders which should be
# observed for new files to be transmitted to GSN. The first
# entry defines the relative folder to be watched. The second
# entry where the data should be stored on the side of
# GSN (database or filesystem). The third entry defines optionally
# a device id can be set, if binaries are coming from a different
# device. The fourth entry defines only if filesystem is used for
# storage, how the files should be separated related to their
# generation time.
# e.g. watch1 = webcam1,filesystem,1234,yyyy-MM

watch1 = webcam1,filesystem,,
watch2 = camera1,filesystem,,yyyy-MM-dd

# Wait at least the specified number of minutes after
# plugin startup before allowing BackLog to stop the
# BinaryPlugin. This is useful to wait some time for a new
# file to arrive in the observed folders. Thus, it can be
# transmitted to GSN.

wait_min_for_file = 2


[VaisalaWXT520Plugin_options]
priority = 20
backlog = true

# The interval in seconds after which the VaisalaWXT520-
# Plugin will send a new vaisala message to GSN. Instead
# of using or combined with this functionality schedules
# can be used to generate these messages.

#poll_interval = 60


[GPSPlugin_options]
priority = 20
backlog = true
#max_runtime = 5
# gps_mode = [raw, nav]]
# raw mode requires a LEA-6T GPS receiver
# nav mode produces GPGGA output
gps_mode = raw
# gps_log_mode = [binary, ascii (not supported yet)]
# is only relevant for raw mode
gps_log_mode = binary
gps_device = /dev/acm/ublox6
poll_interval = 30
measurement_time = 1814400
#Iff duty-cycle mode has been enabled,
#the following define the WLAN duty-cycle
wlan_on_time = 20
wlan_off_time = 40
#File that stores the sample count past power cycles.
#file must exist and contain the start value
cnt_file = /media/card/backlog/GPS_cnt.txt



###########################################################
#
# LOGGING
#
# Logging specific parameters have to be set in the
# following sections.
#
# For further information please refer to
# http://docs.python.org/library/logging.html
#
###########################################################
[loggers]
keys = root

[handlers]
keys = stdout,file,filecard

[formatters]
keys = datetimeLevelclass

[logger_root]
level=NOTSET
handlers=stdout,file,filecard

[handler_stdout]
class=StreamHandler
level=INFO
formatter=datetimeLevelclass
args=(sys.stdout,)

[handler_file]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=datetimeLevelclass
args=('/tmp/backlog-debug.log','a',2621440,9)

[handler_filecard]
class=handlers.RotatingFileHandler
level=INFO
formatter=datetimeLevelclass
args=('/media/card/backlog/backlog.log','a',2621440,9)

[formatter_datetimeLevelclass]
format=%(levelname)-7s [%(asctime)s,%(msecs)3.3d] [%(threadName)s] (%(filename)s:%(lineno)d)     - %(message)s
datefmt=%Z %d/%m/%Y %H:%M:%S
class=logging.Formatter
