/* soapClient.cpp
   Generated by gSOAP 2.7.16 from gsnwebservice.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.16 2011-02-23 09:03:51 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getContainerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getContainerInfo *ns1__getContainerInfo, _ns1__getContainerInfoResponse *ns1__getContainerInfoResponse)
{	struct __ns4__getContainerInfo soap_tmp___ns4__getContainerInfo;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getContainerInfo";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__getContainerInfo.ns1__getContainerInfo = ns1__getContainerInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__getContainerInfo(soap, &soap_tmp___ns4__getContainerInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__getContainerInfo(soap, &soap_tmp___ns4__getContainerInfo, "-ns4:getContainerInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__getContainerInfo(soap, &soap_tmp___ns4__getContainerInfo, "-ns4:getContainerInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getContainerInfoResponse)
		return soap_closesock(soap);
	ns1__getContainerInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getContainerInfoResponse->soap_get(soap, "ns1:getContainerInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getMultiData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getMultiData *ns1__getMultiData, _ns1__getMultiDataResponse *ns1__getMultiDataResponse)
{	struct __ns4__getMultiData soap_tmp___ns4__getMultiData;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getMultiData";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__getMultiData.ns1__getMultiData = ns1__getMultiData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__getMultiData(soap, &soap_tmp___ns4__getMultiData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__getMultiData(soap, &soap_tmp___ns4__getMultiData, "-ns4:getMultiData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__getMultiData(soap, &soap_tmp___ns4__getMultiData, "-ns4:getMultiData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getMultiDataResponse)
		return soap_closesock(soap);
	ns1__getMultiDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getMultiDataResponse->soap_get(soap, "ns1:getMultiDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__listVirtualSensorNames(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__listVirtualSensorNames *ns1__listVirtualSensorNames, _ns1__listVirtualSensorNamesResponse *ns1__listVirtualSensorNamesResponse)
{	struct __ns4__listVirtualSensorNames soap_tmp___ns4__listVirtualSensorNames;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:listVirtualSensorNames";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__listVirtualSensorNames.ns1__listVirtualSensorNames = ns1__listVirtualSensorNames;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__listVirtualSensorNames(soap, &soap_tmp___ns4__listVirtualSensorNames);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__listVirtualSensorNames(soap, &soap_tmp___ns4__listVirtualSensorNames, "-ns4:listVirtualSensorNames", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__listVirtualSensorNames(soap, &soap_tmp___ns4__listVirtualSensorNames, "-ns4:listVirtualSensorNames", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listVirtualSensorNamesResponse)
		return soap_closesock(soap);
	ns1__listVirtualSensorNamesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listVirtualSensorNamesResponse->soap_get(soap, "ns1:listVirtualSensorNamesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getNextData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getNextData *ns1__getNextData, _ns1__getNextDataResponse *ns1__getNextDataResponse)
{	struct __ns4__getNextData soap_tmp___ns4__getNextData;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getNextData";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__getNextData.ns1__getNextData = ns1__getNextData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__getNextData(soap, &soap_tmp___ns4__getNextData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__getNextData(soap, &soap_tmp___ns4__getNextData, "-ns4:getNextData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__getNextData(soap, &soap_tmp___ns4__getNextData, "-ns4:getNextData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getNextDataResponse)
		return soap_closesock(soap);
	ns1__getNextDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getNextDataResponse->soap_get(soap, "ns1:getNextDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__registerQuery(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__registerQuery *ns1__registerQuery, _ns1__registerQueryResponse *ns1__registerQueryResponse)
{	struct __ns4__registerQuery soap_tmp___ns4__registerQuery;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:registerQuery";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__registerQuery.ns1__registerQuery = ns1__registerQuery;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__registerQuery(soap, &soap_tmp___ns4__registerQuery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__registerQuery(soap, &soap_tmp___ns4__registerQuery, "-ns4:registerQuery", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__registerQuery(soap, &soap_tmp___ns4__registerQuery, "-ns4:registerQuery", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__registerQueryResponse)
		return soap_closesock(soap);
	ns1__registerQueryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__registerQueryResponse->soap_get(soap, "ns1:registerQueryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__unregisterQuery(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__unregisterQuery *ns1__unregisterQuery, _ns1__unregisterQueryResponse *ns1__unregisterQueryResponse)
{	struct __ns4__unregisterQuery soap_tmp___ns4__unregisterQuery;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:unregisterQuery";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__unregisterQuery.ns1__unregisterQuery = ns1__unregisterQuery;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__unregisterQuery(soap, &soap_tmp___ns4__unregisterQuery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__unregisterQuery(soap, &soap_tmp___ns4__unregisterQuery, "-ns4:unregisterQuery", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__unregisterQuery(soap, &soap_tmp___ns4__unregisterQuery, "-ns4:unregisterQuery", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__unregisterQueryResponse)
		return soap_closesock(soap);
	ns1__unregisterQueryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__unregisterQueryResponse->soap_get(soap, "ns1:unregisterQueryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getLatestMultiData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getLatestMultiData *ns1__getLatestMultiData, _ns1__getLatestMultiDataResponse *ns1__getLatestMultiDataResponse)
{	struct __ns4__getLatestMultiData soap_tmp___ns4__getLatestMultiData;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getLatestMultiData";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__getLatestMultiData.ns1__getLatestMultiData = ns1__getLatestMultiData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__getLatestMultiData(soap, &soap_tmp___ns4__getLatestMultiData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__getLatestMultiData(soap, &soap_tmp___ns4__getLatestMultiData, "-ns4:getLatestMultiData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__getLatestMultiData(soap, &soap_tmp___ns4__getLatestMultiData, "-ns4:getLatestMultiData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getLatestMultiDataResponse)
		return soap_closesock(soap);
	ns1__getLatestMultiDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getLatestMultiDataResponse->soap_get(soap, "ns1:getLatestMultiDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__deleteVirtualSensor(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__deleteVirtualSensor *ns1__deleteVirtualSensor, _ns1__deleteVirtualSensorResponse *ns1__deleteVirtualSensorResponse)
{	struct __ns4__deleteVirtualSensor soap_tmp___ns4__deleteVirtualSensor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:deleteVirtualSensor";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__deleteVirtualSensor.ns1__deleteVirtualSensor = ns1__deleteVirtualSensor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__deleteVirtualSensor(soap, &soap_tmp___ns4__deleteVirtualSensor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__deleteVirtualSensor(soap, &soap_tmp___ns4__deleteVirtualSensor, "-ns4:deleteVirtualSensor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__deleteVirtualSensor(soap, &soap_tmp___ns4__deleteVirtualSensor, "-ns4:deleteVirtualSensor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteVirtualSensorResponse)
		return soap_closesock(soap);
	ns1__deleteVirtualSensorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__deleteVirtualSensorResponse->soap_get(soap, "ns1:deleteVirtualSensorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getVirtualSensorsDetails(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getVirtualSensorsDetails *ns1__getVirtualSensorsDetails, _ns1__getVirtualSensorsDetailsResponse *ns1__getVirtualSensorsDetailsResponse)
{	struct __ns4__getVirtualSensorsDetails soap_tmp___ns4__getVirtualSensorsDetails;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getVirtualSensorsDetails";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__getVirtualSensorsDetails.ns1__getVirtualSensorsDetails = ns1__getVirtualSensorsDetails;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__getVirtualSensorsDetails(soap, &soap_tmp___ns4__getVirtualSensorsDetails);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__getVirtualSensorsDetails(soap, &soap_tmp___ns4__getVirtualSensorsDetails, "-ns4:getVirtualSensorsDetails", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__getVirtualSensorsDetails(soap, &soap_tmp___ns4__getVirtualSensorsDetails, "-ns4:getVirtualSensorsDetails", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getVirtualSensorsDetailsResponse)
		return soap_closesock(soap);
	ns1__getVirtualSensorsDetailsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getVirtualSensorsDetailsResponse->soap_get(soap, "ns1:getVirtualSensorsDetailsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__createVirtualSensor(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__createVirtualSensor *ns1__createVirtualSensor, _ns1__createVirtualSensorResponse *ns1__createVirtualSensorResponse)
{	struct __ns4__createVirtualSensor soap_tmp___ns4__createVirtualSensor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:createVirtualSensor";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__createVirtualSensor.ns1__createVirtualSensor = ns1__createVirtualSensor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__createVirtualSensor(soap, &soap_tmp___ns4__createVirtualSensor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__createVirtualSensor(soap, &soap_tmp___ns4__createVirtualSensor, "-ns4:createVirtualSensor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__createVirtualSensor(soap, &soap_tmp___ns4__createVirtualSensor, "-ns4:createVirtualSensor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__createVirtualSensorResponse)
		return soap_closesock(soap);
	ns1__createVirtualSensorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__createVirtualSensorResponse->soap_get(soap, "ns1:createVirtualSensorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__listWrapperURLs(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__listWrapperURLs *ns1__listWrapperURLs, _ns1__listWrapperURLsResponse *ns1__listWrapperURLsResponse)
{	struct __ns4__listWrapperURLs soap_tmp___ns4__listWrapperURLs;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:listWrapperURLs";
	soap->encodingStyle = NULL;
	soap_tmp___ns4__listWrapperURLs.ns1__listWrapperURLs = ns1__listWrapperURLs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns4__listWrapperURLs(soap, &soap_tmp___ns4__listWrapperURLs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns4__listWrapperURLs(soap, &soap_tmp___ns4__listWrapperURLs, "-ns4:listWrapperURLs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns4__listWrapperURLs(soap, &soap_tmp___ns4__listWrapperURLs, "-ns4:listWrapperURLs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listWrapperURLsResponse)
		return soap_closesock(soap);
	ns1__listWrapperURLsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listWrapperURLsResponse->soap_get(soap, "ns1:listWrapperURLsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__getContainerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getContainerInfo *ns1__getContainerInfo, _ns1__getContainerInfoResponse *ns1__getContainerInfoResponse)
{	struct __ns5__getContainerInfo soap_tmp___ns5__getContainerInfo;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getContainerInfo";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__getContainerInfo.ns1__getContainerInfo = ns1__getContainerInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__getContainerInfo(soap, &soap_tmp___ns5__getContainerInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__getContainerInfo(soap, &soap_tmp___ns5__getContainerInfo, "-ns5:getContainerInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__getContainerInfo(soap, &soap_tmp___ns5__getContainerInfo, "-ns5:getContainerInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getContainerInfoResponse)
		return soap_closesock(soap);
	ns1__getContainerInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getContainerInfoResponse->soap_get(soap, "ns1:getContainerInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__getMultiData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getMultiData *ns1__getMultiData, _ns1__getMultiDataResponse *ns1__getMultiDataResponse)
{	struct __ns5__getMultiData soap_tmp___ns5__getMultiData;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getMultiData";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__getMultiData.ns1__getMultiData = ns1__getMultiData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__getMultiData(soap, &soap_tmp___ns5__getMultiData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__getMultiData(soap, &soap_tmp___ns5__getMultiData, "-ns5:getMultiData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__getMultiData(soap, &soap_tmp___ns5__getMultiData, "-ns5:getMultiData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getMultiDataResponse)
		return soap_closesock(soap);
	ns1__getMultiDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getMultiDataResponse->soap_get(soap, "ns1:getMultiDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__listVirtualSensorNames(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__listVirtualSensorNames *ns1__listVirtualSensorNames, _ns1__listVirtualSensorNamesResponse *ns1__listVirtualSensorNamesResponse)
{	struct __ns5__listVirtualSensorNames soap_tmp___ns5__listVirtualSensorNames;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:listVirtualSensorNames";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__listVirtualSensorNames.ns1__listVirtualSensorNames = ns1__listVirtualSensorNames;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__listVirtualSensorNames(soap, &soap_tmp___ns5__listVirtualSensorNames);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__listVirtualSensorNames(soap, &soap_tmp___ns5__listVirtualSensorNames, "-ns5:listVirtualSensorNames", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__listVirtualSensorNames(soap, &soap_tmp___ns5__listVirtualSensorNames, "-ns5:listVirtualSensorNames", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listVirtualSensorNamesResponse)
		return soap_closesock(soap);
	ns1__listVirtualSensorNamesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listVirtualSensorNamesResponse->soap_get(soap, "ns1:listVirtualSensorNamesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__getNextData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getNextData *ns1__getNextData, _ns1__getNextDataResponse *ns1__getNextDataResponse)
{	struct __ns5__getNextData soap_tmp___ns5__getNextData;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getNextData";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__getNextData.ns1__getNextData = ns1__getNextData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__getNextData(soap, &soap_tmp___ns5__getNextData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__getNextData(soap, &soap_tmp___ns5__getNextData, "-ns5:getNextData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__getNextData(soap, &soap_tmp___ns5__getNextData, "-ns5:getNextData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getNextDataResponse)
		return soap_closesock(soap);
	ns1__getNextDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getNextDataResponse->soap_get(soap, "ns1:getNextDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__registerQuery(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__registerQuery *ns1__registerQuery, _ns1__registerQueryResponse *ns1__registerQueryResponse)
{	struct __ns5__registerQuery soap_tmp___ns5__registerQuery;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:registerQuery";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__registerQuery.ns1__registerQuery = ns1__registerQuery;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__registerQuery(soap, &soap_tmp___ns5__registerQuery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__registerQuery(soap, &soap_tmp___ns5__registerQuery, "-ns5:registerQuery", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__registerQuery(soap, &soap_tmp___ns5__registerQuery, "-ns5:registerQuery", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__registerQueryResponse)
		return soap_closesock(soap);
	ns1__registerQueryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__registerQueryResponse->soap_get(soap, "ns1:registerQueryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__unregisterQuery(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__unregisterQuery *ns1__unregisterQuery, _ns1__unregisterQueryResponse *ns1__unregisterQueryResponse)
{	struct __ns5__unregisterQuery soap_tmp___ns5__unregisterQuery;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:unregisterQuery";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__unregisterQuery.ns1__unregisterQuery = ns1__unregisterQuery;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__unregisterQuery(soap, &soap_tmp___ns5__unregisterQuery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__unregisterQuery(soap, &soap_tmp___ns5__unregisterQuery, "-ns5:unregisterQuery", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__unregisterQuery(soap, &soap_tmp___ns5__unregisterQuery, "-ns5:unregisterQuery", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__unregisterQueryResponse)
		return soap_closesock(soap);
	ns1__unregisterQueryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__unregisterQueryResponse->soap_get(soap, "ns1:unregisterQueryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__getLatestMultiData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getLatestMultiData *ns1__getLatestMultiData, _ns1__getLatestMultiDataResponse *ns1__getLatestMultiDataResponse)
{	struct __ns5__getLatestMultiData soap_tmp___ns5__getLatestMultiData;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getLatestMultiData";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__getLatestMultiData.ns1__getLatestMultiData = ns1__getLatestMultiData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__getLatestMultiData(soap, &soap_tmp___ns5__getLatestMultiData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__getLatestMultiData(soap, &soap_tmp___ns5__getLatestMultiData, "-ns5:getLatestMultiData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__getLatestMultiData(soap, &soap_tmp___ns5__getLatestMultiData, "-ns5:getLatestMultiData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getLatestMultiDataResponse)
		return soap_closesock(soap);
	ns1__getLatestMultiDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getLatestMultiDataResponse->soap_get(soap, "ns1:getLatestMultiDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__deleteVirtualSensor(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__deleteVirtualSensor *ns1__deleteVirtualSensor, _ns1__deleteVirtualSensorResponse *ns1__deleteVirtualSensorResponse)
{	struct __ns5__deleteVirtualSensor soap_tmp___ns5__deleteVirtualSensor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:deleteVirtualSensor";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__deleteVirtualSensor.ns1__deleteVirtualSensor = ns1__deleteVirtualSensor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__deleteVirtualSensor(soap, &soap_tmp___ns5__deleteVirtualSensor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__deleteVirtualSensor(soap, &soap_tmp___ns5__deleteVirtualSensor, "-ns5:deleteVirtualSensor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__deleteVirtualSensor(soap, &soap_tmp___ns5__deleteVirtualSensor, "-ns5:deleteVirtualSensor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteVirtualSensorResponse)
		return soap_closesock(soap);
	ns1__deleteVirtualSensorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__deleteVirtualSensorResponse->soap_get(soap, "ns1:deleteVirtualSensorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__getVirtualSensorsDetails(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getVirtualSensorsDetails *ns1__getVirtualSensorsDetails, _ns1__getVirtualSensorsDetailsResponse *ns1__getVirtualSensorsDetailsResponse)
{	struct __ns5__getVirtualSensorsDetails soap_tmp___ns5__getVirtualSensorsDetails;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:getVirtualSensorsDetails";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__getVirtualSensorsDetails.ns1__getVirtualSensorsDetails = ns1__getVirtualSensorsDetails;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__getVirtualSensorsDetails(soap, &soap_tmp___ns5__getVirtualSensorsDetails);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__getVirtualSensorsDetails(soap, &soap_tmp___ns5__getVirtualSensorsDetails, "-ns5:getVirtualSensorsDetails", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__getVirtualSensorsDetails(soap, &soap_tmp___ns5__getVirtualSensorsDetails, "-ns5:getVirtualSensorsDetails", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getVirtualSensorsDetailsResponse)
		return soap_closesock(soap);
	ns1__getVirtualSensorsDetailsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getVirtualSensorsDetailsResponse->soap_get(soap, "ns1:getVirtualSensorsDetailsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__createVirtualSensor(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__createVirtualSensor *ns1__createVirtualSensor, _ns1__createVirtualSensorResponse *ns1__createVirtualSensorResponse)
{	struct __ns5__createVirtualSensor soap_tmp___ns5__createVirtualSensor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:createVirtualSensor";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__createVirtualSensor.ns1__createVirtualSensor = ns1__createVirtualSensor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__createVirtualSensor(soap, &soap_tmp___ns5__createVirtualSensor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__createVirtualSensor(soap, &soap_tmp___ns5__createVirtualSensor, "-ns5:createVirtualSensor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__createVirtualSensor(soap, &soap_tmp___ns5__createVirtualSensor, "-ns5:createVirtualSensor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__createVirtualSensorResponse)
		return soap_closesock(soap);
	ns1__createVirtualSensorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__createVirtualSensorResponse->soap_get(soap, "ns1:createVirtualSensorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__listWrapperURLs(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__listWrapperURLs *ns1__listWrapperURLs, _ns1__listWrapperURLsResponse *ns1__listWrapperURLsResponse)
{	struct __ns5__listWrapperURLs soap_tmp___ns5__listWrapperURLs;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:22001/services/GSNWebService/";
	if (!soap_action)
		soap_action = "urn:listWrapperURLs";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__listWrapperURLs.ns1__listWrapperURLs = ns1__listWrapperURLs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__listWrapperURLs(soap, &soap_tmp___ns5__listWrapperURLs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__listWrapperURLs(soap, &soap_tmp___ns5__listWrapperURLs, "-ns5:listWrapperURLs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__listWrapperURLs(soap, &soap_tmp___ns5__listWrapperURLs, "-ns5:listWrapperURLs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listWrapperURLsResponse)
		return soap_closesock(soap);
	ns1__listWrapperURLsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listWrapperURLsResponse->soap_get(soap, "ns1:listWrapperURLsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
